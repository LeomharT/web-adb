"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn2(format2) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign4 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component13(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component13.prototype.isReactComponent = {};
          Component13.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component13.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component13.prototype, methodName, {
                get: function() {
                  warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component13.prototype;
          function PureComponent2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent2.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent2;
          assign4(pureComponentPrototype, Component13.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef5() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement42(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement4(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign4({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement3(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array2, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement3(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
                  );
                }
                array2.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                child = children[i2];
                nextName = nextNamePrefix + getElementKey(child, i2);
                subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n2 = 0;
            mapChildren(children, function() {
              n2++;
            });
            return n2;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement3(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext8(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef11(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo5(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext10(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState15(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef16(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect15(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback8(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId2() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign4({}, props, {
                    value: prevLog
                  }),
                  info: assign4({}, props, {
                    value: prevInfo
                  }),
                  warn: assign4({}, props, {
                    value: prevWarn
                  }),
                  error: assign4({}, props, {
                    value: prevError
                  }),
                  group: assign4({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign4({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign4({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component14) {
            var prototype = Component14.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i2 = 0; i2 < node.length; i2++) {
                var child = node[i2];
                if (isValidElement3(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement3(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement3(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key = keys[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement42.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i2 = 2; i2 < arguments.length; i2++) {
                validateChildKeys(arguments[i2], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement4.apply(this, arguments);
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i2 = 0;
                try {
                  for (; i2 < queue.length; i2++) {
                    var callback = queue[i2];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i2 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory2 = createFactoryWithValidation;
          var Children3 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children3;
          exports.Component = Component13;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent2;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext8;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory2;
          exports.createRef = createRef5;
          exports.forwardRef = forwardRef11;
          exports.isValidElement = isValidElement3;
          exports.lazy = lazy;
          exports.memo = memo5;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback8;
          exports.useContext = useContext10;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect15;
          exports.useId = useId2;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect2;
          exports.useMemo = useMemo3;
          exports.useReducer = useReducer;
          exports.useRef = useRef16;
          exports.useState = useState15;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push2(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop2(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i2) {
            var index = i2;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i2) {
            var index = i2;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b2) {
            var diff = a2.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a2.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop2(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop2(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push2(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop2(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop2(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push2(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push2(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React64 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React64.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn2(format2) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment7 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i2 = 0; i2 < dependencies.length; i2++) {
              allNativeEvents.add(dependencies[i2]);
            }
          }
          var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              name,
              null,
              false,
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              name,
              null,
              false,
              false
            );
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              name,
              null,
              false,
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              false,
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              true,
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign4 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign4({}, props, {
                    value: prevLog
                  }),
                  info: assign4({}, props, {
                    value: prevInfo
                  }),
                  warn: assign4({}, props, {
                    value: prevWarn
                  }),
                  error: assign4({}, props, {
                    value: prevError
                  }),
                  group: assign4({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign4({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign4({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component13) {
            var prototype = Component13.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x2) {
              return "\nError generating stack: " + x2.message + "\n" + x2.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment7:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString2(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get4 = descriptor.get, set5 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get4.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set5.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e2) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled2(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign4({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled2(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled2(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString2(value);
                }
              } else if (node.value !== toString2(value)) {
                node.value = toString2(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString2(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i2 = 0; i2 < group.length; i2++) {
                var otherNode = group[i2];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString2(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString2(value)) {
                node.defaultValue = toString2(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React64.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString2(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i2 = 0; i2 < valuePropNames.length; i2++) {
                var propName = valuePropNames[i2];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i2 = 0; i2 < selectedValues.length; i2++) {
                selectedValue["$" + selectedValues[i2]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString2(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign4({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign4({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString2(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString2(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString2(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_15, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles2) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles2) {
                if (!styles2.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles2[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles2) {
            var style2 = node.style;
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles2[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles2) {
            var expanded = {};
            for (var key in styles2) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i2 = 0; i2 < longhands.length; i2++) {
                expanded[longhands[i2]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = assign4({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i2 = 0; i2 < queuedTargets.length; i2++) {
                restoreStateOfTarget(queuedTargets[i2]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a2, b2) {
            if (isInsideEventHandler) {
              return fn(a2, b2);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a2, b2);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM2) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e2) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a2, b2, c2, d2, e2, f2) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b2, c2, d2, e2, f2) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a2, b2, c2, d2, e2, f2) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b2, c2, d2, e2, f2) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get3(key) {
            return key._reactInternals;
          }
          function has2(key) {
            return key._reactInternals !== void 0;
          }
          function set4(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var ChildDeletion = 16;
          var ContentReset = 32;
          var Callback = 64;
          var DidCapture = 128;
          var ForceClientRender = 256;
          var Ref = 512;
          var Snapshot = 1024;
          var Passive = 2048;
          var Hydrating = 4096;
          var Visibility = 8192;
          var StoreConsistency = 16384;
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = 32767;
          var Incomplete = 32768;
          var ShouldCapture = 65536;
          var ForceUpdateForLegacySuspense = 131072;
          var Forked = 1048576;
          var RefStatic = 2097152;
          var LayoutStatic = 4194304;
          var PassiveStatic = 8388608;
          var MountLayoutDev = 16777216;
          var MountPassiveDev = 33554432;
          var BeforeMutationMask = Update | Snapshot | 0;
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get3(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b2.return) {
                a2 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b2) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign4({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map2 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map2.set(lane, label);
                lane *= 2;
              }
              return map2;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = 0;
          var ConcurrentMode = 1;
          var ProfileMode = 2;
          var StrictLegacyMode = 8;
          var StrictEffectsMode = 16;
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x2) {
            var asUint = x2 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var InputContinuousHydrationLane = 2;
          var InputContinuousLane = 4;
          var DefaultHydrationLane = 8;
          var DefaultLane = 16;
          var TransitionHydrationLane = 32;
          var TransitionLanes = 4194240;
          var TransitionLane1 = 64;
          var TransitionLane2 = 128;
          var TransitionLane3 = 256;
          var TransitionLane4 = 512;
          var TransitionLane5 = 1024;
          var TransitionLane6 = 2048;
          var TransitionLane7 = 4096;
          var TransitionLane8 = 8192;
          var TransitionLane9 = 16384;
          var TransitionLane10 = 32768;
          var TransitionLane11 = 65536;
          var TransitionLane12 = 131072;
          var TransitionLane13 = 262144;
          var TransitionLane14 = 524288;
          var TransitionLane15 = 1048576;
          var TransitionLane16 = 2097152;
          var RetryLanes = 130023424;
          var RetryLane1 = 4194304;
          var RetryLane2 = 8388608;
          var RetryLane3 = 16777216;
          var RetryLane4 = 33554432;
          var RetryLane5 = 67108864;
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = 134217728;
          var NonIdleLanes = 268435455;
          var IdleHydrationLane = 268435456;
          var IdleLane = 536870912;
          var OffscreenLane = 1073741824;
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b2) {
            return (a2 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set5, subset) {
            return (set5 & subset) === subset;
          }
          function mergeLanes(a2, b2) {
            return a2 | b2;
          }
          function removeLanes(set5, subset) {
            return set5 & ~subset;
          }
          function intersectLanes(a2, b2) {
            return a2 & b2;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b2) {
            return a2 !== NoLane && a2 < b2 ? a2 : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i2 = 0; i2 < TotalLanes; i2++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2 ? a2 : b2;
          }
          function lowerEventPriority(a2, b2) {
            return a2 === 0 || a2 > b2 ? a2 : b2;
          }
          function isHigherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i2 = 0;
            for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
            if (i2 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map2.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
                var queuedEvent = queuedDiscreteEvents[i2];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign4(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign4({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign4({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign4({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign4({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign4({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign4({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign4({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign4({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign4({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign4({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign4({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign4({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM2 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM2) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM2) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is2(x2, y2) {
            return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          function shallowEqual2(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i2 = 0; i2 < keysA.length; i2++) {
              var currentKey = keysA[i2];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e2) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i2 = 0; i2 < ancestors.length; i2++) {
                var info = ancestors[i2];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual2(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM2) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
              var eventName = simpleEventPluginEvents[i2];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
                var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
              var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent2(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent2(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent2(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent2(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent2(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent2(nodeA);
              nodeB = getParent2(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE2 = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop3() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop3;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE2) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
              var propKey = updatePayload[i2];
              var propValue = updatePayload[i2 + 1];
              if (propKey === STYLE2) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement42(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE2) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE2) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE2]);
              }
              (updatePayload = updatePayload || []).push(STYLE2, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE2) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign4({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement42(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has3 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has3(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop2(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push2(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component13, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component13)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop2(didPerformWorkStackCursor, fiber);
              pop2(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop2(didPerformWorkStackCursor, fiber);
              pop2(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push2(contextStackCursor, context, fiber);
              push2(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign4({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop2(didPerformWorkStackCursor, workInProgress2);
                pop2(contextStackCursor, workInProgress2);
                push2(contextStackCursor, mergedContext, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop2(didPerformWorkStackCursor, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component13 = node.type;
                    if (isContextProvider(Component13)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i2 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set5) {
              var array2 = [];
              set5.forEach(function(value) {
                array2.push(value);
              });
              return array2.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component13, baseProps) {
            if (Component13 && Component13.defaultProps) {
              var props = assign4({}, baseProps);
              var defaultProps = Component13.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push2(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop2(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
                var queue = concurrentQueues[i2];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign4({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i2 = 0; i2 < effects.length; i2++) {
                var effect = effects[i2];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React64.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign4({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set4(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment7) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i2 = 0; i2 < newChildren.length; i2++) {
                  var child = newChildren[i2];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment7) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c2) {
            if (c2 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c2;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push2(rootInstanceStackCursor, nextRootInstance, fiber);
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop2(contextStackCursor$1, fiber);
            push2(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop2(contextStackCursor$1, fiber);
            pop2(contextFiberStackCursor, fiber);
            pop2(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop2(contextStackCursor$1, fiber);
            pop2(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push2(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop2(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Insertion = 2;
          var Layout = 4;
          var Passive$1 = 8;
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
              var mutableSource = workInProgressSources[i2];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                    var oldHookName = hookTypesDev[i2];
                    var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i2 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
              if (objectIs(nextDeps[i2], prevDeps[i2])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component13, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component13(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component13(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action2) {
            return typeof action2 === "function" ? action2(state) : action2;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action2 = update.action;
                    newState = reducer(newState, action2);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action2 = update.action;
                newState = reducer(newState, action2);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action2) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action: action2,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action2) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action: action2,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action2);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action2) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e2) {
              setTimeout(function() {
                throw e2;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component13, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component13.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component13)
                  );
                }
              }
            }
            var render2 = Component13.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component13, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component13.type;
              if (isSimpleFunctionComponent(type) && Component13.compare === null && Component13.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component13.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component13.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component13.compare;
              compare = compare !== null ? compare : shallowEqual2;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component13, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x2) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual2(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component13, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component13, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component13.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component13)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component13, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component13, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component13, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component13, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component13.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component13)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component13)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component13, nextProps);
              mountClassInstance(workInProgress2, Component13, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component13, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component13, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component13, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component13, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component13, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component13.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component13, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component13 = init(payload);
            workInProgress2.type = Component13;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component13);
            var resolvedProps = resolveDefaultProps(Component13, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component13);
                  workInProgress2.type = Component13 = resolveFunctionForHotReloading(Component13);
                }
                child = updateFunctionComponent(null, workInProgress2, Component13, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component13 = resolveClassForHotReloading(Component13);
                }
                child = updateClassComponent(null, workInProgress2, Component13, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component13 = resolveForwardRefForHotReloading(Component13);
                }
                child = updateForwardRef(null, workInProgress2, Component13, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component13.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        "prop",
                        getComponentNameFromType(Component13)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component13,
                  resolveDefaultProps(Component13.type, resolvedProps),
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component13 !== null && typeof Component13 === "object" && Component13.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component13 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component13, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component13)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component13, nextProps);
            mountClassInstance(workInProgress2, Component13, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component13, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component13, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component13, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component13.prototype && typeof Component13.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component13) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component13, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component13) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentNameFromType(Component13) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component13)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component13, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component13, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component13, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component13);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component13) {
            {
              if (Component13) {
                if (Component13.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component13.displayName || Component13.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component13.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component13) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component13.contextType === "object" && Component13.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component13) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    if (!validateSuspenseListNestedChild(children[i2], i2)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    _tail,
                    null,
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    null,
                    null,
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component13 = workInProgress2.type;
                if (isContextProvider(Component13)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component13 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component13 ? unresolvedProps : resolveDefaultProps(Component13, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component13, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment7:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment7:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component13 = workInProgress2.type;
                if (isContextProvider(Component13)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component13 = workInProgress2.type;
                if (isContextProvider(Component13)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal2;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal2 = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal2 = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal2 === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal2;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal2 = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal2 = ref(instanceToUse);
                }
                {
                  if (typeof retVal2 === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (deletedFiber.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i2 = 0; i2 < deletions.length; i2++) {
                    var fiberToDelete = deletions[i2];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = 0;
          var BatchedContext = 1;
          var RenderContext = 2;
          var CommitContext = 4;
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (executionContext & RenderContext) !== NoContext;
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors2) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors2;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors2);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i2 = 0; i2 < checks.length; i2++) {
                      var check = checks[i2];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a2, b2, c2, d2) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a2, b2, c2, d2);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop2(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
                var recoverableError = recoverableErrors[i2];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i2 = 0; i2 < profilerEffects.length; i2++) {
                var _fiber = profilerEffects[i2];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root2 !== null) {
                  scheduleUpdateOnFiber(_root2, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e2) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component13) {
            var prototype = Component13.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component13) {
            if (typeof Component13 === "function") {
              return shouldConstruct$1(Component13) ? ClassComponent : FunctionComponent;
            } else if (Component13 !== void 0 && Component13 !== null) {
              var $$typeof = Component13.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment7, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.2.0";
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get3(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component13 = fiber.type;
              if (isContextProvider(Component13)) {
                return processChildContext(fiber, Component13, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get3(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign4({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign4({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn2("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                  if (oldPath[i2] !== newPath[i2]) {
                    warn2("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign4({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign4({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign4({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign4({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools,
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn2("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i2 = 0; i2 < mutableSources.length; i2++) {
                var mutableSource = mutableSources[i2];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError
              );
              container._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root2);
                  _originalCallback.call(instance);
                };
              }
              var _root2 = createContainer(
                container,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError
              );
              container._reactRootContainer = _root2;
              markContainerAsRoot(_root2.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root2, parentComponent, callback);
              });
              return _root2;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has2(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM2 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m2 = require_react_dom();
      if (false) {
        exports.createRoot = m2.createRoot;
        exports.hydrateRoot = m2.hydrateRoot;
      } else {
        i2 = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c2, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m2.createRoot(c2, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c2, h2, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m2.hydrateRoot(c2, h2, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
      }
      var i2;
    }
  });

  // node_modules/@fluentui/merge-styles/node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/@fluentui/merge-styles/node_modules/tslib/tslib.js"(exports, module) {
      var __extends10;
      var __assign11;
      var __rest10;
      var __decorate10;
      var __param10;
      var __metadata10;
      var __awaiter10;
      var __generator10;
      var __exportStar10;
      var __values11;
      var __read11;
      var __spread10;
      var __spreadArrays10;
      var __spreadArray10;
      var __await10;
      var __asyncGenerator10;
      var __asyncDelegator10;
      var __asyncValues10;
      var __makeTemplateObject10;
      var __importStar10;
      var __importDefault10;
      var __classPrivateFieldGet10;
      var __classPrivateFieldSet10;
      var __classPrivateFieldIn10;
      var __createBinding10;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root2, createExporter(module.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v2) {
            return exports2[id] = previous ? previous(id, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p2 in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p2))
              d2[p2] = b2[p2];
        };
        __extends10 = function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign11 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        __rest10 = function(s2, e2) {
          var t2 = {};
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
              t2[p2] = s2[p2];
          if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
              if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
                t2[p2[i2]] = s2[p2[i2]];
            }
          return t2;
        };
        __decorate10 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r2 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i2 = decorators.length - 1; i2 >= 0; i2--)
              if (d2 = decorators[i2])
                r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
          return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
        };
        __param10 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata10 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter10 = function(thisArg, _arguments, P2, generator) {
          function adopt(value) {
            return value instanceof P2 ? value : new P2(function(resolve) {
              resolve(value);
            });
          }
          return new (P2 || (P2 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e2) {
                reject(e2);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e2) {
                reject(e2);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator10 = function(thisArg, body) {
          var _15 = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f2, y2, t2, g2;
          return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
            return this;
          }), g2;
          function verb(n2) {
            return function(v2) {
              return step([n2, v2]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_15)
              try {
                if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                  return t2;
                if (y2 = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _15.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _15.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _15.ops.pop();
                    _15.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _15.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _15 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _15.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _15.label < t2[1]) {
                      _15.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _15.label < t2[2]) {
                      _15.label = t2[2];
                      _15.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _15.ops.pop();
                    _15.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _15);
              } catch (e2) {
                op = [6, e2];
                y2 = 0;
              } finally {
                f2 = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar10 = function(m2, o2) {
          for (var p2 in m2)
            if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o2, p2))
              __createBinding10(o2, m2, p2);
        };
        __createBinding10 = Object.create ? function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          var desc = Object.getOwnPropertyDescriptor(m2, k2);
          if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m2[k2];
            } };
          }
          Object.defineProperty(o2, k22, desc);
        } : function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          o2[k22] = m2[k2];
        };
        __values11 = function(o2) {
          var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
          if (m2)
            return m2.call(o2);
          if (o2 && typeof o2.length === "number")
            return {
              next: function() {
                if (o2 && i2 >= o2.length)
                  o2 = void 0;
                return { value: o2 && o2[i2++], done: !o2 };
              }
            };
          throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read11 = function(o2, n2) {
          var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
          if (!m2)
            return o2;
          var i2 = m2.call(o2), r2, ar2 = [], e2;
          try {
            while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
              ar2.push(r2.value);
          } catch (error) {
            e2 = { error };
          } finally {
            try {
              if (r2 && !r2.done && (m2 = i2["return"]))
                m2.call(i2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return ar2;
        };
        __spread10 = function() {
          for (var ar2 = [], i2 = 0; i2 < arguments.length; i2++)
            ar2 = ar2.concat(__read11(arguments[i2]));
          return ar2;
        };
        __spreadArrays10 = function() {
          for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
            s2 += arguments[i2].length;
          for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
            for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
              r2[k2] = a2[j2];
          return r2;
        };
        __spreadArray10 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i2 = 0, l2 = from.length, ar2; i2 < l2; i2++) {
              if (ar2 || !(i2 in from)) {
                if (!ar2)
                  ar2 = Array.prototype.slice.call(from, 0, i2);
                ar2[i2] = from[i2];
              }
            }
          return to.concat(ar2 || Array.prototype.slice.call(from));
        };
        __await10 = function(v2) {
          return this instanceof __await10 ? (this.v = v2, this) : new __await10(v2);
        };
        __asyncGenerator10 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
          return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2;
          function verb(n2) {
            if (g2[n2])
              i2[n2] = function(v2) {
                return new Promise(function(a2, b2) {
                  q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
                });
              };
          }
          function resume(n2, v2) {
            try {
              step(g2[n2](v2));
            } catch (e2) {
              settle(q2[0][3], e2);
            }
          }
          function step(r2) {
            r2.value instanceof __await10 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f2, v2) {
            if (f2(v2), q2.shift(), q2.length)
              resume(q2[0][0], q2[0][1]);
          }
        };
        __asyncDelegator10 = function(o2) {
          var i2, p2;
          return i2 = {}, verb("next"), verb("throw", function(e2) {
            throw e2;
          }), verb("return"), i2[Symbol.iterator] = function() {
            return this;
          }, i2;
          function verb(n2, f2) {
            i2[n2] = o2[n2] ? function(v2) {
              return (p2 = !p2) ? { value: __await10(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
            } : f2;
          }
        };
        __asyncValues10 = function(o2) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m2 = o2[Symbol.asyncIterator], i2;
          return m2 ? m2.call(o2) : (o2 = typeof __values11 === "function" ? __values11(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2);
          function verb(n2) {
            i2[n2] = o2[n2] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d2, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d2 });
            }, reject);
          }
        };
        __makeTemplateObject10 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o2, v2) {
          Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
        } : function(o2, v2) {
          o2["default"] = v2;
        };
        __importStar10 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k2 in mod)
              if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
                __createBinding10(result, mod, k2);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault10 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet10 = function(receiver, state, kind, f2) {
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
        };
        __classPrivateFieldSet10 = function(receiver, state, value, kind, f2) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn10 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends10);
        exporter("__assign", __assign11);
        exporter("__rest", __rest10);
        exporter("__decorate", __decorate10);
        exporter("__param", __param10);
        exporter("__metadata", __metadata10);
        exporter("__awaiter", __awaiter10);
        exporter("__generator", __generator10);
        exporter("__exportStar", __exportStar10);
        exporter("__createBinding", __createBinding10);
        exporter("__values", __values11);
        exporter("__read", __read11);
        exporter("__spread", __spread10);
        exporter("__spreadArrays", __spreadArrays10);
        exporter("__spreadArray", __spreadArray10);
        exporter("__await", __await10);
        exporter("__asyncGenerator", __asyncGenerator10);
        exporter("__asyncDelegator", __asyncDelegator10);
        exporter("__asyncValues", __asyncValues10);
        exporter("__makeTemplateObject", __makeTemplateObject10);
        exporter("__importStar", __importStar10);
        exporter("__importDefault", __importDefault10);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet10);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet10);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn10);
      });
    }
  });

  // node_modules/@fluentui/style-utilities/node_modules/tslib/tslib.js
  var require_tslib2 = __commonJS({
    "node_modules/@fluentui/style-utilities/node_modules/tslib/tslib.js"(exports, module) {
      var __extends10;
      var __assign11;
      var __rest10;
      var __decorate10;
      var __param10;
      var __metadata10;
      var __awaiter10;
      var __generator10;
      var __exportStar10;
      var __values11;
      var __read11;
      var __spread10;
      var __spreadArrays10;
      var __spreadArray10;
      var __await10;
      var __asyncGenerator10;
      var __asyncDelegator10;
      var __asyncValues10;
      var __makeTemplateObject10;
      var __importStar10;
      var __importDefault10;
      var __classPrivateFieldGet10;
      var __classPrivateFieldSet10;
      var __classPrivateFieldIn10;
      var __createBinding10;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root2, createExporter(module.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v2) {
            return exports2[id] = previous ? previous(id, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p2 in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p2))
              d2[p2] = b2[p2];
        };
        __extends10 = function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign11 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        __rest10 = function(s2, e2) {
          var t2 = {};
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
              t2[p2] = s2[p2];
          if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
              if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
                t2[p2[i2]] = s2[p2[i2]];
            }
          return t2;
        };
        __decorate10 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r2 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i2 = decorators.length - 1; i2 >= 0; i2--)
              if (d2 = decorators[i2])
                r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
          return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
        };
        __param10 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata10 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter10 = function(thisArg, _arguments, P2, generator) {
          function adopt(value) {
            return value instanceof P2 ? value : new P2(function(resolve) {
              resolve(value);
            });
          }
          return new (P2 || (P2 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e2) {
                reject(e2);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e2) {
                reject(e2);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator10 = function(thisArg, body) {
          var _15 = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f2, y2, t2, g2;
          return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
            return this;
          }), g2;
          function verb(n2) {
            return function(v2) {
              return step([n2, v2]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_15)
              try {
                if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                  return t2;
                if (y2 = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _15.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _15.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _15.ops.pop();
                    _15.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _15.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _15 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _15.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _15.label < t2[1]) {
                      _15.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _15.label < t2[2]) {
                      _15.label = t2[2];
                      _15.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _15.ops.pop();
                    _15.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _15);
              } catch (e2) {
                op = [6, e2];
                y2 = 0;
              } finally {
                f2 = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar10 = function(m2, o2) {
          for (var p2 in m2)
            if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o2, p2))
              __createBinding10(o2, m2, p2);
        };
        __createBinding10 = Object.create ? function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          var desc = Object.getOwnPropertyDescriptor(m2, k2);
          if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m2[k2];
            } };
          }
          Object.defineProperty(o2, k22, desc);
        } : function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          o2[k22] = m2[k2];
        };
        __values11 = function(o2) {
          var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
          if (m2)
            return m2.call(o2);
          if (o2 && typeof o2.length === "number")
            return {
              next: function() {
                if (o2 && i2 >= o2.length)
                  o2 = void 0;
                return { value: o2 && o2[i2++], done: !o2 };
              }
            };
          throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read11 = function(o2, n2) {
          var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
          if (!m2)
            return o2;
          var i2 = m2.call(o2), r2, ar2 = [], e2;
          try {
            while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
              ar2.push(r2.value);
          } catch (error) {
            e2 = { error };
          } finally {
            try {
              if (r2 && !r2.done && (m2 = i2["return"]))
                m2.call(i2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return ar2;
        };
        __spread10 = function() {
          for (var ar2 = [], i2 = 0; i2 < arguments.length; i2++)
            ar2 = ar2.concat(__read11(arguments[i2]));
          return ar2;
        };
        __spreadArrays10 = function() {
          for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
            s2 += arguments[i2].length;
          for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
            for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
              r2[k2] = a2[j2];
          return r2;
        };
        __spreadArray10 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i2 = 0, l2 = from.length, ar2; i2 < l2; i2++) {
              if (ar2 || !(i2 in from)) {
                if (!ar2)
                  ar2 = Array.prototype.slice.call(from, 0, i2);
                ar2[i2] = from[i2];
              }
            }
          return to.concat(ar2 || Array.prototype.slice.call(from));
        };
        __await10 = function(v2) {
          return this instanceof __await10 ? (this.v = v2, this) : new __await10(v2);
        };
        __asyncGenerator10 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
          return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2;
          function verb(n2) {
            if (g2[n2])
              i2[n2] = function(v2) {
                return new Promise(function(a2, b2) {
                  q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
                });
              };
          }
          function resume(n2, v2) {
            try {
              step(g2[n2](v2));
            } catch (e2) {
              settle(q2[0][3], e2);
            }
          }
          function step(r2) {
            r2.value instanceof __await10 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f2, v2) {
            if (f2(v2), q2.shift(), q2.length)
              resume(q2[0][0], q2[0][1]);
          }
        };
        __asyncDelegator10 = function(o2) {
          var i2, p2;
          return i2 = {}, verb("next"), verb("throw", function(e2) {
            throw e2;
          }), verb("return"), i2[Symbol.iterator] = function() {
            return this;
          }, i2;
          function verb(n2, f2) {
            i2[n2] = o2[n2] ? function(v2) {
              return (p2 = !p2) ? { value: __await10(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
            } : f2;
          }
        };
        __asyncValues10 = function(o2) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m2 = o2[Symbol.asyncIterator], i2;
          return m2 ? m2.call(o2) : (o2 = typeof __values11 === "function" ? __values11(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2);
          function verb(n2) {
            i2[n2] = o2[n2] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d2, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d2 });
            }, reject);
          }
        };
        __makeTemplateObject10 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o2, v2) {
          Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
        } : function(o2, v2) {
          o2["default"] = v2;
        };
        __importStar10 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k2 in mod)
              if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
                __createBinding10(result, mod, k2);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault10 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet10 = function(receiver, state, kind, f2) {
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
        };
        __classPrivateFieldSet10 = function(receiver, state, value, kind, f2) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn10 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends10);
        exporter("__assign", __assign11);
        exporter("__rest", __rest10);
        exporter("__decorate", __decorate10);
        exporter("__param", __param10);
        exporter("__metadata", __metadata10);
        exporter("__awaiter", __awaiter10);
        exporter("__generator", __generator10);
        exporter("__exportStar", __exportStar10);
        exporter("__createBinding", __createBinding10);
        exporter("__values", __values11);
        exporter("__read", __read11);
        exporter("__spread", __spread10);
        exporter("__spreadArrays", __spreadArrays10);
        exporter("__spreadArray", __spreadArray10);
        exporter("__await", __await10);
        exporter("__asyncGenerator", __asyncGenerator10);
        exporter("__asyncDelegator", __asyncDelegator10);
        exporter("__asyncValues", __asyncValues10);
        exporter("__makeTemplateObject", __makeTemplateObject10);
        exporter("__importStar", __importStar10);
        exporter("__importDefault", __importDefault10);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet10);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet10);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn10);
      });
    }
  });

  // node_modules/@fluentui/utilities/node_modules/tslib/tslib.js
  var require_tslib3 = __commonJS({
    "node_modules/@fluentui/utilities/node_modules/tslib/tslib.js"(exports, module) {
      var __extends10;
      var __assign11;
      var __rest10;
      var __decorate10;
      var __param10;
      var __metadata10;
      var __awaiter10;
      var __generator10;
      var __exportStar10;
      var __values11;
      var __read11;
      var __spread10;
      var __spreadArrays10;
      var __spreadArray10;
      var __await10;
      var __asyncGenerator10;
      var __asyncDelegator10;
      var __asyncValues10;
      var __makeTemplateObject10;
      var __importStar10;
      var __importDefault10;
      var __classPrivateFieldGet10;
      var __classPrivateFieldSet10;
      var __classPrivateFieldIn10;
      var __createBinding10;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root2, createExporter(module.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v2) {
            return exports2[id] = previous ? previous(id, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p2 in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p2))
              d2[p2] = b2[p2];
        };
        __extends10 = function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign11 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        __rest10 = function(s2, e2) {
          var t2 = {};
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
              t2[p2] = s2[p2];
          if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
              if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
                t2[p2[i2]] = s2[p2[i2]];
            }
          return t2;
        };
        __decorate10 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r2 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i2 = decorators.length - 1; i2 >= 0; i2--)
              if (d2 = decorators[i2])
                r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
          return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
        };
        __param10 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata10 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter10 = function(thisArg, _arguments, P2, generator) {
          function adopt(value) {
            return value instanceof P2 ? value : new P2(function(resolve) {
              resolve(value);
            });
          }
          return new (P2 || (P2 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e2) {
                reject(e2);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e2) {
                reject(e2);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator10 = function(thisArg, body) {
          var _15 = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f2, y2, t2, g2;
          return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
            return this;
          }), g2;
          function verb(n2) {
            return function(v2) {
              return step([n2, v2]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_15)
              try {
                if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                  return t2;
                if (y2 = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _15.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _15.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _15.ops.pop();
                    _15.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _15.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _15 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _15.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _15.label < t2[1]) {
                      _15.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _15.label < t2[2]) {
                      _15.label = t2[2];
                      _15.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _15.ops.pop();
                    _15.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _15);
              } catch (e2) {
                op = [6, e2];
                y2 = 0;
              } finally {
                f2 = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar10 = function(m2, o2) {
          for (var p2 in m2)
            if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o2, p2))
              __createBinding10(o2, m2, p2);
        };
        __createBinding10 = Object.create ? function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          var desc = Object.getOwnPropertyDescriptor(m2, k2);
          if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m2[k2];
            } };
          }
          Object.defineProperty(o2, k22, desc);
        } : function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          o2[k22] = m2[k2];
        };
        __values11 = function(o2) {
          var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
          if (m2)
            return m2.call(o2);
          if (o2 && typeof o2.length === "number")
            return {
              next: function() {
                if (o2 && i2 >= o2.length)
                  o2 = void 0;
                return { value: o2 && o2[i2++], done: !o2 };
              }
            };
          throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read11 = function(o2, n2) {
          var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
          if (!m2)
            return o2;
          var i2 = m2.call(o2), r2, ar2 = [], e2;
          try {
            while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
              ar2.push(r2.value);
          } catch (error) {
            e2 = { error };
          } finally {
            try {
              if (r2 && !r2.done && (m2 = i2["return"]))
                m2.call(i2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return ar2;
        };
        __spread10 = function() {
          for (var ar2 = [], i2 = 0; i2 < arguments.length; i2++)
            ar2 = ar2.concat(__read11(arguments[i2]));
          return ar2;
        };
        __spreadArrays10 = function() {
          for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
            s2 += arguments[i2].length;
          for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
            for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
              r2[k2] = a2[j2];
          return r2;
        };
        __spreadArray10 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i2 = 0, l2 = from.length, ar2; i2 < l2; i2++) {
              if (ar2 || !(i2 in from)) {
                if (!ar2)
                  ar2 = Array.prototype.slice.call(from, 0, i2);
                ar2[i2] = from[i2];
              }
            }
          return to.concat(ar2 || Array.prototype.slice.call(from));
        };
        __await10 = function(v2) {
          return this instanceof __await10 ? (this.v = v2, this) : new __await10(v2);
        };
        __asyncGenerator10 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
          return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2;
          function verb(n2) {
            if (g2[n2])
              i2[n2] = function(v2) {
                return new Promise(function(a2, b2) {
                  q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
                });
              };
          }
          function resume(n2, v2) {
            try {
              step(g2[n2](v2));
            } catch (e2) {
              settle(q2[0][3], e2);
            }
          }
          function step(r2) {
            r2.value instanceof __await10 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f2, v2) {
            if (f2(v2), q2.shift(), q2.length)
              resume(q2[0][0], q2[0][1]);
          }
        };
        __asyncDelegator10 = function(o2) {
          var i2, p2;
          return i2 = {}, verb("next"), verb("throw", function(e2) {
            throw e2;
          }), verb("return"), i2[Symbol.iterator] = function() {
            return this;
          }, i2;
          function verb(n2, f2) {
            i2[n2] = o2[n2] ? function(v2) {
              return (p2 = !p2) ? { value: __await10(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
            } : f2;
          }
        };
        __asyncValues10 = function(o2) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m2 = o2[Symbol.asyncIterator], i2;
          return m2 ? m2.call(o2) : (o2 = typeof __values11 === "function" ? __values11(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2);
          function verb(n2) {
            i2[n2] = o2[n2] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d2, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d2 });
            }, reject);
          }
        };
        __makeTemplateObject10 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o2, v2) {
          Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
        } : function(o2, v2) {
          o2["default"] = v2;
        };
        __importStar10 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k2 in mod)
              if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
                __createBinding10(result, mod, k2);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault10 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet10 = function(receiver, state, kind, f2) {
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
        };
        __classPrivateFieldSet10 = function(receiver, state, value, kind, f2) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn10 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends10);
        exporter("__assign", __assign11);
        exporter("__rest", __rest10);
        exporter("__decorate", __decorate10);
        exporter("__param", __param10);
        exporter("__metadata", __metadata10);
        exporter("__awaiter", __awaiter10);
        exporter("__generator", __generator10);
        exporter("__exportStar", __exportStar10);
        exporter("__createBinding", __createBinding10);
        exporter("__values", __values11);
        exporter("__read", __read11);
        exporter("__spread", __spread10);
        exporter("__spreadArrays", __spreadArrays10);
        exporter("__spreadArray", __spreadArray10);
        exporter("__await", __await10);
        exporter("__asyncGenerator", __asyncGenerator10);
        exporter("__asyncDelegator", __asyncDelegator10);
        exporter("__asyncValues", __asyncValues10);
        exporter("__makeTemplateObject", __makeTemplateObject10);
        exporter("__importStar", __importStar10);
        exporter("__importDefault", __importDefault10);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet10);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet10);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn10);
      });
    }
  });

  // node_modules/@fluentui/theme/node_modules/tslib/tslib.js
  var require_tslib4 = __commonJS({
    "node_modules/@fluentui/theme/node_modules/tslib/tslib.js"(exports, module) {
      var __extends10;
      var __assign11;
      var __rest10;
      var __decorate10;
      var __param10;
      var __metadata10;
      var __awaiter10;
      var __generator10;
      var __exportStar10;
      var __values11;
      var __read11;
      var __spread10;
      var __spreadArrays10;
      var __spreadArray10;
      var __await10;
      var __asyncGenerator10;
      var __asyncDelegator10;
      var __asyncValues10;
      var __makeTemplateObject10;
      var __importStar10;
      var __importDefault10;
      var __classPrivateFieldGet10;
      var __classPrivateFieldSet10;
      var __classPrivateFieldIn10;
      var __createBinding10;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root2, createExporter(module.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v2) {
            return exports2[id] = previous ? previous(id, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p2 in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p2))
              d2[p2] = b2[p2];
        };
        __extends10 = function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign11 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        __rest10 = function(s2, e2) {
          var t2 = {};
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
              t2[p2] = s2[p2];
          if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
              if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
                t2[p2[i2]] = s2[p2[i2]];
            }
          return t2;
        };
        __decorate10 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r2 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i2 = decorators.length - 1; i2 >= 0; i2--)
              if (d2 = decorators[i2])
                r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
          return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
        };
        __param10 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata10 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter10 = function(thisArg, _arguments, P2, generator) {
          function adopt(value) {
            return value instanceof P2 ? value : new P2(function(resolve) {
              resolve(value);
            });
          }
          return new (P2 || (P2 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e2) {
                reject(e2);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e2) {
                reject(e2);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator10 = function(thisArg, body) {
          var _15 = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f2, y2, t2, g2;
          return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
            return this;
          }), g2;
          function verb(n2) {
            return function(v2) {
              return step([n2, v2]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_15)
              try {
                if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                  return t2;
                if (y2 = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _15.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _15.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _15.ops.pop();
                    _15.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _15.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _15 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _15.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _15.label < t2[1]) {
                      _15.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _15.label < t2[2]) {
                      _15.label = t2[2];
                      _15.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _15.ops.pop();
                    _15.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _15);
              } catch (e2) {
                op = [6, e2];
                y2 = 0;
              } finally {
                f2 = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar10 = function(m2, o2) {
          for (var p2 in m2)
            if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o2, p2))
              __createBinding10(o2, m2, p2);
        };
        __createBinding10 = Object.create ? function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          var desc = Object.getOwnPropertyDescriptor(m2, k2);
          if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m2[k2];
            } };
          }
          Object.defineProperty(o2, k22, desc);
        } : function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          o2[k22] = m2[k2];
        };
        __values11 = function(o2) {
          var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
          if (m2)
            return m2.call(o2);
          if (o2 && typeof o2.length === "number")
            return {
              next: function() {
                if (o2 && i2 >= o2.length)
                  o2 = void 0;
                return { value: o2 && o2[i2++], done: !o2 };
              }
            };
          throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read11 = function(o2, n2) {
          var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
          if (!m2)
            return o2;
          var i2 = m2.call(o2), r2, ar2 = [], e2;
          try {
            while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
              ar2.push(r2.value);
          } catch (error) {
            e2 = { error };
          } finally {
            try {
              if (r2 && !r2.done && (m2 = i2["return"]))
                m2.call(i2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return ar2;
        };
        __spread10 = function() {
          for (var ar2 = [], i2 = 0; i2 < arguments.length; i2++)
            ar2 = ar2.concat(__read11(arguments[i2]));
          return ar2;
        };
        __spreadArrays10 = function() {
          for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
            s2 += arguments[i2].length;
          for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
            for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
              r2[k2] = a2[j2];
          return r2;
        };
        __spreadArray10 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i2 = 0, l2 = from.length, ar2; i2 < l2; i2++) {
              if (ar2 || !(i2 in from)) {
                if (!ar2)
                  ar2 = Array.prototype.slice.call(from, 0, i2);
                ar2[i2] = from[i2];
              }
            }
          return to.concat(ar2 || Array.prototype.slice.call(from));
        };
        __await10 = function(v2) {
          return this instanceof __await10 ? (this.v = v2, this) : new __await10(v2);
        };
        __asyncGenerator10 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
          return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2;
          function verb(n2) {
            if (g2[n2])
              i2[n2] = function(v2) {
                return new Promise(function(a2, b2) {
                  q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
                });
              };
          }
          function resume(n2, v2) {
            try {
              step(g2[n2](v2));
            } catch (e2) {
              settle(q2[0][3], e2);
            }
          }
          function step(r2) {
            r2.value instanceof __await10 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f2, v2) {
            if (f2(v2), q2.shift(), q2.length)
              resume(q2[0][0], q2[0][1]);
          }
        };
        __asyncDelegator10 = function(o2) {
          var i2, p2;
          return i2 = {}, verb("next"), verb("throw", function(e2) {
            throw e2;
          }), verb("return"), i2[Symbol.iterator] = function() {
            return this;
          }, i2;
          function verb(n2, f2) {
            i2[n2] = o2[n2] ? function(v2) {
              return (p2 = !p2) ? { value: __await10(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
            } : f2;
          }
        };
        __asyncValues10 = function(o2) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m2 = o2[Symbol.asyncIterator], i2;
          return m2 ? m2.call(o2) : (o2 = typeof __values11 === "function" ? __values11(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2);
          function verb(n2) {
            i2[n2] = o2[n2] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d2, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d2 });
            }, reject);
          }
        };
        __makeTemplateObject10 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o2, v2) {
          Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
        } : function(o2, v2) {
          o2["default"] = v2;
        };
        __importStar10 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k2 in mod)
              if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
                __createBinding10(result, mod, k2);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault10 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet10 = function(receiver, state, kind, f2) {
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
        };
        __classPrivateFieldSet10 = function(receiver, state, value, kind, f2) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn10 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends10);
        exporter("__assign", __assign11);
        exporter("__rest", __rest10);
        exporter("__decorate", __decorate10);
        exporter("__param", __param10);
        exporter("__metadata", __metadata10);
        exporter("__awaiter", __awaiter10);
        exporter("__generator", __generator10);
        exporter("__exportStar", __exportStar10);
        exporter("__createBinding", __createBinding10);
        exporter("__values", __values11);
        exporter("__read", __read11);
        exporter("__spread", __spread10);
        exporter("__spreadArrays", __spreadArrays10);
        exporter("__spreadArray", __spreadArray10);
        exporter("__await", __await10);
        exporter("__asyncGenerator", __asyncGenerator10);
        exporter("__asyncDelegator", __asyncDelegator10);
        exporter("__asyncValues", __asyncValues10);
        exporter("__makeTemplateObject", __makeTemplateObject10);
        exporter("__importStar", __importStar10);
        exporter("__importDefault", __importDefault10);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet10);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet10);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn10);
      });
    }
  });

  // node_modules/@fluentui/react/node_modules/tslib/tslib.js
  var require_tslib5 = __commonJS({
    "node_modules/@fluentui/react/node_modules/tslib/tslib.js"(exports, module) {
      var __extends10;
      var __assign11;
      var __rest10;
      var __decorate10;
      var __param10;
      var __metadata10;
      var __awaiter10;
      var __generator10;
      var __exportStar10;
      var __values11;
      var __read11;
      var __spread10;
      var __spreadArrays10;
      var __spreadArray10;
      var __await10;
      var __asyncGenerator10;
      var __asyncDelegator10;
      var __asyncValues10;
      var __makeTemplateObject10;
      var __importStar10;
      var __importDefault10;
      var __classPrivateFieldGet10;
      var __classPrivateFieldSet10;
      var __classPrivateFieldIn10;
      var __createBinding10;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root2, createExporter(module.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v2) {
            return exports2[id] = previous ? previous(id, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p2 in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p2))
              d2[p2] = b2[p2];
        };
        __extends10 = function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign11 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        __rest10 = function(s2, e2) {
          var t2 = {};
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
              t2[p2] = s2[p2];
          if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
              if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
                t2[p2[i2]] = s2[p2[i2]];
            }
          return t2;
        };
        __decorate10 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r2 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i2 = decorators.length - 1; i2 >= 0; i2--)
              if (d2 = decorators[i2])
                r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
          return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
        };
        __param10 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata10 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter10 = function(thisArg, _arguments, P2, generator) {
          function adopt(value) {
            return value instanceof P2 ? value : new P2(function(resolve) {
              resolve(value);
            });
          }
          return new (P2 || (P2 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e2) {
                reject(e2);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e2) {
                reject(e2);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator10 = function(thisArg, body) {
          var _15 = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f2, y2, t2, g2;
          return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
            return this;
          }), g2;
          function verb(n2) {
            return function(v2) {
              return step([n2, v2]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_15)
              try {
                if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                  return t2;
                if (y2 = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _15.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _15.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _15.ops.pop();
                    _15.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _15.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _15 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _15.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _15.label < t2[1]) {
                      _15.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _15.label < t2[2]) {
                      _15.label = t2[2];
                      _15.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _15.ops.pop();
                    _15.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _15);
              } catch (e2) {
                op = [6, e2];
                y2 = 0;
              } finally {
                f2 = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar10 = function(m2, o2) {
          for (var p2 in m2)
            if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o2, p2))
              __createBinding10(o2, m2, p2);
        };
        __createBinding10 = Object.create ? function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          var desc = Object.getOwnPropertyDescriptor(m2, k2);
          if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m2[k2];
            } };
          }
          Object.defineProperty(o2, k22, desc);
        } : function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          o2[k22] = m2[k2];
        };
        __values11 = function(o2) {
          var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
          if (m2)
            return m2.call(o2);
          if (o2 && typeof o2.length === "number")
            return {
              next: function() {
                if (o2 && i2 >= o2.length)
                  o2 = void 0;
                return { value: o2 && o2[i2++], done: !o2 };
              }
            };
          throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read11 = function(o2, n2) {
          var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
          if (!m2)
            return o2;
          var i2 = m2.call(o2), r2, ar2 = [], e2;
          try {
            while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
              ar2.push(r2.value);
          } catch (error) {
            e2 = { error };
          } finally {
            try {
              if (r2 && !r2.done && (m2 = i2["return"]))
                m2.call(i2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return ar2;
        };
        __spread10 = function() {
          for (var ar2 = [], i2 = 0; i2 < arguments.length; i2++)
            ar2 = ar2.concat(__read11(arguments[i2]));
          return ar2;
        };
        __spreadArrays10 = function() {
          for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
            s2 += arguments[i2].length;
          for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
            for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
              r2[k2] = a2[j2];
          return r2;
        };
        __spreadArray10 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i2 = 0, l2 = from.length, ar2; i2 < l2; i2++) {
              if (ar2 || !(i2 in from)) {
                if (!ar2)
                  ar2 = Array.prototype.slice.call(from, 0, i2);
                ar2[i2] = from[i2];
              }
            }
          return to.concat(ar2 || Array.prototype.slice.call(from));
        };
        __await10 = function(v2) {
          return this instanceof __await10 ? (this.v = v2, this) : new __await10(v2);
        };
        __asyncGenerator10 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
          return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2;
          function verb(n2) {
            if (g2[n2])
              i2[n2] = function(v2) {
                return new Promise(function(a2, b2) {
                  q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
                });
              };
          }
          function resume(n2, v2) {
            try {
              step(g2[n2](v2));
            } catch (e2) {
              settle(q2[0][3], e2);
            }
          }
          function step(r2) {
            r2.value instanceof __await10 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f2, v2) {
            if (f2(v2), q2.shift(), q2.length)
              resume(q2[0][0], q2[0][1]);
          }
        };
        __asyncDelegator10 = function(o2) {
          var i2, p2;
          return i2 = {}, verb("next"), verb("throw", function(e2) {
            throw e2;
          }), verb("return"), i2[Symbol.iterator] = function() {
            return this;
          }, i2;
          function verb(n2, f2) {
            i2[n2] = o2[n2] ? function(v2) {
              return (p2 = !p2) ? { value: __await10(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
            } : f2;
          }
        };
        __asyncValues10 = function(o2) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m2 = o2[Symbol.asyncIterator], i2;
          return m2 ? m2.call(o2) : (o2 = typeof __values11 === "function" ? __values11(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2);
          function verb(n2) {
            i2[n2] = o2[n2] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d2, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d2 });
            }, reject);
          }
        };
        __makeTemplateObject10 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o2, v2) {
          Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
        } : function(o2, v2) {
          o2["default"] = v2;
        };
        __importStar10 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k2 in mod)
              if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
                __createBinding10(result, mod, k2);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault10 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet10 = function(receiver, state, kind, f2) {
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
        };
        __classPrivateFieldSet10 = function(receiver, state, value, kind, f2) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn10 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends10);
        exporter("__assign", __assign11);
        exporter("__rest", __rest10);
        exporter("__decorate", __decorate10);
        exporter("__param", __param10);
        exporter("__metadata", __metadata10);
        exporter("__awaiter", __awaiter10);
        exporter("__generator", __generator10);
        exporter("__exportStar", __exportStar10);
        exporter("__createBinding", __createBinding10);
        exporter("__values", __values11);
        exporter("__read", __read11);
        exporter("__spread", __spread10);
        exporter("__spreadArrays", __spreadArrays10);
        exporter("__spreadArray", __spreadArray10);
        exporter("__await", __await10);
        exporter("__asyncGenerator", __asyncGenerator10);
        exporter("__asyncDelegator", __asyncDelegator10);
        exporter("__asyncValues", __asyncValues10);
        exporter("__makeTemplateObject", __makeTemplateObject10);
        exporter("__importStar", __importStar10);
        exporter("__importDefault", __importDefault10);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet10);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet10);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn10);
      });
    }
  });

  // node_modules/@fluentui/react-hooks/node_modules/tslib/tslib.js
  var require_tslib6 = __commonJS({
    "node_modules/@fluentui/react-hooks/node_modules/tslib/tslib.js"(exports, module) {
      var __extends10;
      var __assign11;
      var __rest10;
      var __decorate10;
      var __param10;
      var __metadata10;
      var __awaiter10;
      var __generator10;
      var __exportStar10;
      var __values11;
      var __read11;
      var __spread10;
      var __spreadArrays10;
      var __spreadArray10;
      var __await10;
      var __asyncGenerator10;
      var __asyncDelegator10;
      var __asyncValues10;
      var __makeTemplateObject10;
      var __importStar10;
      var __importDefault10;
      var __classPrivateFieldGet10;
      var __classPrivateFieldSet10;
      var __classPrivateFieldIn10;
      var __createBinding10;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root2, createExporter(module.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v2) {
            return exports2[id] = previous ? previous(id, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p2 in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p2))
              d2[p2] = b2[p2];
        };
        __extends10 = function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign11 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        __rest10 = function(s2, e2) {
          var t2 = {};
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
              t2[p2] = s2[p2];
          if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
              if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
                t2[p2[i2]] = s2[p2[i2]];
            }
          return t2;
        };
        __decorate10 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r2 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i2 = decorators.length - 1; i2 >= 0; i2--)
              if (d2 = decorators[i2])
                r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
          return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
        };
        __param10 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata10 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter10 = function(thisArg, _arguments, P2, generator) {
          function adopt(value) {
            return value instanceof P2 ? value : new P2(function(resolve) {
              resolve(value);
            });
          }
          return new (P2 || (P2 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e2) {
                reject(e2);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e2) {
                reject(e2);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator10 = function(thisArg, body) {
          var _15 = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f2, y2, t2, g2;
          return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
            return this;
          }), g2;
          function verb(n2) {
            return function(v2) {
              return step([n2, v2]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_15)
              try {
                if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                  return t2;
                if (y2 = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _15.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _15.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _15.ops.pop();
                    _15.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _15.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _15 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _15.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _15.label < t2[1]) {
                      _15.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _15.label < t2[2]) {
                      _15.label = t2[2];
                      _15.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _15.ops.pop();
                    _15.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _15);
              } catch (e2) {
                op = [6, e2];
                y2 = 0;
              } finally {
                f2 = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar10 = function(m2, o2) {
          for (var p2 in m2)
            if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o2, p2))
              __createBinding10(o2, m2, p2);
        };
        __createBinding10 = Object.create ? function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          var desc = Object.getOwnPropertyDescriptor(m2, k2);
          if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m2[k2];
            } };
          }
          Object.defineProperty(o2, k22, desc);
        } : function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          o2[k22] = m2[k2];
        };
        __values11 = function(o2) {
          var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
          if (m2)
            return m2.call(o2);
          if (o2 && typeof o2.length === "number")
            return {
              next: function() {
                if (o2 && i2 >= o2.length)
                  o2 = void 0;
                return { value: o2 && o2[i2++], done: !o2 };
              }
            };
          throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read11 = function(o2, n2) {
          var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
          if (!m2)
            return o2;
          var i2 = m2.call(o2), r2, ar2 = [], e2;
          try {
            while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
              ar2.push(r2.value);
          } catch (error) {
            e2 = { error };
          } finally {
            try {
              if (r2 && !r2.done && (m2 = i2["return"]))
                m2.call(i2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return ar2;
        };
        __spread10 = function() {
          for (var ar2 = [], i2 = 0; i2 < arguments.length; i2++)
            ar2 = ar2.concat(__read11(arguments[i2]));
          return ar2;
        };
        __spreadArrays10 = function() {
          for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
            s2 += arguments[i2].length;
          for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
            for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
              r2[k2] = a2[j2];
          return r2;
        };
        __spreadArray10 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i2 = 0, l2 = from.length, ar2; i2 < l2; i2++) {
              if (ar2 || !(i2 in from)) {
                if (!ar2)
                  ar2 = Array.prototype.slice.call(from, 0, i2);
                ar2[i2] = from[i2];
              }
            }
          return to.concat(ar2 || Array.prototype.slice.call(from));
        };
        __await10 = function(v2) {
          return this instanceof __await10 ? (this.v = v2, this) : new __await10(v2);
        };
        __asyncGenerator10 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
          return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2;
          function verb(n2) {
            if (g2[n2])
              i2[n2] = function(v2) {
                return new Promise(function(a2, b2) {
                  q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
                });
              };
          }
          function resume(n2, v2) {
            try {
              step(g2[n2](v2));
            } catch (e2) {
              settle(q2[0][3], e2);
            }
          }
          function step(r2) {
            r2.value instanceof __await10 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f2, v2) {
            if (f2(v2), q2.shift(), q2.length)
              resume(q2[0][0], q2[0][1]);
          }
        };
        __asyncDelegator10 = function(o2) {
          var i2, p2;
          return i2 = {}, verb("next"), verb("throw", function(e2) {
            throw e2;
          }), verb("return"), i2[Symbol.iterator] = function() {
            return this;
          }, i2;
          function verb(n2, f2) {
            i2[n2] = o2[n2] ? function(v2) {
              return (p2 = !p2) ? { value: __await10(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
            } : f2;
          }
        };
        __asyncValues10 = function(o2) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m2 = o2[Symbol.asyncIterator], i2;
          return m2 ? m2.call(o2) : (o2 = typeof __values11 === "function" ? __values11(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2);
          function verb(n2) {
            i2[n2] = o2[n2] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d2, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d2 });
            }, reject);
          }
        };
        __makeTemplateObject10 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o2, v2) {
          Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
        } : function(o2, v2) {
          o2["default"] = v2;
        };
        __importStar10 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k2 in mod)
              if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
                __createBinding10(result, mod, k2);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault10 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet10 = function(receiver, state, kind, f2) {
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
        };
        __classPrivateFieldSet10 = function(receiver, state, value, kind, f2) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn10 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends10);
        exporter("__assign", __assign11);
        exporter("__rest", __rest10);
        exporter("__decorate", __decorate10);
        exporter("__param", __param10);
        exporter("__metadata", __metadata10);
        exporter("__awaiter", __awaiter10);
        exporter("__generator", __generator10);
        exporter("__exportStar", __exportStar10);
        exporter("__createBinding", __createBinding10);
        exporter("__values", __values11);
        exporter("__read", __read11);
        exporter("__spread", __spread10);
        exporter("__spreadArrays", __spreadArrays10);
        exporter("__spreadArray", __spreadArray10);
        exporter("__await", __await10);
        exporter("__asyncGenerator", __asyncGenerator10);
        exporter("__asyncDelegator", __asyncDelegator10);
        exporter("__asyncValues", __asyncValues10);
        exporter("__makeTemplateObject", __makeTemplateObject10);
        exporter("__importStar", __importStar10);
        exporter("__importDefault", __importDefault10);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet10);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet10);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn10);
      });
    }
  });

  // node_modules/@fluentui/react-focus/node_modules/tslib/tslib.js
  var require_tslib7 = __commonJS({
    "node_modules/@fluentui/react-focus/node_modules/tslib/tslib.js"(exports, module) {
      var __extends10;
      var __assign11;
      var __rest10;
      var __decorate10;
      var __param10;
      var __metadata10;
      var __awaiter10;
      var __generator10;
      var __exportStar10;
      var __values11;
      var __read11;
      var __spread10;
      var __spreadArrays10;
      var __spreadArray10;
      var __await10;
      var __asyncGenerator10;
      var __asyncDelegator10;
      var __asyncValues10;
      var __makeTemplateObject10;
      var __importStar10;
      var __importDefault10;
      var __classPrivateFieldGet10;
      var __classPrivateFieldSet10;
      var __classPrivateFieldIn10;
      var __createBinding10;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root2, createExporter(module.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v2) {
            return exports2[id] = previous ? previous(id, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p2 in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p2))
              d2[p2] = b2[p2];
        };
        __extends10 = function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign11 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        __rest10 = function(s2, e2) {
          var t2 = {};
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
              t2[p2] = s2[p2];
          if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
              if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
                t2[p2[i2]] = s2[p2[i2]];
            }
          return t2;
        };
        __decorate10 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r2 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i2 = decorators.length - 1; i2 >= 0; i2--)
              if (d2 = decorators[i2])
                r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
          return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
        };
        __param10 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata10 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter10 = function(thisArg, _arguments, P2, generator) {
          function adopt(value) {
            return value instanceof P2 ? value : new P2(function(resolve) {
              resolve(value);
            });
          }
          return new (P2 || (P2 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e2) {
                reject(e2);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e2) {
                reject(e2);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator10 = function(thisArg, body) {
          var _15 = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f2, y2, t2, g2;
          return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
            return this;
          }), g2;
          function verb(n2) {
            return function(v2) {
              return step([n2, v2]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_15)
              try {
                if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                  return t2;
                if (y2 = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _15.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _15.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _15.ops.pop();
                    _15.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _15.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _15 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _15.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _15.label < t2[1]) {
                      _15.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _15.label < t2[2]) {
                      _15.label = t2[2];
                      _15.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _15.ops.pop();
                    _15.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _15);
              } catch (e2) {
                op = [6, e2];
                y2 = 0;
              } finally {
                f2 = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar10 = function(m2, o2) {
          for (var p2 in m2)
            if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o2, p2))
              __createBinding10(o2, m2, p2);
        };
        __createBinding10 = Object.create ? function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          var desc = Object.getOwnPropertyDescriptor(m2, k2);
          if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m2[k2];
            } };
          }
          Object.defineProperty(o2, k22, desc);
        } : function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          o2[k22] = m2[k2];
        };
        __values11 = function(o2) {
          var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
          if (m2)
            return m2.call(o2);
          if (o2 && typeof o2.length === "number")
            return {
              next: function() {
                if (o2 && i2 >= o2.length)
                  o2 = void 0;
                return { value: o2 && o2[i2++], done: !o2 };
              }
            };
          throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read11 = function(o2, n2) {
          var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
          if (!m2)
            return o2;
          var i2 = m2.call(o2), r2, ar2 = [], e2;
          try {
            while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
              ar2.push(r2.value);
          } catch (error) {
            e2 = { error };
          } finally {
            try {
              if (r2 && !r2.done && (m2 = i2["return"]))
                m2.call(i2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return ar2;
        };
        __spread10 = function() {
          for (var ar2 = [], i2 = 0; i2 < arguments.length; i2++)
            ar2 = ar2.concat(__read11(arguments[i2]));
          return ar2;
        };
        __spreadArrays10 = function() {
          for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
            s2 += arguments[i2].length;
          for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
            for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
              r2[k2] = a2[j2];
          return r2;
        };
        __spreadArray10 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i2 = 0, l2 = from.length, ar2; i2 < l2; i2++) {
              if (ar2 || !(i2 in from)) {
                if (!ar2)
                  ar2 = Array.prototype.slice.call(from, 0, i2);
                ar2[i2] = from[i2];
              }
            }
          return to.concat(ar2 || Array.prototype.slice.call(from));
        };
        __await10 = function(v2) {
          return this instanceof __await10 ? (this.v = v2, this) : new __await10(v2);
        };
        __asyncGenerator10 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
          return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2;
          function verb(n2) {
            if (g2[n2])
              i2[n2] = function(v2) {
                return new Promise(function(a2, b2) {
                  q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
                });
              };
          }
          function resume(n2, v2) {
            try {
              step(g2[n2](v2));
            } catch (e2) {
              settle(q2[0][3], e2);
            }
          }
          function step(r2) {
            r2.value instanceof __await10 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f2, v2) {
            if (f2(v2), q2.shift(), q2.length)
              resume(q2[0][0], q2[0][1]);
          }
        };
        __asyncDelegator10 = function(o2) {
          var i2, p2;
          return i2 = {}, verb("next"), verb("throw", function(e2) {
            throw e2;
          }), verb("return"), i2[Symbol.iterator] = function() {
            return this;
          }, i2;
          function verb(n2, f2) {
            i2[n2] = o2[n2] ? function(v2) {
              return (p2 = !p2) ? { value: __await10(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
            } : f2;
          }
        };
        __asyncValues10 = function(o2) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m2 = o2[Symbol.asyncIterator], i2;
          return m2 ? m2.call(o2) : (o2 = typeof __values11 === "function" ? __values11(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2);
          function verb(n2) {
            i2[n2] = o2[n2] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d2, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d2 });
            }, reject);
          }
        };
        __makeTemplateObject10 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o2, v2) {
          Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
        } : function(o2, v2) {
          o2["default"] = v2;
        };
        __importStar10 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k2 in mod)
              if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
                __createBinding10(result, mod, k2);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault10 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet10 = function(receiver, state, kind, f2) {
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
        };
        __classPrivateFieldSet10 = function(receiver, state, value, kind, f2) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn10 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends10);
        exporter("__assign", __assign11);
        exporter("__rest", __rest10);
        exporter("__decorate", __decorate10);
        exporter("__param", __param10);
        exporter("__metadata", __metadata10);
        exporter("__awaiter", __awaiter10);
        exporter("__generator", __generator10);
        exporter("__exportStar", __exportStar10);
        exporter("__createBinding", __createBinding10);
        exporter("__values", __values11);
        exporter("__read", __read11);
        exporter("__spread", __spread10);
        exporter("__spreadArrays", __spreadArrays10);
        exporter("__spreadArray", __spreadArray10);
        exporter("__await", __await10);
        exporter("__asyncGenerator", __asyncGenerator10);
        exporter("__asyncDelegator", __asyncDelegator10);
        exporter("__asyncValues", __asyncValues10);
        exporter("__makeTemplateObject", __makeTemplateObject10);
        exporter("__importStar", __importStar10);
        exporter("__importDefault", __importDefault10);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet10);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet10);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn10);
      });
    }
  });

  // node_modules/@fluentui/foundation-legacy/node_modules/tslib/tslib.js
  var require_tslib8 = __commonJS({
    "node_modules/@fluentui/foundation-legacy/node_modules/tslib/tslib.js"(exports, module) {
      var __extends10;
      var __assign11;
      var __rest10;
      var __decorate10;
      var __param10;
      var __metadata10;
      var __awaiter10;
      var __generator10;
      var __exportStar10;
      var __values11;
      var __read11;
      var __spread10;
      var __spreadArrays10;
      var __spreadArray10;
      var __await10;
      var __asyncGenerator10;
      var __asyncDelegator10;
      var __asyncValues10;
      var __makeTemplateObject10;
      var __importStar10;
      var __importDefault10;
      var __classPrivateFieldGet10;
      var __classPrivateFieldSet10;
      var __classPrivateFieldIn10;
      var __createBinding10;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root2, createExporter(module.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v2) {
            return exports2[id] = previous ? previous(id, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p2 in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p2))
              d2[p2] = b2[p2];
        };
        __extends10 = function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign11 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        __rest10 = function(s2, e2) {
          var t2 = {};
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
              t2[p2] = s2[p2];
          if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
              if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
                t2[p2[i2]] = s2[p2[i2]];
            }
          return t2;
        };
        __decorate10 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r2 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i2 = decorators.length - 1; i2 >= 0; i2--)
              if (d2 = decorators[i2])
                r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
          return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
        };
        __param10 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata10 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter10 = function(thisArg, _arguments, P2, generator) {
          function adopt(value) {
            return value instanceof P2 ? value : new P2(function(resolve) {
              resolve(value);
            });
          }
          return new (P2 || (P2 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e2) {
                reject(e2);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e2) {
                reject(e2);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator10 = function(thisArg, body) {
          var _15 = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f2, y2, t2, g2;
          return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
            return this;
          }), g2;
          function verb(n2) {
            return function(v2) {
              return step([n2, v2]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_15)
              try {
                if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                  return t2;
                if (y2 = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _15.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _15.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _15.ops.pop();
                    _15.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _15.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _15 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _15.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _15.label < t2[1]) {
                      _15.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _15.label < t2[2]) {
                      _15.label = t2[2];
                      _15.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _15.ops.pop();
                    _15.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _15);
              } catch (e2) {
                op = [6, e2];
                y2 = 0;
              } finally {
                f2 = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar10 = function(m2, o2) {
          for (var p2 in m2)
            if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o2, p2))
              __createBinding10(o2, m2, p2);
        };
        __createBinding10 = Object.create ? function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          var desc = Object.getOwnPropertyDescriptor(m2, k2);
          if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m2[k2];
            } };
          }
          Object.defineProperty(o2, k22, desc);
        } : function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          o2[k22] = m2[k2];
        };
        __values11 = function(o2) {
          var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
          if (m2)
            return m2.call(o2);
          if (o2 && typeof o2.length === "number")
            return {
              next: function() {
                if (o2 && i2 >= o2.length)
                  o2 = void 0;
                return { value: o2 && o2[i2++], done: !o2 };
              }
            };
          throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read11 = function(o2, n2) {
          var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
          if (!m2)
            return o2;
          var i2 = m2.call(o2), r2, ar2 = [], e2;
          try {
            while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
              ar2.push(r2.value);
          } catch (error) {
            e2 = { error };
          } finally {
            try {
              if (r2 && !r2.done && (m2 = i2["return"]))
                m2.call(i2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return ar2;
        };
        __spread10 = function() {
          for (var ar2 = [], i2 = 0; i2 < arguments.length; i2++)
            ar2 = ar2.concat(__read11(arguments[i2]));
          return ar2;
        };
        __spreadArrays10 = function() {
          for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
            s2 += arguments[i2].length;
          for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
            for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
              r2[k2] = a2[j2];
          return r2;
        };
        __spreadArray10 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i2 = 0, l2 = from.length, ar2; i2 < l2; i2++) {
              if (ar2 || !(i2 in from)) {
                if (!ar2)
                  ar2 = Array.prototype.slice.call(from, 0, i2);
                ar2[i2] = from[i2];
              }
            }
          return to.concat(ar2 || Array.prototype.slice.call(from));
        };
        __await10 = function(v2) {
          return this instanceof __await10 ? (this.v = v2, this) : new __await10(v2);
        };
        __asyncGenerator10 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
          return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2;
          function verb(n2) {
            if (g2[n2])
              i2[n2] = function(v2) {
                return new Promise(function(a2, b2) {
                  q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
                });
              };
          }
          function resume(n2, v2) {
            try {
              step(g2[n2](v2));
            } catch (e2) {
              settle(q2[0][3], e2);
            }
          }
          function step(r2) {
            r2.value instanceof __await10 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f2, v2) {
            if (f2(v2), q2.shift(), q2.length)
              resume(q2[0][0], q2[0][1]);
          }
        };
        __asyncDelegator10 = function(o2) {
          var i2, p2;
          return i2 = {}, verb("next"), verb("throw", function(e2) {
            throw e2;
          }), verb("return"), i2[Symbol.iterator] = function() {
            return this;
          }, i2;
          function verb(n2, f2) {
            i2[n2] = o2[n2] ? function(v2) {
              return (p2 = !p2) ? { value: __await10(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
            } : f2;
          }
        };
        __asyncValues10 = function(o2) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m2 = o2[Symbol.asyncIterator], i2;
          return m2 ? m2.call(o2) : (o2 = typeof __values11 === "function" ? __values11(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2);
          function verb(n2) {
            i2[n2] = o2[n2] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d2, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d2 });
            }, reject);
          }
        };
        __makeTemplateObject10 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o2, v2) {
          Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
        } : function(o2, v2) {
          o2["default"] = v2;
        };
        __importStar10 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k2 in mod)
              if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
                __createBinding10(result, mod, k2);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault10 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet10 = function(receiver, state, kind, f2) {
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
        };
        __classPrivateFieldSet10 = function(receiver, state, value, kind, f2) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn10 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends10);
        exporter("__assign", __assign11);
        exporter("__rest", __rest10);
        exporter("__decorate", __decorate10);
        exporter("__param", __param10);
        exporter("__metadata", __metadata10);
        exporter("__awaiter", __awaiter10);
        exporter("__generator", __generator10);
        exporter("__exportStar", __exportStar10);
        exporter("__createBinding", __createBinding10);
        exporter("__values", __values11);
        exporter("__read", __read11);
        exporter("__spread", __spread10);
        exporter("__spreadArrays", __spreadArrays10);
        exporter("__spreadArray", __spreadArray10);
        exporter("__await", __await10);
        exporter("__asyncGenerator", __asyncGenerator10);
        exporter("__asyncDelegator", __asyncDelegator10);
        exporter("__asyncValues", __asyncValues10);
        exporter("__makeTemplateObject", __makeTemplateObject10);
        exporter("__importStar", __importStar10);
        exporter("__importDefault", __importDefault10);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet10);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet10);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn10);
      });
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React64 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React64.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign4 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign4({}, props, {
                    value: prevLog
                  }),
                  info: assign4({}, props, {
                    value: prevInfo
                  }),
                  warn: assign4({}, props, {
                    value: prevWarn
                  }),
                  error: assign4({}, props, {
                    value: prevError
                  }),
                  group: assign4({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign4({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign4({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component13) {
            var prototype = Component13.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement3(object2) {
            {
              return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray(node)) {
                for (var i2 = 0; i2 < node.length; i2++) {
                  var child = node[i2];
                  if (isValidElement3(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement3(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement3(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key = keys[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i2 = 0; i2 < children.length; i2++) {
                        validateChildKeys(children[i2], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx6 = jsxWithValidationDynamic;
          var jsxs3 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx6;
          exports.jsxs = jsxs3;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/@fluentui/react-icons/node_modules/tslib/tslib.js
  var require_tslib9 = __commonJS({
    "node_modules/@fluentui/react-icons/node_modules/tslib/tslib.js"(exports, module) {
      var __extends10;
      var __assign11;
      var __rest10;
      var __decorate10;
      var __param10;
      var __metadata10;
      var __awaiter10;
      var __generator10;
      var __exportStar10;
      var __values11;
      var __read11;
      var __spread10;
      var __spreadArrays10;
      var __spreadArray10;
      var __await10;
      var __asyncGenerator10;
      var __asyncDelegator10;
      var __asyncValues10;
      var __makeTemplateObject10;
      var __importStar10;
      var __importDefault10;
      var __classPrivateFieldGet10;
      var __classPrivateFieldSet10;
      var __classPrivateFieldIn10;
      var __createBinding10;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root2, createExporter(module.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v2) {
            return exports2[id] = previous ? previous(id, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p2 in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p2))
              d2[p2] = b2[p2];
        };
        __extends10 = function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign11 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        __rest10 = function(s2, e2) {
          var t2 = {};
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
              t2[p2] = s2[p2];
          if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
              if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
                t2[p2[i2]] = s2[p2[i2]];
            }
          return t2;
        };
        __decorate10 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r2 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i2 = decorators.length - 1; i2 >= 0; i2--)
              if (d2 = decorators[i2])
                r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
          return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
        };
        __param10 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata10 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter10 = function(thisArg, _arguments, P2, generator) {
          function adopt(value) {
            return value instanceof P2 ? value : new P2(function(resolve) {
              resolve(value);
            });
          }
          return new (P2 || (P2 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e2) {
                reject(e2);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e2) {
                reject(e2);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator10 = function(thisArg, body) {
          var _15 = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f2, y2, t2, g2;
          return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
            return this;
          }), g2;
          function verb(n2) {
            return function(v2) {
              return step([n2, v2]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_15)
              try {
                if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                  return t2;
                if (y2 = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _15.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _15.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _15.ops.pop();
                    _15.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _15.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _15 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _15.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _15.label < t2[1]) {
                      _15.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _15.label < t2[2]) {
                      _15.label = t2[2];
                      _15.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _15.ops.pop();
                    _15.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _15);
              } catch (e2) {
                op = [6, e2];
                y2 = 0;
              } finally {
                f2 = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar10 = function(m2, o2) {
          for (var p2 in m2)
            if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o2, p2))
              __createBinding10(o2, m2, p2);
        };
        __createBinding10 = Object.create ? function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          var desc = Object.getOwnPropertyDescriptor(m2, k2);
          if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m2[k2];
            } };
          }
          Object.defineProperty(o2, k22, desc);
        } : function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          o2[k22] = m2[k2];
        };
        __values11 = function(o2) {
          var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
          if (m2)
            return m2.call(o2);
          if (o2 && typeof o2.length === "number")
            return {
              next: function() {
                if (o2 && i2 >= o2.length)
                  o2 = void 0;
                return { value: o2 && o2[i2++], done: !o2 };
              }
            };
          throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read11 = function(o2, n2) {
          var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
          if (!m2)
            return o2;
          var i2 = m2.call(o2), r2, ar2 = [], e2;
          try {
            while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
              ar2.push(r2.value);
          } catch (error) {
            e2 = { error };
          } finally {
            try {
              if (r2 && !r2.done && (m2 = i2["return"]))
                m2.call(i2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return ar2;
        };
        __spread10 = function() {
          for (var ar2 = [], i2 = 0; i2 < arguments.length; i2++)
            ar2 = ar2.concat(__read11(arguments[i2]));
          return ar2;
        };
        __spreadArrays10 = function() {
          for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
            s2 += arguments[i2].length;
          for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
            for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
              r2[k2] = a2[j2];
          return r2;
        };
        __spreadArray10 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i2 = 0, l2 = from.length, ar2; i2 < l2; i2++) {
              if (ar2 || !(i2 in from)) {
                if (!ar2)
                  ar2 = Array.prototype.slice.call(from, 0, i2);
                ar2[i2] = from[i2];
              }
            }
          return to.concat(ar2 || Array.prototype.slice.call(from));
        };
        __await10 = function(v2) {
          return this instanceof __await10 ? (this.v = v2, this) : new __await10(v2);
        };
        __asyncGenerator10 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
          return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2;
          function verb(n2) {
            if (g2[n2])
              i2[n2] = function(v2) {
                return new Promise(function(a2, b2) {
                  q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
                });
              };
          }
          function resume(n2, v2) {
            try {
              step(g2[n2](v2));
            } catch (e2) {
              settle(q2[0][3], e2);
            }
          }
          function step(r2) {
            r2.value instanceof __await10 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f2, v2) {
            if (f2(v2), q2.shift(), q2.length)
              resume(q2[0][0], q2[0][1]);
          }
        };
        __asyncDelegator10 = function(o2) {
          var i2, p2;
          return i2 = {}, verb("next"), verb("throw", function(e2) {
            throw e2;
          }), verb("return"), i2[Symbol.iterator] = function() {
            return this;
          }, i2;
          function verb(n2, f2) {
            i2[n2] = o2[n2] ? function(v2) {
              return (p2 = !p2) ? { value: __await10(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
            } : f2;
          }
        };
        __asyncValues10 = function(o2) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m2 = o2[Symbol.asyncIterator], i2;
          return m2 ? m2.call(o2) : (o2 = typeof __values11 === "function" ? __values11(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
            return this;
          }, i2);
          function verb(n2) {
            i2[n2] = o2[n2] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d2, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d2 });
            }, reject);
          }
        };
        __makeTemplateObject10 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o2, v2) {
          Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
        } : function(o2, v2) {
          o2["default"] = v2;
        };
        __importStar10 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k2 in mod)
              if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
                __createBinding10(result, mod, k2);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault10 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet10 = function(receiver, state, kind, f2) {
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
        };
        __classPrivateFieldSet10 = function(receiver, state, value, kind, f2) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f2)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn10 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends10);
        exporter("__assign", __assign11);
        exporter("__rest", __rest10);
        exporter("__decorate", __decorate10);
        exporter("__param", __param10);
        exporter("__metadata", __metadata10);
        exporter("__awaiter", __awaiter10);
        exporter("__generator", __generator10);
        exporter("__exportStar", __exportStar10);
        exporter("__createBinding", __createBinding10);
        exporter("__values", __values11);
        exporter("__read", __read11);
        exporter("__spread", __spread10);
        exporter("__spreadArrays", __spreadArrays10);
        exporter("__spreadArray", __spreadArray10);
        exporter("__await", __await10);
        exporter("__asyncGenerator", __asyncGenerator10);
        exporter("__asyncDelegator", __asyncDelegator10);
        exporter("__asyncValues", __asyncValues10);
        exporter("__makeTemplateObject", __makeTemplateObject10);
        exporter("__importStar", __importStar10);
        exporter("__importDefault", __importDefault10);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet10);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet10);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn10);
      });
    }
  });

  // src/index.tsx
  var import_react15 = __toESM(require_react(), 1);
  var import_client = __toESM(require_client(), 1);

  // node_modules/@yume-chan/async/esm/promise-resolver.js
  var PromiseResolver = function() {
    function PromiseResolver2() {
      var _this = this;
      this._state = "running";
      this.resolve = function(value) {
        _this._resolve(value);
        _this._state = "resolved";
      };
      this.reject = function(reason) {
        _this._reject(reason);
        _this._state = "rejected";
      };
      this._promise = new Promise(function(resolve, reject) {
        _this._resolve = resolve;
        _this._reject = reject;
      });
    }
    Object.defineProperty(PromiseResolver2.prototype, "promise", {
      get: function() {
        return this._promise;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(PromiseResolver2.prototype, "state", {
      get: function() {
        return this._state;
      },
      enumerable: false,
      configurable: true
    });
    return PromiseResolver2;
  }();

  // node_modules/@yume-chan/async/esm/async-operation-manager.js
  var AsyncOperationManager = function() {
    function AsyncOperationManager2(startId) {
      if (startId === void 0) {
        startId = 0;
      }
      this.pendingResolvers = /* @__PURE__ */ new Map();
      this.nextId = startId;
    }
    AsyncOperationManager2.prototype.add = function() {
      var id = this.nextId++;
      var resolver = new PromiseResolver();
      this.pendingResolvers.set(id, resolver);
      return [id, resolver.promise];
    };
    AsyncOperationManager2.prototype.getResolver = function(id) {
      if (!this.pendingResolvers.has(id)) {
        return null;
      }
      var resolver = this.pendingResolvers.get(id);
      this.pendingResolvers.delete(id);
      return resolver;
    };
    AsyncOperationManager2.prototype.resolve = function(id, result) {
      var resolver = this.getResolver(id);
      if (resolver !== null) {
        resolver.resolve(result);
        return true;
      }
      return false;
    };
    AsyncOperationManager2.prototype.reject = function(id, reason) {
      var resolver = this.getResolver(id);
      if (resolver !== null) {
        resolver.reject(reason);
        return true;
      }
      return false;
    };
    return AsyncOperationManager2;
  }();

  // node_modules/web-streams-polyfill/dist/ponyfill.mjs
  var e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? Symbol : (e2) => `Symbol(${e2})`;
  function t() {
  }
  function r(e2) {
    return "object" == typeof e2 && null !== e2 || "function" == typeof e2;
  }
  var o = t;
  function n(e2, t2) {
    try {
      Object.defineProperty(e2, "name", { value: t2, configurable: true });
    } catch (e3) {
    }
  }
  var a = Promise;
  var i = Promise.prototype.then;
  var l = Promise.resolve.bind(a);
  var s = Promise.reject.bind(a);
  function u(e2) {
    return new a(e2);
  }
  function c(e2) {
    return l(e2);
  }
  function d(e2) {
    return s(e2);
  }
  function f(e2, t2, r2) {
    return i.call(e2, t2, r2);
  }
  function b(e2, t2, r2) {
    f(f(e2, t2, r2), void 0, o);
  }
  function h(e2, t2) {
    b(e2, t2);
  }
  function _(e2, t2) {
    b(e2, void 0, t2);
  }
  function p(e2, t2, r2) {
    return f(e2, t2, r2);
  }
  function m(e2) {
    f(e2, void 0, o);
  }
  var y = (e2) => {
    if ("function" == typeof queueMicrotask)
      y = queueMicrotask;
    else {
      const e3 = c(void 0);
      y = (t2) => f(e3, t2);
    }
    return y(e2);
  };
  function g(e2, t2, r2) {
    if ("function" != typeof e2)
      throw new TypeError("Argument is not a function");
    return Function.prototype.apply.call(e2, t2, r2);
  }
  function w(e2, t2, r2) {
    try {
      return c(g(e2, t2, r2));
    } catch (e3) {
      return d(e3);
    }
  }
  var S = class {
    constructor() {
      this._cursor = 0, this._size = 0, this._front = { _elements: [], _next: void 0 }, this._back = this._front, this._cursor = 0, this._size = 0;
    }
    get length() {
      return this._size;
    }
    push(e2) {
      const t2 = this._back;
      let r2 = t2;
      16383 === t2._elements.length && (r2 = { _elements: [], _next: void 0 }), t2._elements.push(e2), r2 !== t2 && (this._back = r2, t2._next = r2), ++this._size;
    }
    shift() {
      const e2 = this._front;
      let t2 = e2;
      const r2 = this._cursor;
      let o2 = r2 + 1;
      const n2 = e2._elements, a2 = n2[r2];
      return 16384 === o2 && (t2 = e2._next, o2 = 0), --this._size, this._cursor = o2, e2 !== t2 && (this._front = t2), n2[r2] = void 0, a2;
    }
    forEach(e2) {
      let t2 = this._cursor, r2 = this._front, o2 = r2._elements;
      for (; !(t2 === o2.length && void 0 === r2._next || t2 === o2.length && (r2 = r2._next, o2 = r2._elements, t2 = 0, 0 === o2.length)); )
        e2(o2[t2]), ++t2;
    }
    peek() {
      const e2 = this._front, t2 = this._cursor;
      return e2._elements[t2];
    }
  };
  var v = e("[[AbortSteps]]");
  var R = e("[[ErrorSteps]]");
  var T = e("[[CancelSteps]]");
  var q = e("[[PullSteps]]");
  var C = e("[[ReleaseSteps]]");
  function E(e2, t2) {
    e2._ownerReadableStream = t2, t2._reader = e2, "readable" === t2._state ? O(e2) : "closed" === t2._state ? function(e3) {
      O(e3), j(e3);
    }(e2) : B(e2, t2._storedError);
  }
  function P(e2, t2) {
    return Gt(e2._ownerReadableStream, t2);
  }
  function W(e2) {
    const t2 = e2._ownerReadableStream;
    "readable" === t2._state ? A(e2, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")) : function(e3, t3) {
      B(e3, t3);
    }(e2, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")), t2._readableStreamController[C](), t2._reader = void 0, e2._ownerReadableStream = void 0;
  }
  function k(e2) {
    return new TypeError("Cannot " + e2 + " a stream using a released reader");
  }
  function O(e2) {
    e2._closedPromise = u((t2, r2) => {
      e2._closedPromise_resolve = t2, e2._closedPromise_reject = r2;
    });
  }
  function B(e2, t2) {
    O(e2), A(e2, t2);
  }
  function A(e2, t2) {
    void 0 !== e2._closedPromise_reject && (m(e2._closedPromise), e2._closedPromise_reject(t2), e2._closedPromise_resolve = void 0, e2._closedPromise_reject = void 0);
  }
  function j(e2) {
    void 0 !== e2._closedPromise_resolve && (e2._closedPromise_resolve(void 0), e2._closedPromise_resolve = void 0, e2._closedPromise_reject = void 0);
  }
  var z = Number.isFinite || function(e2) {
    return "number" == typeof e2 && isFinite(e2);
  };
  var L = Math.trunc || function(e2) {
    return e2 < 0 ? Math.ceil(e2) : Math.floor(e2);
  };
  function F(e2, t2) {
    if (void 0 !== e2 && ("object" != typeof (r2 = e2) && "function" != typeof r2))
      throw new TypeError(`${t2} is not an object.`);
    var r2;
  }
  function I(e2, t2) {
    if ("function" != typeof e2)
      throw new TypeError(`${t2} is not a function.`);
  }
  function D(e2, t2) {
    if (!function(e3) {
      return "object" == typeof e3 && null !== e3 || "function" == typeof e3;
    }(e2))
      throw new TypeError(`${t2} is not an object.`);
  }
  function $(e2, t2, r2) {
    if (void 0 === e2)
      throw new TypeError(`Parameter ${t2} is required in '${r2}'.`);
  }
  function M(e2, t2, r2) {
    if (void 0 === e2)
      throw new TypeError(`${t2} is required in '${r2}'.`);
  }
  function Y(e2) {
    return Number(e2);
  }
  function Q(e2) {
    return 0 === e2 ? 0 : e2;
  }
  function N(e2, t2) {
    const r2 = Number.MAX_SAFE_INTEGER;
    let o2 = Number(e2);
    if (o2 = Q(o2), !z(o2))
      throw new TypeError(`${t2} is not a finite number`);
    if (o2 = function(e3) {
      return Q(L(e3));
    }(o2), o2 < 0 || o2 > r2)
      throw new TypeError(`${t2} is outside the accepted range of 0 to ${r2}, inclusive`);
    return z(o2) && 0 !== o2 ? o2 : 0;
  }
  function H(e2) {
    if (!r(e2))
      return false;
    if ("function" != typeof e2.getReader)
      return false;
    try {
      return "boolean" == typeof e2.locked;
    } catch (e3) {
      return false;
    }
  }
  function x(e2) {
    if (!r(e2))
      return false;
    if ("function" != typeof e2.getWriter)
      return false;
    try {
      return "boolean" == typeof e2.locked;
    } catch (e3) {
      return false;
    }
  }
  function V(e2, t2) {
    if (!Vt(e2))
      throw new TypeError(`${t2} is not a ReadableStream.`);
  }
  function U(e2, t2) {
    e2._reader._readRequests.push(t2);
  }
  function G(e2, t2, r2) {
    const o2 = e2._reader._readRequests.shift();
    r2 ? o2._closeSteps() : o2._chunkSteps(t2);
  }
  function X(e2) {
    return e2._reader._readRequests.length;
  }
  function J(e2) {
    const t2 = e2._reader;
    return void 0 !== t2 && !!K(t2);
  }
  var ReadableStreamDefaultReader = class {
    constructor(e2) {
      if ($(e2, 1, "ReadableStreamDefaultReader"), V(e2, "First parameter"), Ut(e2))
        throw new TypeError("This stream has already been locked for exclusive reading by another reader");
      E(this, e2), this._readRequests = new S();
    }
    get closed() {
      return K(this) ? this._closedPromise : d(ee("closed"));
    }
    cancel(e2) {
      return K(this) ? void 0 === this._ownerReadableStream ? d(k("cancel")) : P(this, e2) : d(ee("cancel"));
    }
    read() {
      if (!K(this))
        return d(ee("read"));
      if (void 0 === this._ownerReadableStream)
        return d(k("read from"));
      let e2, t2;
      const r2 = u((r3, o2) => {
        e2 = r3, t2 = o2;
      });
      return function(e3, t3) {
        const r3 = e3._ownerReadableStream;
        r3._disturbed = true, "closed" === r3._state ? t3._closeSteps() : "errored" === r3._state ? t3._errorSteps(r3._storedError) : r3._readableStreamController[q](t3);
      }(this, { _chunkSteps: (t3) => e2({ value: t3, done: false }), _closeSteps: () => e2({ value: void 0, done: true }), _errorSteps: (e3) => t2(e3) }), r2;
    }
    releaseLock() {
      if (!K(this))
        throw ee("releaseLock");
      void 0 !== this._ownerReadableStream && function(e2) {
        W(e2);
        const t2 = new TypeError("Reader was released");
        Z(e2, t2);
      }(this);
    }
  };
  function K(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_readRequests") && e2 instanceof ReadableStreamDefaultReader);
  }
  function Z(e2, t2) {
    const r2 = e2._readRequests;
    e2._readRequests = new S(), r2.forEach((e3) => {
      e3._errorSteps(t2);
    });
  }
  function ee(e2) {
    return new TypeError(`ReadableStreamDefaultReader.prototype.${e2} can only be used on a ReadableStreamDefaultReader`);
  }
  Object.defineProperties(ReadableStreamDefaultReader.prototype, { cancel: { enumerable: true }, read: { enumerable: true }, releaseLock: { enumerable: true }, closed: { enumerable: true } }), n(ReadableStreamDefaultReader.prototype.cancel, "cancel"), n(ReadableStreamDefaultReader.prototype.read, "read"), n(ReadableStreamDefaultReader.prototype.releaseLock, "releaseLock"), "symbol" == typeof e.toStringTag && Object.defineProperty(ReadableStreamDefaultReader.prototype, e.toStringTag, { value: "ReadableStreamDefaultReader", configurable: true });
  var te = class {
    constructor(e2, t2) {
      this._ongoingPromise = void 0, this._isFinished = false, this._reader = e2, this._preventCancel = t2;
    }
    next() {
      const e2 = () => this._nextSteps();
      return this._ongoingPromise = this._ongoingPromise ? p(this._ongoingPromise, e2, e2) : e2(), this._ongoingPromise;
    }
    return(e2) {
      const t2 = () => this._returnSteps(e2);
      return this._ongoingPromise ? p(this._ongoingPromise, t2, t2) : t2();
    }
    _nextSteps() {
      if (this._isFinished)
        return Promise.resolve({ value: void 0, done: true });
      const e2 = this._reader;
      return void 0 === e2 ? d(k("iterate")) : f(e2.read(), (e3) => {
        var t2;
        return this._ongoingPromise = void 0, e3.done && (this._isFinished = true, null === (t2 = this._reader) || void 0 === t2 || t2.releaseLock(), this._reader = void 0), e3;
      }, (e3) => {
        var t2;
        throw this._ongoingPromise = void 0, this._isFinished = true, null === (t2 = this._reader) || void 0 === t2 || t2.releaseLock(), this._reader = void 0, e3;
      });
    }
    _returnSteps(e2) {
      if (this._isFinished)
        return Promise.resolve({ value: e2, done: true });
      this._isFinished = true;
      const t2 = this._reader;
      if (void 0 === t2)
        return d(k("finish iterating"));
      if (this._reader = void 0, !this._preventCancel) {
        const r2 = t2.cancel(e2);
        return t2.releaseLock(), p(r2, () => ({ value: e2, done: true }));
      }
      return t2.releaseLock(), c({ value: e2, done: true });
    }
  };
  var re = { next() {
    return oe(this) ? this._asyncIteratorImpl.next() : d(ne("next"));
  }, return(e2) {
    return oe(this) ? this._asyncIteratorImpl.return(e2) : d(ne("return"));
  } };
  function oe(e2) {
    if (!r(e2))
      return false;
    if (!Object.prototype.hasOwnProperty.call(e2, "_asyncIteratorImpl"))
      return false;
    try {
      return e2._asyncIteratorImpl instanceof te;
    } catch (e3) {
      return false;
    }
  }
  function ne(e2) {
    return new TypeError(`ReadableStreamAsyncIterator.${e2} can only be used on a ReadableSteamAsyncIterator`);
  }
  "symbol" == typeof e.asyncIterator && Object.defineProperty(re, e.asyncIterator, { value() {
    return this;
  }, writable: true, configurable: true });
  var ae = Number.isNaN || function(e2) {
    return e2 != e2;
  };
  function ie(e2, t2, r2, o2, n2) {
    new Uint8Array(e2).set(new Uint8Array(r2, o2, n2), t2);
  }
  function le(e2) {
    const t2 = function(e3, t3, r2) {
      if (e3.slice)
        return e3.slice(t3, r2);
      const o2 = r2 - t3, n2 = new ArrayBuffer(o2);
      return ie(n2, 0, e3, t3, o2), n2;
    }(e2.buffer, e2.byteOffset, e2.byteOffset + e2.byteLength);
    return new Uint8Array(t2);
  }
  function se(e2) {
    const t2 = e2._queue.shift();
    return e2._queueTotalSize -= t2.size, e2._queueTotalSize < 0 && (e2._queueTotalSize = 0), t2.value;
  }
  function ue(e2, t2, r2) {
    if ("number" != typeof (o2 = r2) || ae(o2) || o2 < 0 || r2 === 1 / 0)
      throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
    var o2;
    e2._queue.push({ value: t2, size: r2 }), e2._queueTotalSize += r2;
  }
  function ce(e2) {
    e2._queue = new S(), e2._queueTotalSize = 0;
  }
  var ReadableStreamBYOBRequest = class {
    constructor() {
      throw new TypeError("Illegal constructor");
    }
    get view() {
      if (!fe(this))
        throw Be("view");
      return this._view;
    }
    respond(e2) {
      if (!fe(this))
        throw Be("respond");
      if ($(e2, 1, "respond"), e2 = N(e2, "First parameter"), void 0 === this._associatedReadableByteStreamController)
        throw new TypeError("This BYOB request has been invalidated");
      this._view.buffer, function(e3, t2) {
        const r2 = e3._pendingPullIntos.peek();
        if ("closed" === e3._controlledReadableByteStream._state) {
          if (0 !== t2)
            throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
        } else {
          if (0 === t2)
            throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
          if (r2.bytesFilled + t2 > r2.byteLength)
            throw new RangeError("bytesWritten out of range");
        }
        r2.buffer = r2.buffer, qe(e3, t2);
      }(this._associatedReadableByteStreamController, e2);
    }
    respondWithNewView(e2) {
      if (!fe(this))
        throw Be("respondWithNewView");
      if ($(e2, 1, "respondWithNewView"), !ArrayBuffer.isView(e2))
        throw new TypeError("You can only respond with array buffer views");
      if (void 0 === this._associatedReadableByteStreamController)
        throw new TypeError("This BYOB request has been invalidated");
      e2.buffer, function(e3, t2) {
        const r2 = e3._pendingPullIntos.peek();
        if ("closed" === e3._controlledReadableByteStream._state) {
          if (0 !== t2.byteLength)
            throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
        } else if (0 === t2.byteLength)
          throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
        if (r2.byteOffset + r2.bytesFilled !== t2.byteOffset)
          throw new RangeError("The region specified by view does not match byobRequest");
        if (r2.bufferByteLength !== t2.buffer.byteLength)
          throw new RangeError("The buffer of view has different capacity than byobRequest");
        if (r2.bytesFilled + t2.byteLength > r2.byteLength)
          throw new RangeError("The region specified by view is larger than byobRequest");
        const o2 = t2.byteLength;
        r2.buffer = t2.buffer, qe(e3, o2);
      }(this._associatedReadableByteStreamController, e2);
    }
  };
  Object.defineProperties(ReadableStreamBYOBRequest.prototype, { respond: { enumerable: true }, respondWithNewView: { enumerable: true }, view: { enumerable: true } }), n(ReadableStreamBYOBRequest.prototype.respond, "respond"), n(ReadableStreamBYOBRequest.prototype.respondWithNewView, "respondWithNewView"), "symbol" == typeof e.toStringTag && Object.defineProperty(ReadableStreamBYOBRequest.prototype, e.toStringTag, { value: "ReadableStreamBYOBRequest", configurable: true });
  var ReadableByteStreamController = class {
    constructor() {
      throw new TypeError("Illegal constructor");
    }
    get byobRequest() {
      if (!de(this))
        throw Ae("byobRequest");
      return function(e2) {
        if (null === e2._byobRequest && e2._pendingPullIntos.length > 0) {
          const t2 = e2._pendingPullIntos.peek(), r2 = new Uint8Array(t2.buffer, t2.byteOffset + t2.bytesFilled, t2.byteLength - t2.bytesFilled), o2 = Object.create(ReadableStreamBYOBRequest.prototype);
          !function(e3, t3, r3) {
            e3._associatedReadableByteStreamController = t3, e3._view = r3;
          }(o2, e2, r2), e2._byobRequest = o2;
        }
        return e2._byobRequest;
      }(this);
    }
    get desiredSize() {
      if (!de(this))
        throw Ae("desiredSize");
      return ke(this);
    }
    close() {
      if (!de(this))
        throw Ae("close");
      if (this._closeRequested)
        throw new TypeError("The stream has already been closed; do not close it again!");
      const e2 = this._controlledReadableByteStream._state;
      if ("readable" !== e2)
        throw new TypeError(`The stream (in ${e2} state) is not in the readable state and cannot be closed`);
      !function(e3) {
        const t2 = e3._controlledReadableByteStream;
        if (e3._closeRequested || "readable" !== t2._state)
          return;
        if (e3._queueTotalSize > 0)
          return void (e3._closeRequested = true);
        if (e3._pendingPullIntos.length > 0) {
          if (e3._pendingPullIntos.peek().bytesFilled > 0) {
            const t3 = new TypeError("Insufficient bytes to fill elements in the given buffer");
            throw Pe(e3, t3), t3;
          }
        }
        Ee(e3), Xt(t2);
      }(this);
    }
    enqueue(e2) {
      if (!de(this))
        throw Ae("enqueue");
      if ($(e2, 1, "enqueue"), !ArrayBuffer.isView(e2))
        throw new TypeError("chunk must be an array buffer view");
      if (0 === e2.byteLength)
        throw new TypeError("chunk must have non-zero byteLength");
      if (0 === e2.buffer.byteLength)
        throw new TypeError("chunk's buffer must have non-zero byteLength");
      if (this._closeRequested)
        throw new TypeError("stream is closed or draining");
      const t2 = this._controlledReadableByteStream._state;
      if ("readable" !== t2)
        throw new TypeError(`The stream (in ${t2} state) is not in the readable state and cannot be enqueued to`);
      !function(e3, t3) {
        const r2 = e3._controlledReadableByteStream;
        if (e3._closeRequested || "readable" !== r2._state)
          return;
        const o2 = t3.buffer, n2 = t3.byteOffset, a2 = t3.byteLength, i2 = o2;
        if (e3._pendingPullIntos.length > 0) {
          const t4 = e3._pendingPullIntos.peek();
          t4.buffer, 0, Re(e3), t4.buffer = t4.buffer, "none" === t4.readerType && ge(e3, t4);
        }
        if (J(r2))
          if (function(e4) {
            const t4 = e4._controlledReadableByteStream._reader;
            for (; t4._readRequests.length > 0; ) {
              if (0 === e4._queueTotalSize)
                return;
              We(e4, t4._readRequests.shift());
            }
          }(e3), 0 === X(r2))
            me(e3, i2, n2, a2);
          else {
            e3._pendingPullIntos.length > 0 && Ce(e3);
            G(r2, new Uint8Array(i2, n2, a2), false);
          }
        else
          Le(r2) ? (me(e3, i2, n2, a2), Te(e3)) : me(e3, i2, n2, a2);
        be(e3);
      }(this, e2);
    }
    error(e2) {
      if (!de(this))
        throw Ae("error");
      Pe(this, e2);
    }
    [T](e2) {
      he(this), ce(this);
      const t2 = this._cancelAlgorithm(e2);
      return Ee(this), t2;
    }
    [q](e2) {
      const t2 = this._controlledReadableByteStream;
      if (this._queueTotalSize > 0)
        return void We(this, e2);
      const r2 = this._autoAllocateChunkSize;
      if (void 0 !== r2) {
        let t3;
        try {
          t3 = new ArrayBuffer(r2);
        } catch (t4) {
          return void e2._errorSteps(t4);
        }
        const o2 = { buffer: t3, bufferByteLength: r2, byteOffset: 0, byteLength: r2, bytesFilled: 0, elementSize: 1, viewConstructor: Uint8Array, readerType: "default" };
        this._pendingPullIntos.push(o2);
      }
      U(t2, e2), be(this);
    }
    [C]() {
      if (this._pendingPullIntos.length > 0) {
        const e2 = this._pendingPullIntos.peek();
        e2.readerType = "none", this._pendingPullIntos = new S(), this._pendingPullIntos.push(e2);
      }
    }
  };
  function de(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_controlledReadableByteStream") && e2 instanceof ReadableByteStreamController);
  }
  function fe(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_associatedReadableByteStreamController") && e2 instanceof ReadableStreamBYOBRequest);
  }
  function be(e2) {
    const t2 = function(e3) {
      const t3 = e3._controlledReadableByteStream;
      if ("readable" !== t3._state)
        return false;
      if (e3._closeRequested)
        return false;
      if (!e3._started)
        return false;
      if (J(t3) && X(t3) > 0)
        return true;
      if (Le(t3) && ze(t3) > 0)
        return true;
      if (ke(e3) > 0)
        return true;
      return false;
    }(e2);
    if (!t2)
      return;
    if (e2._pulling)
      return void (e2._pullAgain = true);
    e2._pulling = true;
    b(e2._pullAlgorithm(), () => (e2._pulling = false, e2._pullAgain && (e2._pullAgain = false, be(e2)), null), (t3) => (Pe(e2, t3), null));
  }
  function he(e2) {
    Re(e2), e2._pendingPullIntos = new S();
  }
  function _e(e2, t2) {
    let r2 = false;
    "closed" === e2._state && (r2 = true);
    const o2 = pe(t2);
    "default" === t2.readerType ? G(e2, o2, r2) : function(e3, t3, r3) {
      const o3 = e3._reader._readIntoRequests.shift();
      r3 ? o3._closeSteps(t3) : o3._chunkSteps(t3);
    }(e2, o2, r2);
  }
  function pe(e2) {
    const t2 = e2.bytesFilled, r2 = e2.elementSize;
    return new e2.viewConstructor(e2.buffer, e2.byteOffset, t2 / r2);
  }
  function me(e2, t2, r2, o2) {
    e2._queue.push({ buffer: t2, byteOffset: r2, byteLength: o2 }), e2._queueTotalSize += o2;
  }
  function ye(e2, t2, r2, o2) {
    let n2;
    try {
      n2 = t2.slice(r2, r2 + o2);
    } catch (t3) {
      throw Pe(e2, t3), t3;
    }
    me(e2, n2, 0, o2);
  }
  function ge(e2, t2) {
    t2.bytesFilled > 0 && ye(e2, t2.buffer, t2.byteOffset, t2.bytesFilled), Ce(e2);
  }
  function we(e2, t2) {
    const r2 = t2.elementSize, o2 = t2.bytesFilled - t2.bytesFilled % r2, n2 = Math.min(e2._queueTotalSize, t2.byteLength - t2.bytesFilled), a2 = t2.bytesFilled + n2, i2 = a2 - a2 % r2;
    let l2 = n2, s2 = false;
    i2 > o2 && (l2 = i2 - t2.bytesFilled, s2 = true);
    const u2 = e2._queue;
    for (; l2 > 0; ) {
      const r3 = u2.peek(), o3 = Math.min(l2, r3.byteLength), n3 = t2.byteOffset + t2.bytesFilled;
      ie(t2.buffer, n3, r3.buffer, r3.byteOffset, o3), r3.byteLength === o3 ? u2.shift() : (r3.byteOffset += o3, r3.byteLength -= o3), e2._queueTotalSize -= o3, Se(e2, o3, t2), l2 -= o3;
    }
    return s2;
  }
  function Se(e2, t2, r2) {
    r2.bytesFilled += t2;
  }
  function ve(e2) {
    0 === e2._queueTotalSize && e2._closeRequested ? (Ee(e2), Xt(e2._controlledReadableByteStream)) : be(e2);
  }
  function Re(e2) {
    null !== e2._byobRequest && (e2._byobRequest._associatedReadableByteStreamController = void 0, e2._byobRequest._view = null, e2._byobRequest = null);
  }
  function Te(e2) {
    for (; e2._pendingPullIntos.length > 0; ) {
      if (0 === e2._queueTotalSize)
        return;
      const t2 = e2._pendingPullIntos.peek();
      we(e2, t2) && (Ce(e2), _e(e2._controlledReadableByteStream, t2));
    }
  }
  function qe(e2, t2) {
    const r2 = e2._pendingPullIntos.peek();
    Re(e2);
    "closed" === e2._controlledReadableByteStream._state ? function(e3, t3) {
      "none" === t3.readerType && Ce(e3);
      const r3 = e3._controlledReadableByteStream;
      if (Le(r3))
        for (; ze(r3) > 0; )
          _e(r3, Ce(e3));
    }(e2, r2) : function(e3, t3, r3) {
      if (Se(0, t3, r3), "none" === r3.readerType)
        return ge(e3, r3), void Te(e3);
      if (r3.bytesFilled < r3.elementSize)
        return;
      Ce(e3);
      const o2 = r3.bytesFilled % r3.elementSize;
      if (o2 > 0) {
        const t4 = r3.byteOffset + r3.bytesFilled;
        ye(e3, r3.buffer, t4 - o2, o2);
      }
      r3.bytesFilled -= o2, _e(e3._controlledReadableByteStream, r3), Te(e3);
    }(e2, t2, r2), be(e2);
  }
  function Ce(e2) {
    return e2._pendingPullIntos.shift();
  }
  function Ee(e2) {
    e2._pullAlgorithm = void 0, e2._cancelAlgorithm = void 0;
  }
  function Pe(e2, t2) {
    const r2 = e2._controlledReadableByteStream;
    "readable" === r2._state && (he(e2), ce(e2), Ee(e2), Jt(r2, t2));
  }
  function We(e2, t2) {
    const r2 = e2._queue.shift();
    e2._queueTotalSize -= r2.byteLength, ve(e2);
    const o2 = new Uint8Array(r2.buffer, r2.byteOffset, r2.byteLength);
    t2._chunkSteps(o2);
  }
  function ke(e2) {
    const t2 = e2._controlledReadableByteStream._state;
    return "errored" === t2 ? null : "closed" === t2 ? 0 : e2._strategyHWM - e2._queueTotalSize;
  }
  function Oe(e2, t2, r2) {
    const o2 = Object.create(ReadableByteStreamController.prototype);
    let n2, a2, i2;
    n2 = void 0 !== t2.start ? () => t2.start(o2) : () => {
    }, a2 = void 0 !== t2.pull ? () => t2.pull(o2) : () => c(void 0), i2 = void 0 !== t2.cancel ? (e3) => t2.cancel(e3) : () => c(void 0);
    const l2 = t2.autoAllocateChunkSize;
    if (0 === l2)
      throw new TypeError("autoAllocateChunkSize must be greater than 0");
    !function(e3, t3, r3, o3, n3, a3, i3) {
      t3._controlledReadableByteStream = e3, t3._pullAgain = false, t3._pulling = false, t3._byobRequest = null, t3._queue = t3._queueTotalSize = void 0, ce(t3), t3._closeRequested = false, t3._started = false, t3._strategyHWM = a3, t3._pullAlgorithm = o3, t3._cancelAlgorithm = n3, t3._autoAllocateChunkSize = i3, t3._pendingPullIntos = new S(), e3._readableStreamController = t3, b(c(r3()), () => (t3._started = true, be(t3), null), (e4) => (Pe(t3, e4), null));
    }(e2, o2, n2, a2, i2, r2, l2);
  }
  function Be(e2) {
    return new TypeError(`ReadableStreamBYOBRequest.prototype.${e2} can only be used on a ReadableStreamBYOBRequest`);
  }
  function Ae(e2) {
    return new TypeError(`ReadableByteStreamController.prototype.${e2} can only be used on a ReadableByteStreamController`);
  }
  function je(e2, t2) {
    e2._reader._readIntoRequests.push(t2);
  }
  function ze(e2) {
    return e2._reader._readIntoRequests.length;
  }
  function Le(e2) {
    const t2 = e2._reader;
    return void 0 !== t2 && !!Fe(t2);
  }
  Object.defineProperties(ReadableByteStreamController.prototype, { close: { enumerable: true }, enqueue: { enumerable: true }, error: { enumerable: true }, byobRequest: { enumerable: true }, desiredSize: { enumerable: true } }), n(ReadableByteStreamController.prototype.close, "close"), n(ReadableByteStreamController.prototype.enqueue, "enqueue"), n(ReadableByteStreamController.prototype.error, "error"), "symbol" == typeof e.toStringTag && Object.defineProperty(ReadableByteStreamController.prototype, e.toStringTag, { value: "ReadableByteStreamController", configurable: true });
  var ReadableStreamBYOBReader = class {
    constructor(e2) {
      if ($(e2, 1, "ReadableStreamBYOBReader"), V(e2, "First parameter"), Ut(e2))
        throw new TypeError("This stream has already been locked for exclusive reading by another reader");
      if (!de(e2._readableStreamController))
        throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
      E(this, e2), this._readIntoRequests = new S();
    }
    get closed() {
      return Fe(this) ? this._closedPromise : d(De("closed"));
    }
    cancel(e2) {
      return Fe(this) ? void 0 === this._ownerReadableStream ? d(k("cancel")) : P(this, e2) : d(De("cancel"));
    }
    read(e2) {
      if (!Fe(this))
        return d(De("read"));
      if (!ArrayBuffer.isView(e2))
        return d(new TypeError("view must be an array buffer view"));
      if (0 === e2.byteLength)
        return d(new TypeError("view must have non-zero byteLength"));
      if (0 === e2.buffer.byteLength)
        return d(new TypeError("view's buffer must have non-zero byteLength"));
      if (e2.buffer, void 0 === this._ownerReadableStream)
        return d(k("read from"));
      let t2, r2;
      const o2 = u((e3, o3) => {
        t2 = e3, r2 = o3;
      });
      return function(e3, t3, r3) {
        const o3 = e3._ownerReadableStream;
        o3._disturbed = true, "errored" === o3._state ? r3._errorSteps(o3._storedError) : function(e4, t4, r4) {
          const o4 = e4._controlledReadableByteStream;
          let n2 = 1;
          t4.constructor !== DataView && (n2 = t4.constructor.BYTES_PER_ELEMENT);
          const a2 = t4.constructor, i2 = t4.buffer, l2 = { buffer: i2, bufferByteLength: i2.byteLength, byteOffset: t4.byteOffset, byteLength: t4.byteLength, bytesFilled: 0, elementSize: n2, viewConstructor: a2, readerType: "byob" };
          if (e4._pendingPullIntos.length > 0)
            return e4._pendingPullIntos.push(l2), void je(o4, r4);
          if ("closed" !== o4._state) {
            if (e4._queueTotalSize > 0) {
              if (we(e4, l2)) {
                const t5 = pe(l2);
                return ve(e4), void r4._chunkSteps(t5);
              }
              if (e4._closeRequested) {
                const t5 = new TypeError("Insufficient bytes to fill elements in the given buffer");
                return Pe(e4, t5), void r4._errorSteps(t5);
              }
            }
            e4._pendingPullIntos.push(l2), je(o4, r4), be(e4);
          } else {
            const e5 = new a2(l2.buffer, l2.byteOffset, 0);
            r4._closeSteps(e5);
          }
        }(o3._readableStreamController, t3, r3);
      }(this, e2, { _chunkSteps: (e3) => t2({ value: e3, done: false }), _closeSteps: (e3) => t2({ value: e3, done: true }), _errorSteps: (e3) => r2(e3) }), o2;
    }
    releaseLock() {
      if (!Fe(this))
        throw De("releaseLock");
      void 0 !== this._ownerReadableStream && function(e2) {
        W(e2);
        const t2 = new TypeError("Reader was released");
        Ie(e2, t2);
      }(this);
    }
  };
  function Fe(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_readIntoRequests") && e2 instanceof ReadableStreamBYOBReader);
  }
  function Ie(e2, t2) {
    const r2 = e2._readIntoRequests;
    e2._readIntoRequests = new S(), r2.forEach((e3) => {
      e3._errorSteps(t2);
    });
  }
  function De(e2) {
    return new TypeError(`ReadableStreamBYOBReader.prototype.${e2} can only be used on a ReadableStreamBYOBReader`);
  }
  function $e(e2, t2) {
    const { highWaterMark: r2 } = e2;
    if (void 0 === r2)
      return t2;
    if (ae(r2) || r2 < 0)
      throw new RangeError("Invalid highWaterMark");
    return r2;
  }
  function Me(e2) {
    const { size: t2 } = e2;
    return t2 || (() => 1);
  }
  function Ye(e2, t2) {
    F(e2, t2);
    const r2 = null == e2 ? void 0 : e2.highWaterMark, o2 = null == e2 ? void 0 : e2.size;
    return { highWaterMark: void 0 === r2 ? void 0 : Y(r2), size: void 0 === o2 ? void 0 : Qe(o2, `${t2} has member 'size' that`) };
  }
  function Qe(e2, t2) {
    return I(e2, t2), (t3) => Y(e2(t3));
  }
  function Ne(e2, t2, r2) {
    return I(e2, r2), (r3) => w(e2, t2, [r3]);
  }
  function He(e2, t2, r2) {
    return I(e2, r2), () => w(e2, t2, []);
  }
  function xe(e2, t2, r2) {
    return I(e2, r2), (r3) => g(e2, t2, [r3]);
  }
  function Ve(e2, t2, r2) {
    return I(e2, r2), (r3, o2) => w(e2, t2, [r3, o2]);
  }
  Object.defineProperties(ReadableStreamBYOBReader.prototype, { cancel: { enumerable: true }, read: { enumerable: true }, releaseLock: { enumerable: true }, closed: { enumerable: true } }), n(ReadableStreamBYOBReader.prototype.cancel, "cancel"), n(ReadableStreamBYOBReader.prototype.read, "read"), n(ReadableStreamBYOBReader.prototype.releaseLock, "releaseLock"), "symbol" == typeof e.toStringTag && Object.defineProperty(ReadableStreamBYOBReader.prototype, e.toStringTag, { value: "ReadableStreamBYOBReader", configurable: true });
  var Ue = "function" == typeof AbortController;
  var WritableStream = class {
    constructor(e2 = {}, t2 = {}) {
      void 0 === e2 ? e2 = null : D(e2, "First parameter");
      const r2 = Ye(t2, "Second parameter"), o2 = function(e3, t3) {
        F(e3, t3);
        const r3 = null == e3 ? void 0 : e3.abort, o3 = null == e3 ? void 0 : e3.close, n3 = null == e3 ? void 0 : e3.start, a3 = null == e3 ? void 0 : e3.type, i2 = null == e3 ? void 0 : e3.write;
        return { abort: void 0 === r3 ? void 0 : Ne(r3, e3, `${t3} has member 'abort' that`), close: void 0 === o3 ? void 0 : He(o3, e3, `${t3} has member 'close' that`), start: void 0 === n3 ? void 0 : xe(n3, e3, `${t3} has member 'start' that`), write: void 0 === i2 ? void 0 : Ve(i2, e3, `${t3} has member 'write' that`), type: a3 };
      }(e2, "First parameter");
      var n2;
      (n2 = this)._state = "writable", n2._storedError = void 0, n2._writer = void 0, n2._writableStreamController = void 0, n2._writeRequests = new S(), n2._inFlightWriteRequest = void 0, n2._closeRequest = void 0, n2._inFlightCloseRequest = void 0, n2._pendingAbortRequest = void 0, n2._backpressure = false;
      if (void 0 !== o2.type)
        throw new RangeError("Invalid type is specified");
      const a2 = Me(r2);
      !function(e3, t3, r3, o3) {
        const n3 = Object.create(WritableStreamDefaultController.prototype);
        let a3, i2, l2, s2;
        a3 = void 0 !== t3.start ? () => t3.start(n3) : () => {
        };
        i2 = void 0 !== t3.write ? (e4) => t3.write(e4, n3) : () => c(void 0);
        l2 = void 0 !== t3.close ? () => t3.close() : () => c(void 0);
        s2 = void 0 !== t3.abort ? (e4) => t3.abort(e4) : () => c(void 0);
        !function(e4, t4, r4, o4, n4, a4, i3, l3) {
          t4._controlledWritableStream = e4, e4._writableStreamController = t4, t4._queue = void 0, t4._queueTotalSize = void 0, ce(t4), t4._abortReason = void 0, t4._abortController = function() {
            if (Ue)
              return new AbortController();
          }(), t4._started = false, t4._strategySizeAlgorithm = l3, t4._strategyHWM = i3, t4._writeAlgorithm = o4, t4._closeAlgorithm = n4, t4._abortAlgorithm = a4;
          const s3 = bt(t4);
          nt(e4, s3);
          const u2 = r4();
          b(c(u2), () => (t4._started = true, dt(t4), null), (r5) => (t4._started = true, Ze(e4, r5), null));
        }(e3, n3, a3, i2, l2, s2, r3, o3);
      }(this, o2, $e(r2, 1), a2);
    }
    get locked() {
      if (!Ge(this))
        throw _t("locked");
      return Xe(this);
    }
    abort(e2) {
      return Ge(this) ? Xe(this) ? d(new TypeError("Cannot abort a stream that already has a writer")) : Je(this, e2) : d(_t("abort"));
    }
    close() {
      return Ge(this) ? Xe(this) ? d(new TypeError("Cannot close a stream that already has a writer")) : rt(this) ? d(new TypeError("Cannot close an already-closing stream")) : Ke(this) : d(_t("close"));
    }
    getWriter() {
      if (!Ge(this))
        throw _t("getWriter");
      return new WritableStreamDefaultWriter(this);
    }
  };
  function Ge(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_writableStreamController") && e2 instanceof WritableStream);
  }
  function Xe(e2) {
    return void 0 !== e2._writer;
  }
  function Je(e2, t2) {
    var r2;
    if ("closed" === e2._state || "errored" === e2._state)
      return c(void 0);
    e2._writableStreamController._abortReason = t2, null === (r2 = e2._writableStreamController._abortController) || void 0 === r2 || r2.abort(t2);
    const o2 = e2._state;
    if ("closed" === o2 || "errored" === o2)
      return c(void 0);
    if (void 0 !== e2._pendingAbortRequest)
      return e2._pendingAbortRequest._promise;
    let n2 = false;
    "erroring" === o2 && (n2 = true, t2 = void 0);
    const a2 = u((r3, o3) => {
      e2._pendingAbortRequest = { _promise: void 0, _resolve: r3, _reject: o3, _reason: t2, _wasAlreadyErroring: n2 };
    });
    return e2._pendingAbortRequest._promise = a2, n2 || et(e2, t2), a2;
  }
  function Ke(e2) {
    const t2 = e2._state;
    if ("closed" === t2 || "errored" === t2)
      return d(new TypeError(`The stream (in ${t2} state) is not in the writable state and cannot be closed`));
    const r2 = u((t3, r3) => {
      const o3 = { _resolve: t3, _reject: r3 };
      e2._closeRequest = o3;
    }), o2 = e2._writer;
    var n2;
    return void 0 !== o2 && e2._backpressure && "writable" === t2 && Et(o2), ue(n2 = e2._writableStreamController, lt, 0), dt(n2), r2;
  }
  function Ze(e2, t2) {
    "writable" !== e2._state ? tt(e2) : et(e2, t2);
  }
  function et(e2, t2) {
    const r2 = e2._writableStreamController;
    e2._state = "erroring", e2._storedError = t2;
    const o2 = e2._writer;
    void 0 !== o2 && it(o2, t2), !function(e3) {
      if (void 0 === e3._inFlightWriteRequest && void 0 === e3._inFlightCloseRequest)
        return false;
      return true;
    }(e2) && r2._started && tt(e2);
  }
  function tt(e2) {
    e2._state = "errored", e2._writableStreamController[R]();
    const t2 = e2._storedError;
    if (e2._writeRequests.forEach((e3) => {
      e3._reject(t2);
    }), e2._writeRequests = new S(), void 0 === e2._pendingAbortRequest)
      return void ot(e2);
    const r2 = e2._pendingAbortRequest;
    if (e2._pendingAbortRequest = void 0, r2._wasAlreadyErroring)
      return r2._reject(t2), void ot(e2);
    b(e2._writableStreamController[v](r2._reason), () => (r2._resolve(), ot(e2), null), (t3) => (r2._reject(t3), ot(e2), null));
  }
  function rt(e2) {
    return void 0 !== e2._closeRequest || void 0 !== e2._inFlightCloseRequest;
  }
  function ot(e2) {
    void 0 !== e2._closeRequest && (e2._closeRequest._reject(e2._storedError), e2._closeRequest = void 0);
    const t2 = e2._writer;
    void 0 !== t2 && St(t2, e2._storedError);
  }
  function nt(e2, t2) {
    const r2 = e2._writer;
    void 0 !== r2 && t2 !== e2._backpressure && (t2 ? function(e3) {
      Rt(e3);
    }(r2) : Et(r2)), e2._backpressure = t2;
  }
  Object.defineProperties(WritableStream.prototype, { abort: { enumerable: true }, close: { enumerable: true }, getWriter: { enumerable: true }, locked: { enumerable: true } }), n(WritableStream.prototype.abort, "abort"), n(WritableStream.prototype.close, "close"), n(WritableStream.prototype.getWriter, "getWriter"), "symbol" == typeof e.toStringTag && Object.defineProperty(WritableStream.prototype, e.toStringTag, { value: "WritableStream", configurable: true });
  var WritableStreamDefaultWriter = class {
    constructor(e2) {
      if ($(e2, 1, "WritableStreamDefaultWriter"), function(e3, t3) {
        if (!Ge(e3))
          throw new TypeError(`${t3} is not a WritableStream.`);
      }(e2, "First parameter"), Xe(e2))
        throw new TypeError("This stream has already been locked for exclusive writing by another writer");
      this._ownerWritableStream = e2, e2._writer = this;
      const t2 = e2._state;
      if ("writable" === t2)
        !rt(e2) && e2._backpressure ? Rt(this) : qt(this), gt(this);
      else if ("erroring" === t2)
        Tt(this, e2._storedError), gt(this);
      else if ("closed" === t2)
        qt(this), gt(r2 = this), vt(r2);
      else {
        const t3 = e2._storedError;
        Tt(this, t3), wt(this, t3);
      }
      var r2;
    }
    get closed() {
      return at(this) ? this._closedPromise : d(mt("closed"));
    }
    get desiredSize() {
      if (!at(this))
        throw mt("desiredSize");
      if (void 0 === this._ownerWritableStream)
        throw yt("desiredSize");
      return function(e2) {
        const t2 = e2._ownerWritableStream, r2 = t2._state;
        if ("errored" === r2 || "erroring" === r2)
          return null;
        if ("closed" === r2)
          return 0;
        return ct(t2._writableStreamController);
      }(this);
    }
    get ready() {
      return at(this) ? this._readyPromise : d(mt("ready"));
    }
    abort(e2) {
      return at(this) ? void 0 === this._ownerWritableStream ? d(yt("abort")) : function(e3, t2) {
        return Je(e3._ownerWritableStream, t2);
      }(this, e2) : d(mt("abort"));
    }
    close() {
      if (!at(this))
        return d(mt("close"));
      const e2 = this._ownerWritableStream;
      return void 0 === e2 ? d(yt("close")) : rt(e2) ? d(new TypeError("Cannot close an already-closing stream")) : Ke(this._ownerWritableStream);
    }
    releaseLock() {
      if (!at(this))
        throw mt("releaseLock");
      void 0 !== this._ownerWritableStream && function(e2) {
        const t2 = e2._ownerWritableStream, r2 = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");
        it(e2, r2), function(e3, t3) {
          "pending" === e3._closedPromiseState ? St(e3, t3) : function(e4, t4) {
            wt(e4, t4);
          }(e3, t3);
        }(e2, r2), t2._writer = void 0, e2._ownerWritableStream = void 0;
      }(this);
    }
    write(e2) {
      return at(this) ? void 0 === this._ownerWritableStream ? d(yt("write to")) : function(e3, t2) {
        const r2 = e3._ownerWritableStream, o2 = r2._writableStreamController, n2 = function(e4, t3) {
          try {
            return e4._strategySizeAlgorithm(t3);
          } catch (t4) {
            return ft(e4, t4), 1;
          }
        }(o2, t2);
        if (r2 !== e3._ownerWritableStream)
          return d(yt("write to"));
        const a2 = r2._state;
        if ("errored" === a2)
          return d(r2._storedError);
        if (rt(r2) || "closed" === a2)
          return d(new TypeError("The stream is closing or closed and cannot be written to"));
        if ("erroring" === a2)
          return d(r2._storedError);
        const i2 = function(e4) {
          return u((t3, r3) => {
            const o3 = { _resolve: t3, _reject: r3 };
            e4._writeRequests.push(o3);
          });
        }(r2);
        return function(e4, t3, r3) {
          try {
            ue(e4, t3, r3);
          } catch (t4) {
            return void ft(e4, t4);
          }
          const o3 = e4._controlledWritableStream;
          if (!rt(o3) && "writable" === o3._state) {
            nt(o3, bt(e4));
          }
          dt(e4);
        }(o2, t2, n2), i2;
      }(this, e2) : d(mt("write"));
    }
  };
  function at(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_ownerWritableStream") && e2 instanceof WritableStreamDefaultWriter);
  }
  function it(e2, t2) {
    "pending" === e2._readyPromiseState ? Ct(e2, t2) : function(e3, t3) {
      Tt(e3, t3);
    }(e2, t2);
  }
  Object.defineProperties(WritableStreamDefaultWriter.prototype, { abort: { enumerable: true }, close: { enumerable: true }, releaseLock: { enumerable: true }, write: { enumerable: true }, closed: { enumerable: true }, desiredSize: { enumerable: true }, ready: { enumerable: true } }), n(WritableStreamDefaultWriter.prototype.abort, "abort"), n(WritableStreamDefaultWriter.prototype.close, "close"), n(WritableStreamDefaultWriter.prototype.releaseLock, "releaseLock"), n(WritableStreamDefaultWriter.prototype.write, "write"), "symbol" == typeof e.toStringTag && Object.defineProperty(WritableStreamDefaultWriter.prototype, e.toStringTag, { value: "WritableStreamDefaultWriter", configurable: true });
  var lt = {};
  var WritableStreamDefaultController = class {
    constructor() {
      throw new TypeError("Illegal constructor");
    }
    get abortReason() {
      if (!st(this))
        throw pt("abortReason");
      return this._abortReason;
    }
    get signal() {
      if (!st(this))
        throw pt("signal");
      if (void 0 === this._abortController)
        throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
      return this._abortController.signal;
    }
    error(e2) {
      if (!st(this))
        throw pt("error");
      "writable" === this._controlledWritableStream._state && ht(this, e2);
    }
    [v](e2) {
      const t2 = this._abortAlgorithm(e2);
      return ut(this), t2;
    }
    [R]() {
      ce(this);
    }
  };
  function st(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_controlledWritableStream") && e2 instanceof WritableStreamDefaultController);
  }
  function ut(e2) {
    e2._writeAlgorithm = void 0, e2._closeAlgorithm = void 0, e2._abortAlgorithm = void 0, e2._strategySizeAlgorithm = void 0;
  }
  function ct(e2) {
    return e2._strategyHWM - e2._queueTotalSize;
  }
  function dt(e2) {
    const t2 = e2._controlledWritableStream;
    if (!e2._started)
      return;
    if (void 0 !== t2._inFlightWriteRequest)
      return;
    if ("erroring" === t2._state)
      return void tt(t2);
    if (0 === e2._queue.length)
      return;
    const r2 = e2._queue.peek().value;
    r2 === lt ? function(e3) {
      const t3 = e3._controlledWritableStream;
      (function(e4) {
        e4._inFlightCloseRequest = e4._closeRequest, e4._closeRequest = void 0;
      })(t3), se(e3);
      const r3 = e3._closeAlgorithm();
      ut(e3), b(r3, () => (function(e4) {
        e4._inFlightCloseRequest._resolve(void 0), e4._inFlightCloseRequest = void 0, "erroring" === e4._state && (e4._storedError = void 0, void 0 !== e4._pendingAbortRequest && (e4._pendingAbortRequest._resolve(), e4._pendingAbortRequest = void 0)), e4._state = "closed";
        const t4 = e4._writer;
        void 0 !== t4 && vt(t4);
      }(t3), null), (e4) => (function(e5, t4) {
        e5._inFlightCloseRequest._reject(t4), e5._inFlightCloseRequest = void 0, void 0 !== e5._pendingAbortRequest && (e5._pendingAbortRequest._reject(t4), e5._pendingAbortRequest = void 0), Ze(e5, t4);
      }(t3, e4), null));
    }(e2) : function(e3, t3) {
      const r3 = e3._controlledWritableStream;
      !function(e4) {
        e4._inFlightWriteRequest = e4._writeRequests.shift();
      }(r3);
      b(e3._writeAlgorithm(t3), () => {
        !function(e4) {
          e4._inFlightWriteRequest._resolve(void 0), e4._inFlightWriteRequest = void 0;
        }(r3);
        const t4 = r3._state;
        if (se(e3), !rt(r3) && "writable" === t4) {
          const t5 = bt(e3);
          nt(r3, t5);
        }
        return dt(e3), null;
      }, (t4) => ("writable" === r3._state && ut(e3), function(e4, t5) {
        e4._inFlightWriteRequest._reject(t5), e4._inFlightWriteRequest = void 0, Ze(e4, t5);
      }(r3, t4), null));
    }(e2, r2);
  }
  function ft(e2, t2) {
    "writable" === e2._controlledWritableStream._state && ht(e2, t2);
  }
  function bt(e2) {
    return ct(e2) <= 0;
  }
  function ht(e2, t2) {
    const r2 = e2._controlledWritableStream;
    ut(e2), et(r2, t2);
  }
  function _t(e2) {
    return new TypeError(`WritableStream.prototype.${e2} can only be used on a WritableStream`);
  }
  function pt(e2) {
    return new TypeError(`WritableStreamDefaultController.prototype.${e2} can only be used on a WritableStreamDefaultController`);
  }
  function mt(e2) {
    return new TypeError(`WritableStreamDefaultWriter.prototype.${e2} can only be used on a WritableStreamDefaultWriter`);
  }
  function yt(e2) {
    return new TypeError("Cannot " + e2 + " a stream using a released writer");
  }
  function gt(e2) {
    e2._closedPromise = u((t2, r2) => {
      e2._closedPromise_resolve = t2, e2._closedPromise_reject = r2, e2._closedPromiseState = "pending";
    });
  }
  function wt(e2, t2) {
    gt(e2), St(e2, t2);
  }
  function St(e2, t2) {
    void 0 !== e2._closedPromise_reject && (m(e2._closedPromise), e2._closedPromise_reject(t2), e2._closedPromise_resolve = void 0, e2._closedPromise_reject = void 0, e2._closedPromiseState = "rejected");
  }
  function vt(e2) {
    void 0 !== e2._closedPromise_resolve && (e2._closedPromise_resolve(void 0), e2._closedPromise_resolve = void 0, e2._closedPromise_reject = void 0, e2._closedPromiseState = "resolved");
  }
  function Rt(e2) {
    e2._readyPromise = u((t2, r2) => {
      e2._readyPromise_resolve = t2, e2._readyPromise_reject = r2;
    }), e2._readyPromiseState = "pending";
  }
  function Tt(e2, t2) {
    Rt(e2), Ct(e2, t2);
  }
  function qt(e2) {
    Rt(e2), Et(e2);
  }
  function Ct(e2, t2) {
    void 0 !== e2._readyPromise_reject && (m(e2._readyPromise), e2._readyPromise_reject(t2), e2._readyPromise_resolve = void 0, e2._readyPromise_reject = void 0, e2._readyPromiseState = "rejected");
  }
  function Et(e2) {
    void 0 !== e2._readyPromise_resolve && (e2._readyPromise_resolve(void 0), e2._readyPromise_resolve = void 0, e2._readyPromise_reject = void 0, e2._readyPromiseState = "fulfilled");
  }
  Object.defineProperties(WritableStreamDefaultController.prototype, { abortReason: { enumerable: true }, signal: { enumerable: true }, error: { enumerable: true } }), "symbol" == typeof e.toStringTag && Object.defineProperty(WritableStreamDefaultController.prototype, e.toStringTag, { value: "WritableStreamDefaultController", configurable: true });
  var Pt = "undefined" != typeof DOMException ? DOMException : void 0;
  var Wt = function(e2) {
    if ("function" != typeof e2 && "object" != typeof e2)
      return false;
    try {
      return new e2(), true;
    } catch (e3) {
      return false;
    }
  }(Pt) ? Pt : function() {
    const e2 = function(e3, t2) {
      this.message = e3 || "", this.name = t2 || "Error", Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
    };
    return e2.prototype = Object.create(Error.prototype), Object.defineProperty(e2.prototype, "constructor", { value: e2, writable: true, configurable: true }), e2;
  }();
  function kt(e2, t2, r2, o2, n2, a2) {
    const i2 = e2.getReader(), l2 = t2.getWriter();
    Vt(e2) && (e2._disturbed = true);
    let s2, _15, g2, w2 = false, S2 = false, v2 = "readable", R2 = "writable", T2 = false, q2 = false;
    const C2 = u((e3) => {
      g2 = e3;
    });
    let E2 = Promise.resolve(void 0);
    return u((P2, W2) => {
      let k2;
      function O2() {
        if (w2)
          return;
        const e3 = u((e4, t3) => {
          !function r3(o3) {
            o3 ? e4() : f(function() {
              if (w2)
                return c(true);
              return f(l2.ready, () => f(i2.read(), (e5) => !!e5.done || (E2 = l2.write(e5.value), m(E2), false)));
            }(), r3, t3);
          }(false);
        });
        m(e3);
      }
      function B2() {
        return v2 = "closed", r2 ? L2() : z2(() => (Ge(t2) && (T2 = rt(t2), R2 = t2._state), T2 || "closed" === R2 ? c(void 0) : "erroring" === R2 || "errored" === R2 ? d(_15) : (T2 = true, l2.close())), false, void 0), null;
      }
      function A2(e3) {
        return w2 || (v2 = "errored", s2 = e3, o2 ? L2(true, e3) : z2(() => l2.abort(e3), true, e3)), null;
      }
      function j2(e3) {
        return S2 || (R2 = "errored", _15 = e3, n2 ? L2(true, e3) : z2(() => i2.cancel(e3), true, e3)), null;
      }
      if (void 0 !== a2 && (k2 = () => {
        const e3 = void 0 !== a2.reason ? a2.reason : new Wt("Aborted", "AbortError"), t3 = [];
        o2 || t3.push(() => "writable" === R2 ? l2.abort(e3) : c(void 0)), n2 || t3.push(() => "readable" === v2 ? i2.cancel(e3) : c(void 0)), z2(() => Promise.all(t3.map((e4) => e4())), true, e3);
      }, a2.aborted ? k2() : a2.addEventListener("abort", k2)), Vt(e2) && (v2 = e2._state, s2 = e2._storedError), Ge(t2) && (R2 = t2._state, _15 = t2._storedError, T2 = rt(t2)), Vt(e2) && Ge(t2) && (q2 = true, g2()), "errored" === v2)
        A2(s2);
      else if ("erroring" === R2 || "errored" === R2)
        j2(_15);
      else if ("closed" === v2)
        B2();
      else if (T2 || "closed" === R2) {
        const e3 = new TypeError("the destination writable stream closed before all data could be piped to it");
        n2 ? L2(true, e3) : z2(() => i2.cancel(e3), true, e3);
      }
      function z2(e3, t3, r3) {
        function o3() {
          return "writable" !== R2 || T2 ? n3() : h(function() {
            let e4;
            return c(function t4() {
              if (e4 !== E2)
                return e4 = E2, p(E2, t4, t4);
            }());
          }(), n3), null;
        }
        function n3() {
          return e3 ? b(e3(), () => F2(t3, r3), (e4) => F2(true, e4)) : F2(t3, r3), null;
        }
        w2 || (w2 = true, q2 ? o3() : h(C2, o3));
      }
      function L2(e3, t3) {
        z2(void 0, e3, t3);
      }
      function F2(e3, t3) {
        return S2 = true, l2.releaseLock(), i2.releaseLock(), void 0 !== a2 && a2.removeEventListener("abort", k2), e3 ? W2(t3) : P2(void 0), null;
      }
      w2 || (b(i2.closed, B2, A2), b(l2.closed, function() {
        return S2 || (R2 = "closed"), null;
      }, j2)), q2 ? O2() : y(() => {
        q2 = true, g2(), O2();
      });
    });
  }
  function Ot(e2, t2) {
    return function(e3) {
      try {
        return e3.getReader({ mode: "byob" }).releaseLock(), true;
      } catch (e4) {
        return false;
      }
    }(e2) ? function(e3) {
      let t3, r2, o2, n2, a2, i2 = e3.getReader(), l2 = false, s2 = false, d2 = false, f2 = false, h2 = false, p2 = false;
      const m2 = u((e4) => {
        a2 = e4;
      });
      function y2(e4) {
        _(e4.closed, (t4) => (e4 !== i2 || (o2.error(t4), n2.error(t4), h2 && p2 || a2(void 0)), null));
      }
      function g2() {
        l2 && (i2.releaseLock(), i2 = e3.getReader(), y2(i2), l2 = false), b(i2.read(), (e4) => {
          var t4, r3;
          if (d2 = false, f2 = false, e4.done)
            return h2 || o2.close(), p2 || n2.close(), null === (t4 = o2.byobRequest) || void 0 === t4 || t4.respond(0), null === (r3 = n2.byobRequest) || void 0 === r3 || r3.respond(0), h2 && p2 || a2(void 0), null;
          const l3 = e4.value, u2 = l3;
          let c2 = l3;
          if (!h2 && !p2)
            try {
              c2 = le(l3);
            } catch (e5) {
              return o2.error(e5), n2.error(e5), a2(i2.cancel(e5)), null;
            }
          return h2 || o2.enqueue(u2), p2 || n2.enqueue(c2), s2 = false, d2 ? S2() : f2 && v2(), null;
        }, () => (s2 = false, null));
      }
      function w2(t4, r3) {
        l2 || (i2.releaseLock(), i2 = e3.getReader({ mode: "byob" }), y2(i2), l2 = true);
        const u2 = r3 ? n2 : o2, c2 = r3 ? o2 : n2;
        b(i2.read(t4), (e4) => {
          var t5;
          d2 = false, f2 = false;
          const o3 = r3 ? p2 : h2, n3 = r3 ? h2 : p2;
          if (e4.done) {
            o3 || u2.close(), n3 || c2.close();
            const r4 = e4.value;
            return void 0 !== r4 && (o3 || u2.byobRequest.respondWithNewView(r4), n3 || null === (t5 = c2.byobRequest) || void 0 === t5 || t5.respond(0)), o3 && n3 || a2(void 0), null;
          }
          const l3 = e4.value;
          if (n3)
            o3 || u2.byobRequest.respondWithNewView(l3);
          else {
            let e5;
            try {
              e5 = le(l3);
            } catch (e6) {
              return u2.error(e6), c2.error(e6), a2(i2.cancel(e6)), null;
            }
            o3 || u2.byobRequest.respondWithNewView(l3), c2.enqueue(e5);
          }
          return s2 = false, d2 ? S2() : f2 && v2(), null;
        }, () => (s2 = false, null));
      }
      function S2() {
        if (s2)
          return d2 = true, c(void 0);
        s2 = true;
        const e4 = o2.byobRequest;
        return null === e4 ? g2() : w2(e4.view, false), c(void 0);
      }
      function v2() {
        if (s2)
          return f2 = true, c(void 0);
        s2 = true;
        const e4 = n2.byobRequest;
        return null === e4 ? g2() : w2(e4.view, true), c(void 0);
      }
      function R2(e4) {
        if (h2 = true, t3 = e4, p2) {
          const e5 = [t3, r2], o3 = i2.cancel(e5);
          a2(o3);
        }
        return m2;
      }
      function T2(e4) {
        if (p2 = true, r2 = e4, h2) {
          const e5 = [t3, r2], o3 = i2.cancel(e5);
          a2(o3);
        }
        return m2;
      }
      const q2 = new ReadableStream({ type: "bytes", start(e4) {
        o2 = e4;
      }, pull: S2, cancel: R2 }), C2 = new ReadableStream({ type: "bytes", start(e4) {
        n2 = e4;
      }, pull: v2, cancel: T2 });
      return y2(i2), [q2, C2];
    }(e2) : function(e3, t3) {
      const r2 = e3.getReader();
      let o2, n2, a2, i2, l2, s2 = false, d2 = false, f2 = false, h2 = false;
      const p2 = u((e4) => {
        l2 = e4;
      });
      function m2() {
        return s2 ? (d2 = true, c(void 0)) : (s2 = true, b(r2.read(), (e4) => {
          if (d2 = false, e4.done)
            return f2 || a2.close(), h2 || i2.close(), f2 && h2 || l2(void 0), null;
          const t4 = e4.value, r3 = t4, o3 = t4;
          return f2 || a2.enqueue(r3), h2 || i2.enqueue(o3), s2 = false, d2 && m2(), null;
        }, () => (s2 = false, null)), c(void 0));
      }
      function y2(e4) {
        if (f2 = true, o2 = e4, h2) {
          const e5 = [o2, n2], t4 = r2.cancel(e5);
          l2(t4);
        }
        return p2;
      }
      function g2(e4) {
        if (h2 = true, n2 = e4, f2) {
          const e5 = [o2, n2], t4 = r2.cancel(e5);
          l2(t4);
        }
        return p2;
      }
      const w2 = new ReadableStream({ start(e4) {
        a2 = e4;
      }, pull: m2, cancel: y2 }), S2 = new ReadableStream({ start(e4) {
        i2 = e4;
      }, pull: m2, cancel: g2 });
      return _(r2.closed, (e4) => (a2.error(e4), i2.error(e4), f2 && h2 || l2(void 0), null)), [w2, S2];
    }(e2);
  }
  var ReadableStreamDefaultController = class {
    constructor() {
      throw new TypeError("Illegal constructor");
    }
    get desiredSize() {
      if (!Bt(this))
        throw Dt("desiredSize");
      return Lt(this);
    }
    close() {
      if (!Bt(this))
        throw Dt("close");
      if (!Ft(this))
        throw new TypeError("The stream is not in a state that permits close");
      !function(e2) {
        if (!Ft(e2))
          return;
        const t2 = e2._controlledReadableStream;
        e2._closeRequested = true, 0 === e2._queue.length && (jt(e2), Xt(t2));
      }(this);
    }
    enqueue(e2) {
      if (!Bt(this))
        throw Dt("enqueue");
      if (!Ft(this))
        throw new TypeError("The stream is not in a state that permits enqueue");
      return function(e3, t2) {
        if (!Ft(e3))
          return;
        const r2 = e3._controlledReadableStream;
        if (Ut(r2) && X(r2) > 0)
          G(r2, t2, false);
        else {
          let r3;
          try {
            r3 = e3._strategySizeAlgorithm(t2);
          } catch (t3) {
            throw zt(e3, t3), t3;
          }
          try {
            ue(e3, t2, r3);
          } catch (t3) {
            throw zt(e3, t3), t3;
          }
        }
        At(e3);
      }(this, e2);
    }
    error(e2) {
      if (!Bt(this))
        throw Dt("error");
      zt(this, e2);
    }
    [T](e2) {
      ce(this);
      const t2 = this._cancelAlgorithm(e2);
      return jt(this), t2;
    }
    [q](e2) {
      const t2 = this._controlledReadableStream;
      if (this._queue.length > 0) {
        const r2 = se(this);
        this._closeRequested && 0 === this._queue.length ? (jt(this), Xt(t2)) : At(this), e2._chunkSteps(r2);
      } else
        U(t2, e2), At(this);
    }
    [C]() {
    }
  };
  function Bt(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_controlledReadableStream") && e2 instanceof ReadableStreamDefaultController);
  }
  function At(e2) {
    const t2 = function(e3) {
      const t3 = e3._controlledReadableStream;
      if (!Ft(e3))
        return false;
      if (!e3._started)
        return false;
      if (Ut(t3) && X(t3) > 0)
        return true;
      if (Lt(e3) > 0)
        return true;
      return false;
    }(e2);
    if (!t2)
      return;
    if (e2._pulling)
      return void (e2._pullAgain = true);
    e2._pulling = true;
    b(e2._pullAlgorithm(), () => (e2._pulling = false, e2._pullAgain && (e2._pullAgain = false, At(e2)), null), (t3) => (zt(e2, t3), null));
  }
  function jt(e2) {
    e2._pullAlgorithm = void 0, e2._cancelAlgorithm = void 0, e2._strategySizeAlgorithm = void 0;
  }
  function zt(e2, t2) {
    const r2 = e2._controlledReadableStream;
    "readable" === r2._state && (ce(e2), jt(e2), Jt(r2, t2));
  }
  function Lt(e2) {
    const t2 = e2._controlledReadableStream._state;
    return "errored" === t2 ? null : "closed" === t2 ? 0 : e2._strategyHWM - e2._queueTotalSize;
  }
  function Ft(e2) {
    return !e2._closeRequested && "readable" === e2._controlledReadableStream._state;
  }
  function It(e2, t2, r2, o2) {
    const n2 = Object.create(ReadableStreamDefaultController.prototype);
    let a2, i2, l2;
    a2 = void 0 !== t2.start ? () => t2.start(n2) : () => {
    }, i2 = void 0 !== t2.pull ? () => t2.pull(n2) : () => c(void 0), l2 = void 0 !== t2.cancel ? (e3) => t2.cancel(e3) : () => c(void 0), function(e3, t3, r3, o3, n3, a3, i3) {
      t3._controlledReadableStream = e3, t3._queue = void 0, t3._queueTotalSize = void 0, ce(t3), t3._started = false, t3._closeRequested = false, t3._pullAgain = false, t3._pulling = false, t3._strategySizeAlgorithm = i3, t3._strategyHWM = a3, t3._pullAlgorithm = o3, t3._cancelAlgorithm = n3, e3._readableStreamController = t3, b(c(r3()), () => (t3._started = true, At(t3), null), (e4) => (zt(t3, e4), null));
    }(e2, n2, a2, i2, l2, r2, o2);
  }
  function Dt(e2) {
    return new TypeError(`ReadableStreamDefaultController.prototype.${e2} can only be used on a ReadableStreamDefaultController`);
  }
  function $t(e2, t2, r2) {
    return I(e2, r2), (r3) => w(e2, t2, [r3]);
  }
  function Mt(e2, t2, r2) {
    return I(e2, r2), (r3) => w(e2, t2, [r3]);
  }
  function Yt(e2, t2, r2) {
    return I(e2, r2), (r3) => g(e2, t2, [r3]);
  }
  function Qt(e2, t2) {
    if ("bytes" !== (e2 = `${e2}`))
      throw new TypeError(`${t2} '${e2}' is not a valid enumeration value for ReadableStreamType`);
    return e2;
  }
  function Nt(e2, t2) {
    if ("byob" !== (e2 = `${e2}`))
      throw new TypeError(`${t2} '${e2}' is not a valid enumeration value for ReadableStreamReaderMode`);
    return e2;
  }
  function Ht(e2, t2) {
    F(e2, t2);
    const r2 = null == e2 ? void 0 : e2.preventAbort, o2 = null == e2 ? void 0 : e2.preventCancel, n2 = null == e2 ? void 0 : e2.preventClose, a2 = null == e2 ? void 0 : e2.signal;
    return void 0 !== a2 && function(e3, t3) {
      if (!function(e4) {
        if ("object" != typeof e4 || null === e4)
          return false;
        try {
          return "boolean" == typeof e4.aborted;
        } catch (e5) {
          return false;
        }
      }(e3))
        throw new TypeError(`${t3} is not an AbortSignal.`);
    }(a2, `${t2} has member 'signal' that`), { preventAbort: Boolean(r2), preventCancel: Boolean(o2), preventClose: Boolean(n2), signal: a2 };
  }
  function xt(e2, t2) {
    F(e2, t2);
    const r2 = null == e2 ? void 0 : e2.readable;
    M(r2, "readable", "ReadableWritablePair"), function(e3, t3) {
      if (!H(e3))
        throw new TypeError(`${t3} is not a ReadableStream.`);
    }(r2, `${t2} has member 'readable' that`);
    const o2 = null == e2 ? void 0 : e2.writable;
    return M(o2, "writable", "ReadableWritablePair"), function(e3, t3) {
      if (!x(e3))
        throw new TypeError(`${t3} is not a WritableStream.`);
    }(o2, `${t2} has member 'writable' that`), { readable: r2, writable: o2 };
  }
  Object.defineProperties(ReadableStreamDefaultController.prototype, { close: { enumerable: true }, enqueue: { enumerable: true }, error: { enumerable: true }, desiredSize: { enumerable: true } }), n(ReadableStreamDefaultController.prototype.close, "close"), n(ReadableStreamDefaultController.prototype.enqueue, "enqueue"), n(ReadableStreamDefaultController.prototype.error, "error"), "symbol" == typeof e.toStringTag && Object.defineProperty(ReadableStreamDefaultController.prototype, e.toStringTag, { value: "ReadableStreamDefaultController", configurable: true });
  var ReadableStream = class {
    constructor(e2 = {}, t2 = {}) {
      void 0 === e2 ? e2 = null : D(e2, "First parameter");
      const r2 = Ye(t2, "Second parameter"), o2 = function(e3, t3) {
        F(e3, t3);
        const r3 = e3, o3 = null == r3 ? void 0 : r3.autoAllocateChunkSize, n3 = null == r3 ? void 0 : r3.cancel, a2 = null == r3 ? void 0 : r3.pull, i2 = null == r3 ? void 0 : r3.start, l2 = null == r3 ? void 0 : r3.type;
        return { autoAllocateChunkSize: void 0 === o3 ? void 0 : N(o3, `${t3} has member 'autoAllocateChunkSize' that`), cancel: void 0 === n3 ? void 0 : $t(n3, r3, `${t3} has member 'cancel' that`), pull: void 0 === a2 ? void 0 : Mt(a2, r3, `${t3} has member 'pull' that`), start: void 0 === i2 ? void 0 : Yt(i2, r3, `${t3} has member 'start' that`), type: void 0 === l2 ? void 0 : Qt(l2, `${t3} has member 'type' that`) };
      }(e2, "First parameter");
      var n2;
      if ((n2 = this)._state = "readable", n2._reader = void 0, n2._storedError = void 0, n2._disturbed = false, "bytes" === o2.type) {
        if (void 0 !== r2.size)
          throw new RangeError("The strategy for a byte stream cannot have a size function");
        Oe(this, o2, $e(r2, 0));
      } else {
        const e3 = Me(r2);
        It(this, o2, $e(r2, 1), e3);
      }
    }
    get locked() {
      if (!Vt(this))
        throw Kt("locked");
      return Ut(this);
    }
    cancel(e2) {
      return Vt(this) ? Ut(this) ? d(new TypeError("Cannot cancel a stream that already has a reader")) : Gt(this, e2) : d(Kt("cancel"));
    }
    getReader(e2) {
      if (!Vt(this))
        throw Kt("getReader");
      return void 0 === function(e3, t2) {
        F(e3, t2);
        const r2 = null == e3 ? void 0 : e3.mode;
        return { mode: void 0 === r2 ? void 0 : Nt(r2, `${t2} has member 'mode' that`) };
      }(e2, "First parameter").mode ? new ReadableStreamDefaultReader(this) : function(e3) {
        return new ReadableStreamBYOBReader(e3);
      }(this);
    }
    pipeThrough(e2, t2 = {}) {
      if (!H(this))
        throw Kt("pipeThrough");
      $(e2, 1, "pipeThrough");
      const r2 = xt(e2, "First parameter"), o2 = Ht(t2, "Second parameter");
      if (this.locked)
        throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
      if (r2.writable.locked)
        throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
      return m(kt(this, r2.writable, o2.preventClose, o2.preventAbort, o2.preventCancel, o2.signal)), r2.readable;
    }
    pipeTo(e2, t2 = {}) {
      if (!H(this))
        return d(Kt("pipeTo"));
      if (void 0 === e2)
        return d("Parameter 1 is required in 'pipeTo'.");
      if (!x(e2))
        return d(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));
      let r2;
      try {
        r2 = Ht(t2, "Second parameter");
      } catch (e3) {
        return d(e3);
      }
      return this.locked ? d(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")) : e2.locked ? d(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")) : kt(this, e2, r2.preventClose, r2.preventAbort, r2.preventCancel, r2.signal);
    }
    tee() {
      if (!H(this))
        throw Kt("tee");
      if (this.locked)
        throw new TypeError("Cannot tee a stream that already has a reader");
      return Ot(this);
    }
    values(e2) {
      if (!H(this))
        throw Kt("values");
      return function(e3, t2) {
        const r2 = e3.getReader(), o2 = new te(r2, t2), n2 = Object.create(re);
        return n2._asyncIteratorImpl = o2, n2;
      }(this, function(e3, t2) {
        F(e3, t2);
        const r2 = null == e3 ? void 0 : e3.preventCancel;
        return { preventCancel: Boolean(r2) };
      }(e2, "First parameter").preventCancel);
    }
  };
  function Vt(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_readableStreamController") && e2 instanceof ReadableStream);
  }
  function Ut(e2) {
    return void 0 !== e2._reader;
  }
  function Gt(e2, r2) {
    if (e2._disturbed = true, "closed" === e2._state)
      return c(void 0);
    if ("errored" === e2._state)
      return d(e2._storedError);
    Xt(e2);
    const o2 = e2._reader;
    if (void 0 !== o2 && Fe(o2)) {
      const e3 = o2._readIntoRequests;
      o2._readIntoRequests = new S(), e3.forEach((e4) => {
        e4._closeSteps(void 0);
      });
    }
    return p(e2._readableStreamController[T](r2), t);
  }
  function Xt(e2) {
    e2._state = "closed";
    const t2 = e2._reader;
    if (void 0 !== t2 && (j(t2), K(t2))) {
      const e3 = t2._readRequests;
      t2._readRequests = new S(), e3.forEach((e4) => {
        e4._closeSteps();
      });
    }
  }
  function Jt(e2, t2) {
    e2._state = "errored", e2._storedError = t2;
    const r2 = e2._reader;
    void 0 !== r2 && (A(r2, t2), K(r2) ? Z(r2, t2) : Ie(r2, t2));
  }
  function Kt(e2) {
    return new TypeError(`ReadableStream.prototype.${e2} can only be used on a ReadableStream`);
  }
  function Zt(e2, t2) {
    F(e2, t2);
    const r2 = null == e2 ? void 0 : e2.highWaterMark;
    return M(r2, "highWaterMark", "QueuingStrategyInit"), { highWaterMark: Y(r2) };
  }
  Object.defineProperties(ReadableStream.prototype, { cancel: { enumerable: true }, getReader: { enumerable: true }, pipeThrough: { enumerable: true }, pipeTo: { enumerable: true }, tee: { enumerable: true }, values: { enumerable: true }, locked: { enumerable: true } }), n(ReadableStream.prototype.cancel, "cancel"), n(ReadableStream.prototype.getReader, "getReader"), n(ReadableStream.prototype.pipeThrough, "pipeThrough"), n(ReadableStream.prototype.pipeTo, "pipeTo"), n(ReadableStream.prototype.tee, "tee"), n(ReadableStream.prototype.values, "values"), "symbol" == typeof e.toStringTag && Object.defineProperty(ReadableStream.prototype, e.toStringTag, { value: "ReadableStream", configurable: true }), "symbol" == typeof e.asyncIterator && Object.defineProperty(ReadableStream.prototype, e.asyncIterator, { value: ReadableStream.prototype.values, writable: true, configurable: true });
  var er = (e2) => e2.byteLength;
  n(er, "size");
  var ByteLengthQueuingStrategy = class {
    constructor(e2) {
      $(e2, 1, "ByteLengthQueuingStrategy"), e2 = Zt(e2, "First parameter"), this._byteLengthQueuingStrategyHighWaterMark = e2.highWaterMark;
    }
    get highWaterMark() {
      if (!rr(this))
        throw tr("highWaterMark");
      return this._byteLengthQueuingStrategyHighWaterMark;
    }
    get size() {
      if (!rr(this))
        throw tr("size");
      return er;
    }
  };
  function tr(e2) {
    return new TypeError(`ByteLengthQueuingStrategy.prototype.${e2} can only be used on a ByteLengthQueuingStrategy`);
  }
  function rr(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_byteLengthQueuingStrategyHighWaterMark") && e2 instanceof ByteLengthQueuingStrategy);
  }
  Object.defineProperties(ByteLengthQueuingStrategy.prototype, { highWaterMark: { enumerable: true }, size: { enumerable: true } }), "symbol" == typeof e.toStringTag && Object.defineProperty(ByteLengthQueuingStrategy.prototype, e.toStringTag, { value: "ByteLengthQueuingStrategy", configurable: true });
  var or = () => 1;
  n(or, "size");
  var CountQueuingStrategy = class {
    constructor(e2) {
      $(e2, 1, "CountQueuingStrategy"), e2 = Zt(e2, "First parameter"), this._countQueuingStrategyHighWaterMark = e2.highWaterMark;
    }
    get highWaterMark() {
      if (!ar(this))
        throw nr("highWaterMark");
      return this._countQueuingStrategyHighWaterMark;
    }
    get size() {
      if (!ar(this))
        throw nr("size");
      return or;
    }
  };
  function nr(e2) {
    return new TypeError(`CountQueuingStrategy.prototype.${e2} can only be used on a CountQueuingStrategy`);
  }
  function ar(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_countQueuingStrategyHighWaterMark") && e2 instanceof CountQueuingStrategy);
  }
  function ir(e2, t2, r2) {
    return I(e2, r2), (r3) => w(e2, t2, [r3]);
  }
  function lr(e2, t2, r2) {
    return I(e2, r2), (r3) => g(e2, t2, [r3]);
  }
  function sr(e2, t2, r2) {
    return I(e2, r2), (r3, o2) => w(e2, t2, [r3, o2]);
  }
  Object.defineProperties(CountQueuingStrategy.prototype, { highWaterMark: { enumerable: true }, size: { enumerable: true } }), "symbol" == typeof e.toStringTag && Object.defineProperty(CountQueuingStrategy.prototype, e.toStringTag, { value: "CountQueuingStrategy", configurable: true });
  var TransformStream = class {
    constructor(e2 = {}, t2 = {}, r2 = {}) {
      void 0 === e2 && (e2 = null);
      const o2 = Ye(t2, "Second parameter"), n2 = Ye(r2, "Third parameter"), a2 = function(e3, t3) {
        F(e3, t3);
        const r3 = null == e3 ? void 0 : e3.flush, o3 = null == e3 ? void 0 : e3.readableType, n3 = null == e3 ? void 0 : e3.start, a3 = null == e3 ? void 0 : e3.transform, i3 = null == e3 ? void 0 : e3.writableType;
        return { flush: void 0 === r3 ? void 0 : ir(r3, e3, `${t3} has member 'flush' that`), readableType: o3, start: void 0 === n3 ? void 0 : lr(n3, e3, `${t3} has member 'start' that`), transform: void 0 === a3 ? void 0 : sr(a3, e3, `${t3} has member 'transform' that`), writableType: i3 };
      }(e2, "First parameter");
      if (void 0 !== a2.readableType)
        throw new RangeError("Invalid readableType specified");
      if (void 0 !== a2.writableType)
        throw new RangeError("Invalid writableType specified");
      const i2 = $e(n2, 0), l2 = Me(n2), s2 = $e(o2, 1), f2 = Me(o2);
      let b2;
      !function(e3, t3, r3, o3, n3, a3) {
        function i3() {
          return t3;
        }
        function l3(t4) {
          return function(e4, t5) {
            const r4 = e4._transformStreamController;
            if (e4._backpressure) {
              return p(e4._backpressureChangePromise, () => {
                if ("erroring" === (Ge(e4._writable) ? e4._writable._state : e4._writableState))
                  throw Ge(e4._writable) ? e4._writable._storedError : e4._writableStoredError;
                return pr(r4, t5);
              });
            }
            return pr(r4, t5);
          }(e3, t4);
        }
        function s3(t4) {
          return function(e4, t5) {
            return cr(e4, t5), c(void 0);
          }(e3, t4);
        }
        function u2() {
          return function(e4) {
            const t4 = e4._transformStreamController, r4 = t4._flushAlgorithm();
            return hr(t4), p(r4, () => {
              if ("errored" === e4._readableState)
                throw e4._readableStoredError;
              gr(e4) && wr(e4);
            }, (t5) => {
              throw cr(e4, t5), e4._readableStoredError;
            });
          }(e3);
        }
        function d2() {
          return function(e4) {
            return fr(e4, false), e4._backpressureChangePromise;
          }(e3);
        }
        function f3(t4) {
          return dr(e3, t4), c(void 0);
        }
        e3._writableState = "writable", e3._writableStoredError = void 0, e3._writableHasInFlightOperation = false, e3._writableStarted = false, e3._writable = function(e4, t4, r4, o4, n4, a4, i4) {
          return new WritableStream({ start(r5) {
            e4._writableController = r5;
            try {
              const t5 = r5.signal;
              void 0 !== t5 && t5.addEventListener("abort", () => {
                "writable" === e4._writableState && (e4._writableState = "erroring", t5.reason && (e4._writableStoredError = t5.reason));
              });
            } catch (e5) {
            }
            return p(t4(), () => (e4._writableStarted = true, Cr(e4), null), (t5) => {
              throw e4._writableStarted = true, Rr(e4, t5), t5;
            });
          }, write: (t5) => (function(e5) {
            e5._writableHasInFlightOperation = true;
          }(e4), p(r4(t5), () => (function(e5) {
            e5._writableHasInFlightOperation = false;
          }(e4), Cr(e4), null), (t6) => {
            throw function(e5, t7) {
              e5._writableHasInFlightOperation = false, Rr(e5, t7);
            }(e4, t6), t6;
          })), close: () => (function(e5) {
            e5._writableHasInFlightOperation = true;
          }(e4), p(o4(), () => (function(e5) {
            e5._writableHasInFlightOperation = false;
            "erroring" === e5._writableState && (e5._writableStoredError = void 0);
            e5._writableState = "closed";
          }(e4), null), (t5) => {
            throw function(e5, t6) {
              e5._writableHasInFlightOperation = false, e5._writableState, Rr(e5, t6);
            }(e4, t5), t5;
          })), abort: (t5) => (e4._writableState = "errored", e4._writableStoredError = t5, n4(t5)) }, { highWaterMark: a4, size: i4 });
        }(e3, i3, l3, u2, s3, r3, o3), e3._readableState = "readable", e3._readableStoredError = void 0, e3._readableCloseRequested = false, e3._readablePulling = false, e3._readable = function(e4, t4, r4, o4, n4, a4) {
          return new ReadableStream({ start: (r5) => (e4._readableController = r5, t4().catch((t5) => {
            Sr(e4, t5);
          })), pull: () => (e4._readablePulling = true, r4().catch((t5) => {
            Sr(e4, t5);
          })), cancel: (t5) => (e4._readableState = "closed", o4(t5)) }, { highWaterMark: n4, size: a4 });
        }(e3, i3, d2, f3, n3, a3), e3._backpressure = void 0, e3._backpressureChangePromise = void 0, e3._backpressureChangePromise_resolve = void 0, fr(e3, true), e3._transformStreamController = void 0;
      }(this, u((e3) => {
        b2 = e3;
      }), s2, f2, i2, l2), function(e3, t3) {
        const r3 = Object.create(TransformStreamDefaultController.prototype);
        let o3, n3;
        o3 = void 0 !== t3.transform ? (e4) => t3.transform(e4, r3) : (e4) => {
          try {
            return _r(r3, e4), c(void 0);
          } catch (e5) {
            return d(e5);
          }
        };
        n3 = void 0 !== t3.flush ? () => t3.flush(r3) : () => c(void 0);
        !function(e4, t4, r4, o4) {
          t4._controlledTransformStream = e4, e4._transformStreamController = t4, t4._transformAlgorithm = r4, t4._flushAlgorithm = o4;
        }(e3, r3, o3, n3);
      }(this, a2), void 0 !== a2.start ? b2(a2.start(this._transformStreamController)) : b2(void 0);
    }
    get readable() {
      if (!ur(this))
        throw yr("readable");
      return this._readable;
    }
    get writable() {
      if (!ur(this))
        throw yr("writable");
      return this._writable;
    }
  };
  function ur(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_transformStreamController") && e2 instanceof TransformStream);
  }
  function cr(e2, t2) {
    Sr(e2, t2), dr(e2, t2);
  }
  function dr(e2, t2) {
    hr(e2._transformStreamController), function(e3, t3) {
      e3._writableController.error(t3);
      "writable" === e3._writableState && Tr(e3, t3);
    }(e2, t2), e2._backpressure && fr(e2, false);
  }
  function fr(e2, t2) {
    void 0 !== e2._backpressureChangePromise && e2._backpressureChangePromise_resolve(), e2._backpressureChangePromise = u((t3) => {
      e2._backpressureChangePromise_resolve = t3;
    }), e2._backpressure = t2;
  }
  Object.defineProperties(TransformStream.prototype, { readable: { enumerable: true }, writable: { enumerable: true } }), "symbol" == typeof e.toStringTag && Object.defineProperty(TransformStream.prototype, e.toStringTag, { value: "TransformStream", configurable: true });
  var TransformStreamDefaultController = class {
    constructor() {
      throw new TypeError("Illegal constructor");
    }
    get desiredSize() {
      if (!br(this))
        throw mr("desiredSize");
      return vr(this._controlledTransformStream);
    }
    enqueue(e2) {
      if (!br(this))
        throw mr("enqueue");
      _r(this, e2);
    }
    error(e2) {
      if (!br(this))
        throw mr("error");
      var t2;
      t2 = e2, cr(this._controlledTransformStream, t2);
    }
    terminate() {
      if (!br(this))
        throw mr("terminate");
      !function(e2) {
        const t2 = e2._controlledTransformStream;
        gr(t2) && wr(t2);
        const r2 = new TypeError("TransformStream terminated");
        dr(t2, r2);
      }(this);
    }
  };
  function br(e2) {
    return !!r(e2) && (!!Object.prototype.hasOwnProperty.call(e2, "_controlledTransformStream") && e2 instanceof TransformStreamDefaultController);
  }
  function hr(e2) {
    e2._transformAlgorithm = void 0, e2._flushAlgorithm = void 0;
  }
  function _r(e2, t2) {
    const r2 = e2._controlledTransformStream;
    if (!gr(r2))
      throw new TypeError("Readable side is not in a state that permits enqueue");
    try {
      !function(e3, t3) {
        e3._readablePulling = false;
        try {
          e3._readableController.enqueue(t3);
        } catch (t4) {
          throw Sr(e3, t4), t4;
        }
      }(r2, t2);
    } catch (e3) {
      throw dr(r2, e3), r2._readableStoredError;
    }
    const o2 = function(e3) {
      return !function(e4) {
        if (!gr(e4))
          return false;
        if (e4._readablePulling)
          return true;
        if (vr(e4) > 0)
          return true;
        return false;
      }(e3);
    }(r2);
    o2 !== r2._backpressure && fr(r2, true);
  }
  function pr(e2, t2) {
    return p(e2._transformAlgorithm(t2), void 0, (t3) => {
      throw cr(e2._controlledTransformStream, t3), t3;
    });
  }
  function mr(e2) {
    return new TypeError(`TransformStreamDefaultController.prototype.${e2} can only be used on a TransformStreamDefaultController`);
  }
  function yr(e2) {
    return new TypeError(`TransformStream.prototype.${e2} can only be used on a TransformStream`);
  }
  function gr(e2) {
    return !e2._readableCloseRequested && "readable" === e2._readableState;
  }
  function wr(e2) {
    e2._readableState = "closed", e2._readableCloseRequested = true, e2._readableController.close();
  }
  function Sr(e2, t2) {
    "readable" === e2._readableState && (e2._readableState = "errored", e2._readableStoredError = t2), e2._readableController.error(t2);
  }
  function vr(e2) {
    return e2._readableController.desiredSize;
  }
  function Rr(e2, t2) {
    "writable" !== e2._writableState ? qr(e2) : Tr(e2, t2);
  }
  function Tr(e2, t2) {
    e2._writableState = "erroring", e2._writableStoredError = t2, !function(e3) {
      return e3._writableHasInFlightOperation;
    }(e2) && e2._writableStarted && qr(e2);
  }
  function qr(e2) {
    e2._writableState = "errored";
  }
  function Cr(e2) {
    "erroring" === e2._writableState && qr(e2);
  }
  Object.defineProperties(TransformStreamDefaultController.prototype, { enqueue: { enumerable: true }, error: { enumerable: true }, terminate: { enumerable: true }, desiredSize: { enumerable: true } }), n(TransformStreamDefaultController.prototype.enqueue, "enqueue"), n(TransformStreamDefaultController.prototype.error, "error"), n(TransformStreamDefaultController.prototype.terminate, "terminate"), "symbol" == typeof e.toStringTag && Object.defineProperty(TransformStreamDefaultController.prototype, e.toStringTag, { value: "TransformStreamDefaultController", configurable: true });

  // node_modules/@yume-chan/stream-extra/esm/stream.js
  var AbortController2;
  ({ AbortController: AbortController2 } = globalThis);

  // node_modules/@yume-chan/stream-extra/node_modules/@yume-chan/struct/esm/basic/struct-value.js
  var STRUCT_VALUE_SYMBOL = Symbol("struct-value");

  // node_modules/@yume-chan/stream-extra/node_modules/@yume-chan/dataview-bigint-polyfill/esm/pure.js
  var BigInt32 = BigInt(32);
  function getBigInt64(dataView, byteOffset, littleEndian) {
    const littleEndianMask = Number(!!littleEndian);
    const bigEndianMask = Number(!littleEndian);
    return BigInt(dataView.getInt32(byteOffset, littleEndian) * bigEndianMask + dataView.getInt32(byteOffset + 4, littleEndian) * littleEndianMask) << BigInt32 | BigInt(dataView.getUint32(byteOffset, littleEndian) * littleEndianMask + dataView.getUint32(byteOffset + 4, littleEndian) * bigEndianMask);
  }
  function getBigUint64(dataView, byteOffset, littleEndian) {
    const a2 = dataView.getUint32(byteOffset, littleEndian);
    const b2 = dataView.getUint32(byteOffset + 4, littleEndian);
    const littleEndianMask = Number(!!littleEndian);
    const bigEndianMask = Number(!littleEndian);
    return BigInt(a2 * bigEndianMask + b2 * littleEndianMask) << BigInt32 | BigInt(a2 * littleEndianMask + b2 * bigEndianMask);
  }
  function setBigInt64(dataView, byteOffset, value, littleEndian) {
    const hi = Number(value >> BigInt32);
    const lo = Number(value & BigInt(4294967295));
    if (littleEndian) {
      dataView.setInt32(byteOffset + 4, hi, littleEndian);
      dataView.setUint32(byteOffset, lo, littleEndian);
    } else {
      dataView.setInt32(byteOffset, hi, littleEndian);
      dataView.setUint32(byteOffset + 4, lo, littleEndian);
    }
  }
  function setBigUint64(dataView, byteOffset, value, littleEndian) {
    const hi = Number(value >> BigInt32);
    const lo = Number(value & BigInt(4294967295));
    if (littleEndian) {
      dataView.setUint32(byteOffset + 4, hi, littleEndian);
      dataView.setUint32(byteOffset, lo, littleEndian);
    } else {
      dataView.setUint32(byteOffset, hi, littleEndian);
      dataView.setUint32(byteOffset + 4, lo, littleEndian);
    }
  }

  // node_modules/@yume-chan/stream-extra/node_modules/@yume-chan/dataview-bigint-polyfill/esm/fallback.js
  var getBigInt642 = "getBigInt64" in DataView.prototype ? (dataView, byteOffset, littleEndian) => dataView.getBigInt64(byteOffset, littleEndian) : getBigInt64;
  var getBigUint642 = "getBigUint64" in DataView.prototype ? (dataView, byteOffset, littleEndian) => dataView.getBigUint64(byteOffset, littleEndian) : getBigUint64;
  var setBigInt642 = "setBigInt64" in DataView.prototype ? (dataView, byteOffset, value, littleEndian) => dataView.setBigInt64(byteOffset, value, littleEndian) : setBigInt64;
  var setBigUint642 = "setBigUint64" in DataView.prototype ? (dataView, byteOffset, value, littleEndian) => dataView.setBigUint64(byteOffset, value, littleEndian) : setBigUint64;

  // node_modules/@yume-chan/stream-extra/node_modules/@yume-chan/struct/esm/types/bigint.js
  var _BigIntFieldType = class {
    TTypeScriptType;
    size;
    getter;
    setter;
    constructor(size, getter, setter) {
      this.size = size;
      this.getter = getter;
      this.setter = setter;
    }
  };
  var BigIntFieldType = _BigIntFieldType;
  __publicField(BigIntFieldType, "Int64", new _BigIntFieldType(8, getBigInt642, setBigInt642));
  __publicField(BigIntFieldType, "Uint64", new _BigIntFieldType(8, getBigUint642, setBigUint642));

  // node_modules/@yume-chan/stream-extra/node_modules/@yume-chan/struct/esm/utils.js
  var Utf8Encoder = new TextEncoder();
  var Utf8Decoder = new TextDecoder();
  function encodeUtf8(input) {
    return Utf8Encoder.encode(input);
  }
  function decodeUtf8(buffer) {
    return Utf8Decoder.decode(buffer);
  }

  // node_modules/@yume-chan/stream-extra/node_modules/@yume-chan/struct/esm/types/buffer/base.js
  var BufferFieldSubType = class {
    TTypeScriptType;
  };
  var _Uint8ArrayBufferFieldSubType = class extends BufferFieldSubType {
    constructor() {
      super();
    }
    toBuffer(value) {
      return value;
    }
    toValue(buffer) {
      return buffer;
    }
    getSize(value) {
      return value.byteLength;
    }
  };
  var Uint8ArrayBufferFieldSubType = _Uint8ArrayBufferFieldSubType;
  __publicField(Uint8ArrayBufferFieldSubType, "Instance", new _Uint8ArrayBufferFieldSubType());
  var _StringBufferFieldSubType = class extends BufferFieldSubType {
    toBuffer(value) {
      return encodeUtf8(value);
    }
    toValue(array2) {
      return decodeUtf8(array2);
    }
    getSize() {
      return -1;
    }
  };
  var StringBufferFieldSubType = _StringBufferFieldSubType;
  __publicField(StringBufferFieldSubType, "Instance", new _StringBufferFieldSubType());
  var EMPTY_UINT8_ARRAY = new Uint8Array(0);

  // node_modules/@yume-chan/stream-extra/node_modules/@yume-chan/struct/esm/types/number.js
  var DESERIALIZERS = {
    1: (array2, littleEndian) => array2[0],
    2: (array2, littleEndian) => (array2[1] << 8 | array2[0]) * littleEndian | (array2[0] << 8 | array2[1]) * !littleEndian,
    4: (array2, littleEndian) => (array2[3] << 24 | array2[2] << 16 | array2[1] << 8 | array2[0]) * littleEndian | (array2[0] << 24 | array2[1] << 16 | array2[2] << 8 | array2[3]) * !littleEndian
  };
  var _NumberFieldType = class {
    TTypeScriptType;
    signed;
    size;
    deserializer;
    convertSign;
    dataViewSetter;
    constructor(size, signed, convertSign, dataViewSetter) {
      this.size = size;
      this.signed = signed;
      this.deserializer = DESERIALIZERS[size];
      this.convertSign = convertSign;
      this.dataViewSetter = dataViewSetter;
    }
  };
  var NumberFieldType = _NumberFieldType;
  __publicField(NumberFieldType, "Int8", new _NumberFieldType(1, true, (value) => value << 24 >> 24, "setInt8"));
  __publicField(NumberFieldType, "Uint8", new _NumberFieldType(1, false, (value) => value, "setUint8"));
  __publicField(NumberFieldType, "Int16", new _NumberFieldType(2, true, (value) => value << 16 >> 16, "setInt16"));
  __publicField(NumberFieldType, "Uint16", new _NumberFieldType(2, false, (value) => value, "setUint16"));
  __publicField(NumberFieldType, "Int32", new _NumberFieldType(4, true, (value) => value, "setInt32"));
  __publicField(NumberFieldType, "Uint32", new _NumberFieldType(4, false, (value) => value >>> 0, "setUint32"));

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/dataview-bigint-polyfill/esm/pure.js
  var BigInt322 = BigInt(32);
  function getBigInt643(dataView, byteOffset, littleEndian) {
    const littleEndianMask = Number(!!littleEndian);
    const bigEndianMask = Number(!littleEndian);
    return BigInt(dataView.getInt32(byteOffset, littleEndian) * bigEndianMask + dataView.getInt32(byteOffset + 4, littleEndian) * littleEndianMask) << BigInt322 | BigInt(dataView.getUint32(byteOffset, littleEndian) * littleEndianMask + dataView.getUint32(byteOffset + 4, littleEndian) * bigEndianMask);
  }
  function getBigUint643(dataView, byteOffset, littleEndian) {
    const a2 = dataView.getUint32(byteOffset, littleEndian);
    const b2 = dataView.getUint32(byteOffset + 4, littleEndian);
    const littleEndianMask = Number(!!littleEndian);
    const bigEndianMask = Number(!littleEndian);
    return BigInt(a2 * bigEndianMask + b2 * littleEndianMask) << BigInt322 | BigInt(a2 * littleEndianMask + b2 * bigEndianMask);
  }
  function setBigInt643(dataView, byteOffset, value, littleEndian) {
    const hi = Number(value >> BigInt322);
    const lo = Number(value & BigInt(4294967295));
    if (littleEndian) {
      dataView.setInt32(byteOffset + 4, hi, littleEndian);
      dataView.setUint32(byteOffset, lo, littleEndian);
    } else {
      dataView.setInt32(byteOffset, hi, littleEndian);
      dataView.setUint32(byteOffset + 4, lo, littleEndian);
    }
  }
  function setBigUint643(dataView, byteOffset, value, littleEndian) {
    const hi = Number(value >> BigInt322);
    const lo = Number(value & BigInt(4294967295));
    if (littleEndian) {
      dataView.setUint32(byteOffset + 4, hi, littleEndian);
      dataView.setUint32(byteOffset, lo, littleEndian);
    } else {
      dataView.setUint32(byteOffset, hi, littleEndian);
      dataView.setUint32(byteOffset + 4, lo, littleEndian);
    }
  }

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/dataview-bigint-polyfill/esm/fallback.js
  var getBigInt644 = "getBigInt64" in DataView.prototype ? (dataView, byteOffset, littleEndian) => dataView.getBigInt64(byteOffset, littleEndian) : getBigInt643;
  var getBigUint644 = "getBigUint64" in DataView.prototype ? (dataView, byteOffset, littleEndian) => dataView.getBigUint64(byteOffset, littleEndian) : getBigUint643;
  var setBigInt644 = "setBigInt64" in DataView.prototype ? (dataView, byteOffset, value, littleEndian) => dataView.setBigInt64(byteOffset, value, littleEndian) : setBigInt643;
  var setBigUint644 = "setBigUint64" in DataView.prototype ? (dataView, byteOffset, value, littleEndian) => dataView.setBigUint64(byteOffset, value, littleEndian) : setBigUint643;

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/crypto.js
  var BigInt0 = BigInt(0);
  var BigInt1 = BigInt(1);
  var BigInt2 = BigInt(2);
  var BigInt64 = BigInt(64);
  function getBigUint(dataView, byteOffset, length) {
    let result = BigInt0;
    for (let i2 = byteOffset; i2 < byteOffset + length; i2 += 8) {
      result <<= BigInt64;
      const value = getBigUint644(dataView, i2, false);
      result += value;
    }
    return result;
  }
  function setBigUint(dataView, byteOffset, value, littleEndian) {
    const start = byteOffset;
    if (littleEndian) {
      while (value > BigInt0) {
        setBigUint644(dataView, byteOffset, value, true);
        byteOffset += 8;
        value >>= BigInt64;
      }
    } else {
      const uint64Array = [];
      while (value > BigInt0) {
        uint64Array.push(BigInt.asUintN(64, value));
        value >>= BigInt64;
      }
      for (let i2 = uint64Array.length - 1; i2 >= 0; i2 -= 1) {
        setBigUint644(dataView, byteOffset, uint64Array[i2], false);
        byteOffset += 8;
      }
    }
    return byteOffset - start;
  }
  var RsaPrivateKeyNOffset = 38;
  var RsaPrivateKeyNLength = 2048 / 8;
  var RsaPrivateKeyDOffset = 303;
  var RsaPrivateKeyDLength = 2048 / 8;
  function parsePrivateKey(key) {
    const view = new DataView(key.buffer, key.byteOffset, key.byteLength);
    const n2 = getBigUint(view, RsaPrivateKeyNOffset, RsaPrivateKeyNLength);
    const d2 = getBigUint(view, RsaPrivateKeyDOffset, RsaPrivateKeyDLength);
    return [n2, d2];
  }
  function modInverse(a2, m2) {
    a2 = (a2 % m2 + m2) % m2;
    if (!a2 || m2 < 2) {
      return NaN;
    }
    const s2 = [];
    let b2 = m2;
    while (b2) {
      [a2, b2] = [b2, a2 % b2];
      s2.push({ a: a2, b: b2 });
    }
    if (a2 !== 1) {
      return NaN;
    }
    let x2 = 1;
    let y2 = 0;
    for (let i2 = s2.length - 2; i2 >= 0; --i2) {
      [x2, y2] = [y2, x2 - y2 * Math.floor(s2[i2].a / s2[i2].b)];
    }
    return (y2 % m2 + m2) % m2;
  }
  function calculatePublicKeyLength() {
    return 4 + 4 + 2048 / 8 + 2048 / 8 + 4;
  }
  function calculatePublicKey(privateKey, output) {
    const [n2] = parsePrivateKey(privateKey);
    let outputType;
    const outputLength = calculatePublicKeyLength();
    if (!output) {
      output = new Uint8Array(outputLength);
      outputType = "Uint8Array";
    } else {
      if (output.byteLength < outputLength) {
        throw new Error("output buffer is too small");
      }
      outputType = "number";
    }
    const outputView = new DataView(output.buffer, output.byteOffset, output.byteLength);
    let outputOffset = 0;
    outputView.setUint32(outputOffset, 2048 / 8 / 4, true);
    outputOffset += 4;
    const n0inv = modInverse(Number(BigInt.asUintN(32, n2) * BigInt(-1)), 2 ** 32);
    outputView.setUint32(outputOffset, n0inv, true);
    outputOffset += 4;
    setBigUint(outputView, outputOffset, n2, true);
    outputOffset += 256;
    let rr2 = BigInt(2) ** BigInt(4096) % n2;
    outputOffset += setBigUint(outputView, outputOffset, rr2, true);
    outputView.setUint32(outputOffset, 65537, true);
    outputOffset += 4;
    if (outputType === "Uint8Array") {
      return output;
    } else {
      return outputLength;
    }
  }
  var SHA1_DIGEST_LENGTH = 20;
  var ASN1_SEQUENCE = 48;
  var ASN1_OCTET_STRING = 4;
  var ASN1_NULL = 5;
  var ASN1_OID = 6;
  var SHA1_DIGEST_INFO = new Uint8Array([
    ASN1_SEQUENCE,
    13 + SHA1_DIGEST_LENGTH,
    ASN1_SEQUENCE,
    9,
    ASN1_OID,
    5,
    1 * 40 + 3,
    14,
    3,
    2,
    26,
    ASN1_NULL,
    0,
    ASN1_OCTET_STRING,
    SHA1_DIGEST_LENGTH
  ]);

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/struct/esm/basic/definition.js
  var StructFieldDefinition2 = class {
    TValue;
    TOmitInitKey;
    options;
    constructor(options) {
      this.options = options;
    }
  };

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/struct/esm/basic/field-value.js
  var StructFieldValue2 = class {
    definition;
    options;
    struct;
    get hasCustomAccessors() {
      return this.get !== StructFieldValue2.prototype.get || this.set !== StructFieldValue2.prototype.set;
    }
    value;
    constructor(definition, options, struct, value) {
      this.definition = definition;
      this.options = options;
      this.struct = struct;
      this.value = value;
    }
    getSize() {
      return this.definition.getSize();
    }
    get() {
      return this.value;
    }
    set(value) {
      this.value = value;
    }
  };

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/struct/esm/basic/options.js
  var StructDefaultOptions2 = {
    littleEndian: false
  };

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/struct/esm/basic/struct-value.js
  var STRUCT_VALUE_SYMBOL2 = Symbol("struct-value");
  var StructValue2 = class {
    fieldValues = {};
    value;
    constructor(prototype) {
      this.value = Object.create(prototype);
      Object.defineProperty(this.value, STRUCT_VALUE_SYMBOL2, { enumerable: false, value: this });
    }
    set(name, fieldValue) {
      this.fieldValues[name] = fieldValue;
      if (fieldValue.hasCustomAccessors) {
        Object.defineProperty(this.value, name, {
          configurable: true,
          enumerable: true,
          get() {
            return fieldValue.get();
          },
          set(v2) {
            fieldValue.set(v2);
          }
        });
      } else {
        this.value[name] = fieldValue.get();
      }
    }
    get(name) {
      return this.fieldValues[name];
    }
  };

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/struct/esm/sync-promise.js
  var SyncPromise2 = {
    reject(reason) {
      return new RejectedSyncPromise(reason);
    },
    resolve(value) {
      if (typeof value === "object" && value !== null && typeof value.then === "function") {
        if (value instanceof PendingSyncPromise || value instanceof ResolvedSyncPromise || value instanceof RejectedSyncPromise) {
          return value;
        }
        return new PendingSyncPromise(value);
      } else {
        return new ResolvedSyncPromise(value);
      }
    },
    try(executor) {
      try {
        return SyncPromise2.resolve(executor());
      } catch (e2) {
        return SyncPromise2.reject(e2);
      }
    }
  };
  var PendingSyncPromise = class {
    promise;
    constructor(promise) {
      this.promise = promise;
    }
    then(onfulfilled, onrejected) {
      return new PendingSyncPromise(this.promise.then(onfulfilled, onrejected));
    }
    valueOrPromise() {
      return this.promise;
    }
  };
  var ResolvedSyncPromise = class {
    value;
    constructor(value) {
      this.value = value;
    }
    then(onfulfilled, onrejected) {
      if (!onfulfilled) {
        return this;
      }
      return SyncPromise2.try(() => onfulfilled(this.value));
    }
    valueOrPromise() {
      return this.value;
    }
  };
  var RejectedSyncPromise = class {
    reason;
    constructor(reason) {
      this.reason = reason;
    }
    then(onfulfilled, onrejected) {
      if (!onrejected) {
        return this;
      }
      return SyncPromise2.try(() => onrejected(this.reason));
    }
    valueOrPromise() {
      throw this.reason;
    }
  };

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/struct/esm/types/bigint.js
  var _BigIntFieldType2 = class {
    TTypeScriptType;
    size;
    getter;
    setter;
    constructor(size, getter, setter) {
      this.size = size;
      this.getter = getter;
      this.setter = setter;
    }
  };
  var BigIntFieldType2 = _BigIntFieldType2;
  __publicField(BigIntFieldType2, "Int64", new _BigIntFieldType2(8, getBigInt644, setBigInt644));
  __publicField(BigIntFieldType2, "Uint64", new _BigIntFieldType2(8, getBigUint644, setBigUint644));
  var BigIntFieldDefinition2 = class extends StructFieldDefinition2 {
    type;
    constructor(type, _typescriptType) {
      super();
      this.type = type;
    }
    getSize() {
      return this.type.size;
    }
    create(options, struct, value) {
      return new BigIntFieldValue(this, options, struct, value);
    }
    deserialize(options, stream, struct) {
      return SyncPromise2.try(() => {
        return stream.read(this.getSize());
      }).then((array2) => {
        const view = new DataView(array2.buffer, array2.byteOffset, array2.byteLength);
        const value = this.type.getter(view, 0, options.littleEndian);
        return this.create(options, struct, value);
      }).valueOrPromise();
    }
  };
  var BigIntFieldValue = class extends StructFieldValue2 {
    serialize(dataView, offset) {
      this.definition.type.setter(dataView, offset, this.value, this.options.littleEndian);
    }
  };

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/struct/esm/utils.js
  function placeholder() {
    return void 0;
  }
  var Utf8Encoder2 = new TextEncoder();
  var Utf8Decoder2 = new TextDecoder();
  function encodeUtf82(input) {
    return Utf8Encoder2.encode(input);
  }
  function decodeUtf82(buffer) {
    return Utf8Decoder2.decode(buffer);
  }

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/struct/esm/types/buffer/base.js
  var BufferFieldSubType2 = class {
    TTypeScriptType;
  };
  var _Uint8ArrayBufferFieldSubType2 = class extends BufferFieldSubType2 {
    constructor() {
      super();
    }
    toBuffer(value) {
      return value;
    }
    toValue(buffer) {
      return buffer;
    }
    getSize(value) {
      return value.byteLength;
    }
  };
  var Uint8ArrayBufferFieldSubType2 = _Uint8ArrayBufferFieldSubType2;
  __publicField(Uint8ArrayBufferFieldSubType2, "Instance", new _Uint8ArrayBufferFieldSubType2());
  var _StringBufferFieldSubType2 = class extends BufferFieldSubType2 {
    toBuffer(value) {
      return encodeUtf82(value);
    }
    toValue(array2) {
      return decodeUtf82(array2);
    }
    getSize() {
      return -1;
    }
  };
  var StringBufferFieldSubType2 = _StringBufferFieldSubType2;
  __publicField(StringBufferFieldSubType2, "Instance", new _StringBufferFieldSubType2());
  var EMPTY_UINT8_ARRAY2 = new Uint8Array(0);
  var BufferLikeFieldDefinition2 = class extends StructFieldDefinition2 {
    type;
    constructor(type, options) {
      super(options);
      this.type = type;
    }
    getDeserializeSize(struct) {
      return this.getSize();
    }
    create(options, struct, value, array2) {
      return new BufferLikeFieldValue2(this, options, struct, value, array2);
    }
    deserialize(options, stream, struct) {
      return SyncPromise2.try(() => {
        const size = this.getDeserializeSize(struct);
        if (size === 0) {
          return EMPTY_UINT8_ARRAY2;
        } else {
          return stream.read(size);
        }
      }).then((array2) => {
        const value = this.type.toValue(array2);
        return this.create(options, struct, value, array2);
      }).valueOrPromise();
    }
  };
  var BufferLikeFieldValue2 = class extends StructFieldValue2 {
    array;
    constructor(definition, options, struct, value, array2) {
      super(definition, options, struct, value);
      this.array = array2;
    }
    set(value) {
      super.set(value);
      this.array = void 0;
    }
    serialize(dataView, offset) {
      if (!this.array) {
        this.array = this.definition.type.toBuffer(this.value);
      }
      new Uint8Array(dataView.buffer, dataView.byteOffset, dataView.byteLength).set(this.array, offset);
    }
  };

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/struct/esm/types/buffer/fixed-length.js
  var FixedLengthBufferLikeFieldDefinition2 = class extends BufferLikeFieldDefinition2 {
    getSize() {
      return this.options.length;
    }
  };

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/struct/esm/types/buffer/variable-length.js
  var VariableLengthBufferLikeFieldDefinition2 = class extends BufferLikeFieldDefinition2 {
    getSize() {
      return 0;
    }
    getDeserializeSize(struct) {
      let value = struct.value[this.options.lengthField];
      if (typeof value === "string") {
        value = Number.parseInt(value, this.options.lengthFieldRadix ?? 10);
      }
      return value;
    }
    create(options, struct, value, array2) {
      return new VariableLengthBufferLikeStructFieldValue(this, options, struct, value, array2);
    }
  };
  var VariableLengthBufferLikeStructFieldValue = class extends BufferLikeFieldValue2 {
    length;
    lengthFieldValue;
    constructor(definition, options, struct, value, array2) {
      super(definition, options, struct, value, array2);
      if (array2) {
        this.length = array2.byteLength;
      }
      const lengthField = this.definition.options.lengthField;
      const originalValue = struct.get(lengthField);
      this.lengthFieldValue = new VariableLengthBufferLikeFieldLengthValue(originalValue, this);
      struct.set(lengthField, this.lengthFieldValue);
    }
    getSize() {
      if (this.length === void 0) {
        this.length = this.definition.type.getSize(this.value);
        if (this.length === -1) {
          this.array = this.definition.type.toBuffer(this.value);
          this.length = this.array.byteLength;
        }
      }
      return this.length;
    }
    set(value) {
      super.set(value);
      this.array = void 0;
      this.length = void 0;
    }
  };
  var VariableLengthBufferLikeFieldLengthValue = class extends StructFieldValue2 {
    originalField;
    bufferField;
    constructor(originalField, arrayBufferField) {
      super(originalField.definition, originalField.options, originalField.struct, 0);
      this.originalField = originalField;
      this.bufferField = arrayBufferField;
    }
    getSize() {
      return this.originalField.getSize();
    }
    get() {
      let value = this.bufferField.getSize();
      const originalValue = this.originalField.get();
      if (typeof originalValue === "string") {
        value = value.toString(this.bufferField.definition.options.lengthFieldRadix ?? 10);
      }
      return value;
    }
    set() {
    }
    serialize(dataView, offset) {
      this.originalField.set(this.get());
      this.originalField.serialize(dataView, offset);
    }
  };

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/struct/esm/types/number.js
  var DESERIALIZERS2 = {
    1: (array2, littleEndian) => array2[0],
    2: (array2, littleEndian) => (array2[1] << 8 | array2[0]) * littleEndian | (array2[0] << 8 | array2[1]) * !littleEndian,
    4: (array2, littleEndian) => (array2[3] << 24 | array2[2] << 16 | array2[1] << 8 | array2[0]) * littleEndian | (array2[0] << 24 | array2[1] << 16 | array2[2] << 8 | array2[3]) * !littleEndian
  };
  var _NumberFieldType2 = class {
    TTypeScriptType;
    signed;
    size;
    deserializer;
    convertSign;
    dataViewSetter;
    constructor(size, signed, convertSign, dataViewSetter) {
      this.size = size;
      this.signed = signed;
      this.deserializer = DESERIALIZERS2[size];
      this.convertSign = convertSign;
      this.dataViewSetter = dataViewSetter;
    }
  };
  var NumberFieldType2 = _NumberFieldType2;
  __publicField(NumberFieldType2, "Int8", new _NumberFieldType2(1, true, (value) => value << 24 >> 24, "setInt8"));
  __publicField(NumberFieldType2, "Uint8", new _NumberFieldType2(1, false, (value) => value, "setUint8"));
  __publicField(NumberFieldType2, "Int16", new _NumberFieldType2(2, true, (value) => value << 16 >> 16, "setInt16"));
  __publicField(NumberFieldType2, "Uint16", new _NumberFieldType2(2, false, (value) => value, "setUint16"));
  __publicField(NumberFieldType2, "Int32", new _NumberFieldType2(4, true, (value) => value, "setInt32"));
  __publicField(NumberFieldType2, "Uint32", new _NumberFieldType2(4, false, (value) => value >>> 0, "setUint32"));
  var NumberFieldDefinition2 = class extends StructFieldDefinition2 {
    type;
    constructor(type, _typescriptType) {
      super();
      this.type = type;
    }
    getSize() {
      return this.type.size;
    }
    create(options, struct, value) {
      return new NumberFieldValue(this, options, struct, value);
    }
    deserialize(options, stream, struct) {
      return SyncPromise2.try(() => {
        return stream.read(this.getSize());
      }).then((array2) => {
        let value;
        value = this.type.deserializer(array2, options.littleEndian);
        value = this.type.convertSign(value);
        return this.create(options, struct, value);
      }).valueOrPromise();
    }
  };
  var NumberFieldValue = class extends StructFieldValue2 {
    serialize(dataView, offset) {
      dataView[this.definition.type.dataViewSetter](offset, this.value, this.options.littleEndian);
    }
  };

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/struct/esm/struct.js
  var Struct2 = class {
    TFields;
    TOmitInitKey;
    TExtra;
    TInit;
    TDeserializeResult;
    options;
    _size = 0;
    get size() {
      return this._size;
    }
    _fields = [];
    _extra = {};
    _postDeserialized;
    constructor(options) {
      this.options = { ...StructDefaultOptions2, ...options };
    }
    field(name, definition) {
      for (const field of this._fields) {
        if (field[0] === name) {
          throw new Error(`This struct already have a field with name '${String(name)}'`);
        }
      }
      this._fields.push([name, definition]);
      const size = definition.getSize();
      this._size += size;
      return this;
    }
    fields(other) {
      for (const field of other._fields) {
        this._fields.push(field);
      }
      this._size += other._size;
      Object.defineProperties(this._extra, Object.getOwnPropertyDescriptors(other._extra));
      return this;
    }
    number(name, type, typeScriptType) {
      return this.field(name, new NumberFieldDefinition2(type, typeScriptType));
    }
    int8(name, typeScriptType) {
      return this.number(name, NumberFieldType2.Int8, typeScriptType);
    }
    uint8(name, typeScriptType) {
      return this.number(name, NumberFieldType2.Uint8, typeScriptType);
    }
    int16(name, typeScriptType) {
      return this.number(name, NumberFieldType2.Int16, typeScriptType);
    }
    uint16(name, typeScriptType) {
      return this.number(name, NumberFieldType2.Uint16, typeScriptType);
    }
    int32(name, typeScriptType) {
      return this.number(name, NumberFieldType2.Int32, typeScriptType);
    }
    uint32(name, typeScriptType) {
      return this.number(name, NumberFieldType2.Uint32, typeScriptType);
    }
    bigint(name, type, typeScriptType) {
      return this.field(name, new BigIntFieldDefinition2(type, typeScriptType));
    }
    int64(name, typeScriptType) {
      return this.bigint(name, BigIntFieldType2.Int64, typeScriptType);
    }
    uint64(name, typeScriptType) {
      return this.bigint(name, BigIntFieldType2.Uint64, typeScriptType);
    }
    arrayBufferLike = (name, type, options) => {
      if ("length" in options) {
        return this.field(name, new FixedLengthBufferLikeFieldDefinition2(type, options));
      } else {
        return this.field(name, new VariableLengthBufferLikeFieldDefinition2(type, options));
      }
    };
    uint8Array = (name, options, typeScriptType) => {
      return this.arrayBufferLike(name, Uint8ArrayBufferFieldSubType2.Instance, options, typeScriptType);
    };
    string = (name, options, typeScriptType) => {
      return this.arrayBufferLike(name, StringBufferFieldSubType2.Instance, options, typeScriptType);
    };
    extra(value) {
      Object.defineProperties(this._extra, Object.getOwnPropertyDescriptors(value));
      return this;
    }
    postDeserialize(callback) {
      this._postDeserialized = callback;
      return this;
    }
    deserialize(stream) {
      const structValue = new StructValue2(this._extra);
      let promise = SyncPromise2.resolve();
      for (const [name, definition] of this._fields) {
        promise = promise.then(() => definition.deserialize(this.options, stream, structValue)).then((fieldValue) => {
          structValue.set(name, fieldValue);
        });
      }
      return promise.then(() => {
        const object2 = structValue.value;
        if (this._postDeserialized) {
          const override = this._postDeserialized.call(object2, object2);
          if (override !== void 0) {
            return override;
          }
        }
        return object2;
      }).valueOrPromise();
    }
    serialize(init, output) {
      let structValue;
      if (STRUCT_VALUE_SYMBOL2 in init) {
        structValue = init[STRUCT_VALUE_SYMBOL2];
        for (const [key, value] of Object.entries(init)) {
          const fieldValue = structValue.get(key);
          if (fieldValue) {
            fieldValue.set(value);
          }
        }
      } else {
        structValue = new StructValue2({});
        for (const [name, definition] of this._fields) {
          const fieldValue = definition.create(this.options, structValue, init[name]);
          structValue.set(name, fieldValue);
        }
      }
      let structSize = 0;
      const fieldsInfo = [];
      for (const [name] of this._fields) {
        const fieldValue = structValue.get(name);
        const size = fieldValue.getSize();
        fieldsInfo.push({ fieldValue, size });
        structSize += size;
      }
      let outputType = "number";
      if (!output) {
        output = new Uint8Array(structSize);
        outputType = "Uint8Array";
      }
      const dataView = new DataView(output.buffer, output.byteOffset, output.byteLength);
      let offset = 0;
      for (const { fieldValue, size } of fieldsInfo) {
        fieldValue.serialize(dataView, offset);
        offset += size;
      }
      if (outputType === "number") {
        return structSize;
      } else {
        return output;
      }
    }
  };

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/packet.js
  var AdbCommand;
  (function(AdbCommand3) {
    AdbCommand3[AdbCommand3["Auth"] = 1213486401] = "Auth";
    AdbCommand3[AdbCommand3["Close"] = 1163086915] = "Close";
    AdbCommand3[AdbCommand3["Connect"] = 1314410051] = "Connect";
    AdbCommand3[AdbCommand3["OK"] = 1497451343] = "OK";
    AdbCommand3[AdbCommand3["Open"] = 1313165391] = "Open";
    AdbCommand3[AdbCommand3["Write"] = 1163154007] = "Write";
  })(AdbCommand = AdbCommand || (AdbCommand = {}));
  var AdbPacketHeader = new Struct2({ littleEndian: true }).uint32("command").uint32("arg0").uint32("arg1").uint32("payloadLength").uint32("checksum").int32("magic");
  var AdbPacket = new Struct2({ littleEndian: true }).fields(AdbPacketHeader).uint8Array("payload", { lengthField: "payloadLength" });

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/utils/base64.js
  var charToIndex = {};
  var indexToChar = [];
  var paddingChar = "=".charCodeAt(0);
  function addRange(start, end) {
    const charCodeStart = start.charCodeAt(0);
    const charCodeEnd = end.charCodeAt(0);
    for (let charCode = charCodeStart; charCode <= charCodeEnd; charCode += 1) {
      charToIndex[String.fromCharCode(charCode)] = indexToChar.length;
      indexToChar.push(charCode);
    }
  }
  addRange("A", "Z");
  addRange("a", "z");
  addRange("0", "9");
  addRange("+", "+");
  addRange("/", "/");
  function calculateBase64EncodedLength(inputLength) {
    const remainder = inputLength % 3;
    const paddingLength = remainder !== 0 ? 3 - remainder : 0;
    return [(inputLength + paddingLength) / 3 * 4, paddingLength];
  }
  function encodeBase64(input, output) {
    const [outputLength, paddingLength] = calculateBase64EncodedLength(input.length);
    if (!output) {
      output = new Uint8Array(outputLength);
      encodeForward(input, output, paddingLength);
      return output;
    } else {
      if (output.length < outputLength) {
        throw new Error("output buffer is too small");
      }
      output = output.subarray(0, outputLength);
      if (input.buffer !== output.buffer) {
        encodeForward(input, output, paddingLength);
      } else if (output.byteOffset + output.length - (paddingLength + 1) <= input.byteOffset + input.length) {
        encodeForward(input, output, paddingLength);
      } else if (output.byteOffset >= input.byteOffset - 1) {
        encodeBackward(input, output, paddingLength);
      } else {
        throw new Error("input and output cannot overlap");
      }
      return outputLength;
    }
  }
  function encodeForward(input, output, paddingLength) {
    let inputIndex = 0;
    let outputIndex = 0;
    while (inputIndex < input.length - 2) {
      const x2 = input[inputIndex];
      inputIndex += 1;
      const y2 = input[inputIndex];
      inputIndex += 1;
      const z2 = input[inputIndex];
      inputIndex += 1;
      output[outputIndex] = indexToChar[x2 >> 2];
      outputIndex += 1;
      output[outputIndex] = indexToChar[(x2 & 3) << 4 | y2 >> 4];
      outputIndex += 1;
      output[outputIndex] = indexToChar[(y2 & 15) << 2 | z2 >> 6];
      outputIndex += 1;
      output[outputIndex] = indexToChar[z2 & 63];
      outputIndex += 1;
    }
    if (paddingLength === 2) {
      const x2 = input[inputIndex];
      inputIndex += 1;
      output[outputIndex] = indexToChar[x2 >> 2];
      outputIndex += 1;
      output[outputIndex] = indexToChar[(x2 & 3) << 4];
      outputIndex += 1;
      output[outputIndex] = paddingChar;
      outputIndex += 1;
      output[outputIndex] = paddingChar;
    } else if (paddingLength === 1) {
      const x2 = input[inputIndex];
      inputIndex += 1;
      const y2 = input[inputIndex];
      inputIndex += 1;
      output[outputIndex] = indexToChar[x2 >> 2];
      outputIndex += 1;
      output[outputIndex] = indexToChar[(x2 & 3) << 4 | y2 >> 4];
      outputIndex += 1;
      output[outputIndex] = indexToChar[(y2 & 15) << 2];
      outputIndex += 1;
      output[outputIndex] = paddingChar;
    }
  }
  function encodeBackward(input, output, paddingLength) {
    let inputIndex = input.length - 1;
    let outputIndex = output.length - 1;
    if (paddingLength === 2) {
      const x2 = input[inputIndex];
      inputIndex -= 1;
      output[outputIndex] = paddingChar;
      outputIndex -= 1;
      output[outputIndex] = paddingChar;
      outputIndex -= 1;
      output[outputIndex] = indexToChar[(x2 & 3) << 4];
      outputIndex -= 1;
      output[outputIndex] = indexToChar[x2 >> 2];
      outputIndex -= 1;
    } else if (paddingLength === 1) {
      const y2 = input[inputIndex];
      inputIndex -= 1;
      const x2 = input[inputIndex];
      inputIndex -= 1;
      output[outputIndex] = paddingChar;
      outputIndex -= 1;
      output[outputIndex] = indexToChar[(y2 & 15) << 2];
      outputIndex -= 1;
      output[outputIndex] = indexToChar[(x2 & 3) << 4 | y2 >> 4];
      outputIndex -= 1;
      output[outputIndex] = indexToChar[x2 >> 2];
      outputIndex -= 1;
    }
    while (inputIndex >= 0) {
      const z2 = input[inputIndex];
      inputIndex -= 1;
      const y2 = input[inputIndex];
      inputIndex -= 1;
      const x2 = input[inputIndex];
      inputIndex -= 1;
      output[outputIndex] = indexToChar[z2 & 63];
      outputIndex -= 1;
      output[outputIndex] = indexToChar[(y2 & 15) << 2 | z2 >> 6];
      outputIndex -= 1;
      output[outputIndex] = indexToChar[(x2 & 3) << 4 | y2 >> 4];
      outputIndex -= 1;
      output[outputIndex] = indexToChar[x2 >> 2];
      outputIndex -= 1;
    }
  }
  function decodeBase64(input) {
    let padding;
    if (input[input.length - 2] === "=") {
      padding = 2;
    } else if (input[input.length - 1] === "=") {
      padding = 1;
    } else {
      padding = 0;
    }
    const result = new Uint8Array(input.length / 4 * 3 - padding);
    let sIndex = 0;
    let dIndex = 0;
    while (sIndex < input.length - (padding !== 0 ? 4 : 0)) {
      const a2 = charToIndex[input[sIndex]];
      sIndex += 1;
      const b2 = charToIndex[input[sIndex]];
      sIndex += 1;
      const c2 = charToIndex[input[sIndex]];
      sIndex += 1;
      const d2 = charToIndex[input[sIndex]];
      sIndex += 1;
      result[dIndex] = a2 << 2 | (b2 & 48) >> 4;
      dIndex += 1;
      result[dIndex] = (b2 & 15) << 4 | (c2 & 60) >> 2;
      dIndex += 1;
      result[dIndex] = (c2 & 3) << 6 | d2;
      dIndex += 1;
    }
    if (padding === 1) {
      const a2 = charToIndex[input[sIndex]];
      sIndex += 1;
      const b2 = charToIndex[input[sIndex]];
      sIndex += 1;
      const c2 = charToIndex[input[sIndex]];
      result[dIndex] = a2 << 2 | (b2 & 48) >> 4;
      dIndex += 1;
      result[dIndex] = (b2 & 15) << 4 | (c2 & 60) >> 2;
    } else if (padding === 2) {
      const a2 = charToIndex[input[sIndex]];
      sIndex += 1;
      const b2 = charToIndex[input[sIndex]];
      result[dIndex] = a2 << 2 | (b2 & 48) >> 4;
    }
    return result;
  }

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/auth.js
  var AdbAuthType;
  (function(AdbAuthType3) {
    AdbAuthType3[AdbAuthType3["Token"] = 1] = "Token";
    AdbAuthType3[AdbAuthType3["Signature"] = 2] = "Signature";
    AdbAuthType3[AdbAuthType3["PublicKey"] = 3] = "PublicKey";
  })(AdbAuthType = AdbAuthType || (AdbAuthType = {}));

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/commands/framebuffer.js
  var Version = new Struct2({ littleEndian: true }).uint32("version");
  var AdbFrameBufferV1 = new Struct2({ littleEndian: true }).uint32("bpp").uint32("size").uint32("width").uint32("height").uint32("red_offset").uint32("red_length").uint32("blue_offset").uint32("blue_length").uint32("green_offset").uint32("green_length").uint32("alpha_offset").uint32("alpha_length").uint8Array("data", { lengthField: "size" });
  var AdbFrameBufferV2 = new Struct2({ littleEndian: true }).uint32("bpp").uint32("colorSpace").uint32("size").uint32("width").uint32("height").uint32("red_offset").uint32("red_length").uint32("blue_offset").uint32("blue_length").uint32("green_offset").uint32("green_length").uint32("alpha_offset").uint32("alpha_length").uint8Array("data", { lengthField: "size" });

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/features.js
  var AdbFeatures;
  (function(AdbFeatures3) {
    AdbFeatures3["ShellV2"] = "shell_v2";
    AdbFeatures3["Cmd"] = "cmd";
    AdbFeatures3["StatV2"] = "stat_v2";
    AdbFeatures3["ListV2"] = "ls_v2";
    AdbFeatures3["FixedPushMkdir"] = "fixed_push_mkdir";
  })(AdbFeatures = AdbFeatures || (AdbFeatures = {}));

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/commands/subprocess/protocols/shell.js
  var AdbShellProtocolId;
  (function(AdbShellProtocolId3) {
    AdbShellProtocolId3[AdbShellProtocolId3["Stdin"] = 0] = "Stdin";
    AdbShellProtocolId3[AdbShellProtocolId3["Stdout"] = 1] = "Stdout";
    AdbShellProtocolId3[AdbShellProtocolId3["Stderr"] = 2] = "Stderr";
    AdbShellProtocolId3[AdbShellProtocolId3["Exit"] = 3] = "Exit";
    AdbShellProtocolId3[AdbShellProtocolId3["CloseStdin"] = 4] = "CloseStdin";
    AdbShellProtocolId3[AdbShellProtocolId3["WindowSizeChange"] = 5] = "WindowSizeChange";
  })(AdbShellProtocolId = AdbShellProtocolId || (AdbShellProtocolId = {}));
  var AdbShellProtocolPacket = new Struct2({ littleEndian: true }).uint8("id", placeholder()).uint32("length").uint8Array("data", { lengthField: "length" });

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/commands/reverse.js
  var AdbReverseStringResponse = new Struct2().string("length", { length: 4 }).string("content", { lengthField: "length", lengthFieldRadix: 16 });
  var AdbReverseErrorResponse = new Struct2().fields(AdbReverseStringResponse).postDeserialize((value) => {
    throw new Error(value.content);
  });

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/commands/sync/request.js
  var AdbSyncRequestId;
  (function(AdbSyncRequestId3) {
    AdbSyncRequestId3["List"] = "LIST";
    AdbSyncRequestId3["List2"] = "LIS2";
    AdbSyncRequestId3["Send"] = "SEND";
    AdbSyncRequestId3["Lstat"] = "STAT";
    AdbSyncRequestId3["Stat"] = "STA2";
    AdbSyncRequestId3["Lstat2"] = "LST2";
    AdbSyncRequestId3["Data"] = "DATA";
    AdbSyncRequestId3["Done"] = "DONE";
    AdbSyncRequestId3["Receive"] = "RECV";
  })(AdbSyncRequestId = AdbSyncRequestId || (AdbSyncRequestId = {}));
  var AdbSyncNumberRequest = new Struct2({ littleEndian: true }).string("id", { length: 4 }).uint32("arg");
  var AdbSyncDataRequest = new Struct2({ littleEndian: true }).fields(AdbSyncNumberRequest).uint8Array("data", { lengthField: "arg" });

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/commands/sync/response.js
  var AdbSyncResponseId;
  (function(AdbSyncResponseId3) {
    AdbSyncResponseId3["Entry"] = "DENT";
    AdbSyncResponseId3["Entry2"] = "DNT2";
    AdbSyncResponseId3["Lstat"] = "STAT";
    AdbSyncResponseId3["Stat"] = "STA2";
    AdbSyncResponseId3["Lstat2"] = "LST2";
    AdbSyncResponseId3["Done"] = "DONE";
    AdbSyncResponseId3["Data"] = "DATA";
    AdbSyncResponseId3["Ok"] = "OKAY";
    AdbSyncResponseId3["Fail"] = "FAIL";
  })(AdbSyncResponseId = AdbSyncResponseId || (AdbSyncResponseId = {}));
  var AdbSyncFailResponse = new Struct2({ littleEndian: true }).uint32("messageLength").string("message", { lengthField: "messageLength" }).postDeserialize((object2) => {
    throw new Error(object2.message);
  });

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/commands/sync/stat.js
  var LinuxFileType;
  (function(LinuxFileType3) {
    LinuxFileType3[LinuxFileType3["Directory"] = 4] = "Directory";
    LinuxFileType3[LinuxFileType3["File"] = 8] = "File";
    LinuxFileType3[LinuxFileType3["Link"] = 10] = "Link";
  })(LinuxFileType = LinuxFileType || (LinuxFileType = {}));
  var AdbSyncLstatResponse = new Struct2({ littleEndian: true }).int32("mode").int32("size").int32("mtime").extra({
    id: AdbSyncResponseId.Lstat,
    get type() {
      return this.mode >> 12;
    },
    get permission() {
      return this.mode & 4095;
    }
  }).postDeserialize((object2) => {
    if (object2.mode === 0 && object2.size === 0 && object2.mtime === 0) {
      throw new Error("lstat failed");
    }
  });
  var AdbSyncStatErrorCode;
  (function(AdbSyncStatErrorCode3) {
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["SUCCESS"] = 0] = "SUCCESS";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EACCES"] = 13] = "EACCES";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EEXIST"] = 17] = "EEXIST";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EFAULT"] = 14] = "EFAULT";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EFBIG"] = 27] = "EFBIG";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EINTR"] = 4] = "EINTR";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EINVAL"] = 22] = "EINVAL";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EIO"] = 5] = "EIO";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EISDIR"] = 21] = "EISDIR";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ELOOP"] = 40] = "ELOOP";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EMFILE"] = 24] = "EMFILE";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ENAMETOOLONG"] = 36] = "ENAMETOOLONG";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ENFILE"] = 23] = "ENFILE";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ENOENT"] = 2] = "ENOENT";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ENOMEM"] = 12] = "ENOMEM";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ENOSPC"] = 28] = "ENOSPC";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ENOTDIR"] = 20] = "ENOTDIR";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EOVERFLOW"] = 75] = "EOVERFLOW";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EPERM"] = 1] = "EPERM";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EROFS"] = 30] = "EROFS";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ETXTBSY"] = 26] = "ETXTBSY";
  })(AdbSyncStatErrorCode = AdbSyncStatErrorCode || (AdbSyncStatErrorCode = {}));
  var AdbSyncStatResponse = new Struct2({ littleEndian: true }).uint32("error", placeholder()).uint64("dev").uint64("ino").uint32("mode").uint32("nlink").uint32("uid").uint32("gid").uint64("size").uint64("atime").uint64("mtime").uint64("ctime").extra({
    id: AdbSyncResponseId.Stat,
    get type() {
      return this.mode >> 12;
    },
    get permission() {
      return this.mode & 4095;
    }
  }).postDeserialize((object2) => {
    if (object2.error) {
      throw new Error(AdbSyncStatErrorCode[object2.error]);
    }
  });

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/commands/sync/list.js
  var AdbSyncEntryResponse = new Struct2({ littleEndian: true }).fields(AdbSyncLstatResponse).uint32("nameLength").string("name", { lengthField: "nameLength" }).extra({ id: AdbSyncResponseId.Entry });
  var AdbSyncEntry2Response = new Struct2({ littleEndian: true }).fields(AdbSyncStatResponse).uint32("nameLength").string("name", { lengthField: "nameLength" }).extra({ id: AdbSyncResponseId.Entry2 });

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/commands/sync/pull.js
  var AdbSyncDataResponse = new Struct2({ littleEndian: true }).uint32("dataLength").uint8Array("data", { lengthField: "dataLength" }).extra({ id: AdbSyncResponseId.Data });

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/commands/sync/push.js
  var AdbSyncOkResponse = new Struct2({ littleEndian: true }).uint32("unused");
  var ADB_SYNC_MAX_PACKET_SIZE = 64 * 1024;

  // node_modules/@yume-chan/adb-credential-web/node_modules/@yume-chan/adb/esm/adb.js
  var AdbPropKey;
  (function(AdbPropKey3) {
    AdbPropKey3["Product"] = "ro.product.name";
    AdbPropKey3["Model"] = "ro.product.model";
    AdbPropKey3["Device"] = "ro.product.device";
    AdbPropKey3["Features"] = "features";
  })(AdbPropKey = AdbPropKey || (AdbPropKey = {}));

  // node_modules/@yume-chan/adb-credential-web/esm/index.js
  var AdbWebCredentialStore = class {
    localStorageKey;
    constructor(localStorageKey = "private-key") {
      this.localStorageKey = localStorageKey;
    }
    *iterateKeys() {
      const privateKey = window.localStorage.getItem(this.localStorageKey);
      if (privateKey) {
        yield decodeBase64(privateKey);
      }
    }
    async generateKey() {
      const { privateKey: cryptoKey } = await crypto.subtle.generateKey({
        name: "RSASSA-PKCS1-v1_5",
        modulusLength: 2048,
        publicExponent: new Uint8Array([1, 0, 1]),
        hash: "SHA-1"
      }, true, ["sign", "verify"]);
      const privateKey = new Uint8Array(await crypto.subtle.exportKey("pkcs8", cryptoKey));
      window.localStorage.setItem(this.localStorageKey, decodeUtf82(encodeBase64(privateKey)));
      const publicKeyLength = calculatePublicKeyLength();
      const [publicKeyBase64Length] = calculateBase64EncodedLength(publicKeyLength);
      const publicKeyBuffer = new Uint8Array(publicKeyBase64Length);
      calculatePublicKey(privateKey, publicKeyBuffer);
      encodeBase64(publicKeyBuffer.subarray(0, publicKeyLength), publicKeyBuffer);
      window.localStorage.setItem(this.localStorageKey + ".pub", decodeUtf82(publicKeyBuffer));
      return privateKey;
    }
  };

  // node_modules/mobx/dist/mobx.esm.js
  var niceErrors = {
    0: "Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'",
    1: function _2(annotationType, key) {
      return "Cannot apply '" + annotationType + "' to '" + key.toString() + "': Field not found.";
    },
    5: "'keys()' can only be used on observable objects, arrays, sets and maps",
    6: "'values()' can only be used on observable objects, arrays, sets and maps",
    7: "'entries()' can only be used on observable objects, arrays and maps",
    8: "'set()' can only be used on observable objects, arrays and maps",
    9: "'remove()' can only be used on observable objects, arrays and maps",
    10: "'has()' can only be used on observable objects, arrays and maps",
    11: "'get()' can only be used on observable objects, arrays and maps",
    12: "Invalid annotation",
    13: "Dynamic observable objects cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
    14: "Intercept handlers should return nothing or a change object",
    15: "Observable arrays cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
    16: "Modification exception: the internal structure of an observable array was changed.",
    17: function _3(index, length) {
      return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;
    },
    18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",
    19: function _4(other) {
      return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;
    },
    20: function _5(other) {
      return "Cannot initialize map from " + other;
    },
    21: function _6(dataStructure) {
      return "Cannot convert to map from '" + dataStructure + "'";
    },
    22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",
    23: "It is not possible to get index atoms from arrays",
    24: function _7(thing) {
      return "Cannot obtain administration from " + thing;
    },
    25: function _8(property, name) {
      return "the entry '" + property + "' does not exist in the observable map '" + name + "'";
    },
    26: "please specify a property",
    27: function _9(property, name) {
      return "no observable property '" + property.toString() + "' found on the observable object '" + name + "'";
    },
    28: function _10(thing) {
      return "Cannot obtain atom from " + thing;
    },
    29: "Expecting some object",
    30: "invalid action stack. did you forget to finish an action?",
    31: "missing option for computed: get",
    32: function _11(name, derivation) {
      return "Cycle detected in computation " + name + ": " + derivation;
    },
    33: function _12(name) {
      return "The setter of computed value '" + name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";
    },
    34: function _13(name) {
      return "[ComputedValue '" + name + "'] It is not possible to assign a new value to a computed value.";
    },
    35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",
    36: "isolateGlobalState should be called before MobX is running any reactions",
    37: function _14(method) {
      return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";
    },
    38: "'ownKeys()' can only be used on observable objects",
    39: "'defineProperty()' can only be used on observable objects"
  };
  var errors = true ? niceErrors : {};
  function die(error) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (true) {
      var e2 = typeof error === "string" ? error : errors[error];
      if (typeof e2 === "function")
        e2 = e2.apply(null, args);
      throw new Error("[MobX] " + e2);
    }
    throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);
  }
  var mockGlobal = {};
  function getGlobal() {
    if (typeof globalThis !== "undefined") {
      return globalThis;
    }
    if (typeof window !== "undefined") {
      return window;
    }
    if (typeof global !== "undefined") {
      return global;
    }
    if (typeof self !== "undefined") {
      return self;
    }
    return mockGlobal;
  }
  var assign = Object.assign;
  var getDescriptor = Object.getOwnPropertyDescriptor;
  var defineProperty = Object.defineProperty;
  var objectPrototype = Object.prototype;
  var EMPTY_ARRAY = [];
  Object.freeze(EMPTY_ARRAY);
  var EMPTY_OBJECT = {};
  Object.freeze(EMPTY_OBJECT);
  var hasProxy = typeof Proxy !== "undefined";
  var plainObjectString = /* @__PURE__ */ Object.toString();
  function assertProxies() {
    if (!hasProxy) {
      die(true ? "`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`" : "Proxy not available");
    }
  }
  function warnAboutProxyRequirement(msg) {
    if (globalState.verifyProxies) {
      die("MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to " + msg);
    }
  }
  function getNextId() {
    return ++globalState.mobxGuid;
  }
  function once(func) {
    var invoked = false;
    return function() {
      if (invoked) {
        return;
      }
      invoked = true;
      return func.apply(this, arguments);
    };
  }
  var noop = function noop2() {
  };
  function isFunction(fn) {
    return typeof fn === "function";
  }
  function isStringish(value) {
    var t2 = typeof value;
    switch (t2) {
      case "string":
      case "symbol":
      case "number":
        return true;
    }
    return false;
  }
  function isObject(value) {
    return value !== null && typeof value === "object";
  }
  function isPlainObject(value) {
    if (!isObject(value)) {
      return false;
    }
    var proto = Object.getPrototypeOf(value);
    if (proto == null) {
      return true;
    }
    var protoConstructor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof protoConstructor === "function" && protoConstructor.toString() === plainObjectString;
  }
  function isGenerator(obj) {
    var constructor = obj == null ? void 0 : obj.constructor;
    if (!constructor) {
      return false;
    }
    if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) {
      return true;
    }
    return false;
  }
  function addHiddenProp(object2, propName, value) {
    defineProperty(object2, propName, {
      enumerable: false,
      writable: true,
      configurable: true,
      value
    });
  }
  function addHiddenFinalProp(object2, propName, value) {
    defineProperty(object2, propName, {
      enumerable: false,
      writable: false,
      configurable: true,
      value
    });
  }
  function createInstanceofPredicate(name, theClass) {
    var propName = "isMobX" + name;
    theClass.prototype[propName] = true;
    return function(x2) {
      return isObject(x2) && x2[propName] === true;
    };
  }
  function isES6Map(thing) {
    return thing instanceof Map;
  }
  function isES6Set(thing) {
    return thing instanceof Set;
  }
  var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";
  function getPlainObjectKeys(object2) {
    var keys = Object.keys(object2);
    if (!hasGetOwnPropertySymbols) {
      return keys;
    }
    var symbols = Object.getOwnPropertySymbols(object2);
    if (!symbols.length) {
      return keys;
    }
    return [].concat(keys, symbols.filter(function(s2) {
      return objectPrototype.propertyIsEnumerable.call(object2, s2);
    }));
  }
  var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function(obj) {
    return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
  } : Object.getOwnPropertyNames;
  function stringifyKey(key) {
    if (typeof key === "string") {
      return key;
    }
    if (typeof key === "symbol") {
      return key.toString();
    }
    return new String(key).toString();
  }
  function toPrimitive(value) {
    return value === null ? null : typeof value === "object" ? "" + value : value;
  }
  function hasProp(target, prop) {
    return objectPrototype.hasOwnProperty.call(target, prop);
  }
  var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(target) {
    var res = {};
    ownKeys(target).forEach(function(key) {
      res[key] = getDescriptor(target, key);
    });
    return res;
  };
  function _defineProperties(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }
  function _setPrototypeOf(o2, p2) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf(o2, p2);
  }
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor)
      n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
      arr2[i2] = arr[i2];
    return arr2;
  }
  function _createForOfIteratorHelperLoose(o2, allowArrayLike) {
    var it2 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (it2)
      return (it2 = it2.call(o2)).next.bind(it2);
    if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
      if (it2)
        o2 = it2;
      var i2 = 0;
      return function() {
        if (i2 >= o2.length)
          return {
            done: true
          };
        return {
          done: false,
          value: o2[i2++]
        };
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var storedAnnotationsSymbol = /* @__PURE__ */ Symbol("mobx-stored-annotations");
  function createDecoratorAnnotation(annotation) {
    function decorator(target, property) {
      storeAnnotation(target, property, annotation);
    }
    return Object.assign(decorator, annotation);
  }
  function storeAnnotation(prototype, key, annotation) {
    if (!hasProp(prototype, storedAnnotationsSymbol)) {
      addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));
    }
    if (isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {
      var fieldName = prototype.constructor.name + ".prototype." + key.toString();
      die("'" + fieldName + "' is decorated with 'override', but no such decorated member was found on prototype.");
    }
    assertNotDecorated(prototype, annotation, key);
    if (!isOverride(annotation)) {
      prototype[storedAnnotationsSymbol][key] = annotation;
    }
  }
  function assertNotDecorated(prototype, annotation, key) {
    if (!isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {
      var fieldName = prototype.constructor.name + ".prototype." + key.toString();
      var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;
      var requestedAnnotationType = annotation.annotationType_;
      die("Cannot apply '@" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already decorated with '@" + currentAnnotationType + "'.") + "\nRe-decorating fields is not allowed.\nUse '@override' decorator for methods overridden by subclass.");
    }
  }
  function collectStoredAnnotations(target) {
    if (!hasProp(target, storedAnnotationsSymbol)) {
      if (!target[storedAnnotationsSymbol]) {
        die("No annotations were passed to makeObservable, but no decorated members have been found either");
      }
      addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));
    }
    return target[storedAnnotationsSymbol];
  }
  var $mobx = /* @__PURE__ */ Symbol("mobx administration");
  var Atom = /* @__PURE__ */ function() {
    function Atom2(name_) {
      if (name_ === void 0) {
        name_ = true ? "Atom@" + getNextId() : "Atom";
      }
      this.name_ = void 0;
      this.isPendingUnobservation_ = false;
      this.isBeingObserved_ = false;
      this.observers_ = /* @__PURE__ */ new Set();
      this.diffValue_ = 0;
      this.lastAccessedBy_ = 0;
      this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
      this.onBOL = void 0;
      this.onBUOL = void 0;
      this.name_ = name_;
    }
    var _proto = Atom2.prototype;
    _proto.onBO = function onBO() {
      if (this.onBOL) {
        this.onBOL.forEach(function(listener) {
          return listener();
        });
      }
    };
    _proto.onBUO = function onBUO() {
      if (this.onBUOL) {
        this.onBUOL.forEach(function(listener) {
          return listener();
        });
      }
    };
    _proto.reportObserved = function reportObserved$1() {
      return reportObserved(this);
    };
    _proto.reportChanged = function reportChanged() {
      startBatch();
      propagateChanged(this);
      endBatch();
    };
    _proto.toString = function toString2() {
      return this.name_;
    };
    return Atom2;
  }();
  var isAtom = /* @__PURE__ */ createInstanceofPredicate("Atom", Atom);
  function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
    if (onBecomeObservedHandler === void 0) {
      onBecomeObservedHandler = noop;
    }
    if (onBecomeUnobservedHandler === void 0) {
      onBecomeUnobservedHandler = noop;
    }
    var atom = new Atom(name);
    if (onBecomeObservedHandler !== noop) {
      onBecomeObserved(atom, onBecomeObservedHandler);
    }
    if (onBecomeUnobservedHandler !== noop) {
      onBecomeUnobserved(atom, onBecomeUnobservedHandler);
    }
    return atom;
  }
  function identityComparer(a2, b2) {
    return a2 === b2;
  }
  function structuralComparer(a2, b2) {
    return deepEqual(a2, b2);
  }
  function shallowComparer(a2, b2) {
    return deepEqual(a2, b2, 1);
  }
  function defaultComparer(a2, b2) {
    if (Object.is) {
      return Object.is(a2, b2);
    }
    return a2 === b2 ? a2 !== 0 || 1 / a2 === 1 / b2 : a2 !== a2 && b2 !== b2;
  }
  var comparer = {
    identity: identityComparer,
    structural: structuralComparer,
    "default": defaultComparer,
    shallow: shallowComparer
  };
  function deepEnhancer(v2, _15, name) {
    if (isObservable(v2)) {
      return v2;
    }
    if (Array.isArray(v2)) {
      return observable.array(v2, {
        name
      });
    }
    if (isPlainObject(v2)) {
      return observable.object(v2, void 0, {
        name
      });
    }
    if (isES6Map(v2)) {
      return observable.map(v2, {
        name
      });
    }
    if (isES6Set(v2)) {
      return observable.set(v2, {
        name
      });
    }
    if (typeof v2 === "function" && !isAction(v2) && !isFlow(v2)) {
      if (isGenerator(v2)) {
        return flow(v2);
      } else {
        return autoAction(name, v2);
      }
    }
    return v2;
  }
  function shallowEnhancer(v2, _15, name) {
    if (v2 === void 0 || v2 === null) {
      return v2;
    }
    if (isObservableObject(v2) || isObservableArray(v2) || isObservableMap(v2) || isObservableSet(v2)) {
      return v2;
    }
    if (Array.isArray(v2)) {
      return observable.array(v2, {
        name,
        deep: false
      });
    }
    if (isPlainObject(v2)) {
      return observable.object(v2, void 0, {
        name,
        deep: false
      });
    }
    if (isES6Map(v2)) {
      return observable.map(v2, {
        name,
        deep: false
      });
    }
    if (isES6Set(v2)) {
      return observable.set(v2, {
        name,
        deep: false
      });
    }
    if (true) {
      die("The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
    }
  }
  function referenceEnhancer(newValue) {
    return newValue;
  }
  function refStructEnhancer(v2, oldValue) {
    if (isObservable(v2)) {
      die("observable.struct should not be used with observable values");
    }
    if (deepEqual(v2, oldValue)) {
      return oldValue;
    }
    return v2;
  }
  var OVERRIDE = "override";
  function isOverride(annotation) {
    return annotation.annotationType_ === OVERRIDE;
  }
  function createActionAnnotation(name, options) {
    return {
      annotationType_: name,
      options_: options,
      make_: make_$1,
      extend_: extend_$1
    };
  }
  function make_$1(adm, key, descriptor, source) {
    var _this$options_;
    if ((_this$options_ = this.options_) != null && _this$options_.bound) {
      return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
    }
    if (source === adm.target_) {
      return this.extend_(adm, key, descriptor, false) === null ? 0 : 2;
    }
    if (isAction(descriptor.value)) {
      return 1;
    }
    var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);
    defineProperty(source, key, actionDescriptor);
    return 2;
  }
  function extend_$1(adm, key, descriptor, proxyTrap) {
    var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
    return adm.defineProperty_(key, actionDescriptor, proxyTrap);
  }
  function assertActionDescriptor(adm, _ref, key, _ref2) {
    var annotationType_ = _ref.annotationType_;
    var value = _ref2.value;
    if (!isFunction(value)) {
      die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a function value."));
    }
  }
  function createActionDescriptor(adm, annotation, key, descriptor, safeDescriptors) {
    var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;
    if (safeDescriptors === void 0) {
      safeDescriptors = globalState.safeDescriptors;
    }
    assertActionDescriptor(adm, annotation, key, descriptor);
    var value = descriptor.value;
    if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {
      var _adm$proxy_;
      value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
    }
    return {
      value: createAction(
        (_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(),
        value,
        (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false,
        (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : void 0
      ),
      configurable: safeDescriptors ? adm.isPlainObject_ : true,
      enumerable: false,
      writable: safeDescriptors ? false : true
    };
  }
  function createFlowAnnotation(name, options) {
    return {
      annotationType_: name,
      options_: options,
      make_: make_$2,
      extend_: extend_$2
    };
  }
  function make_$2(adm, key, descriptor, source) {
    var _this$options_;
    if (source === adm.target_) {
      return this.extend_(adm, key, descriptor, false) === null ? 0 : 2;
    }
    if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {
      if (this.extend_(adm, key, descriptor, false) === null) {
        return 0;
      }
    }
    if (isFlow(descriptor.value)) {
      return 1;
    }
    var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);
    defineProperty(source, key, flowDescriptor);
    return 2;
  }
  function extend_$2(adm, key, descriptor, proxyTrap) {
    var _this$options_2;
    var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);
    return adm.defineProperty_(key, flowDescriptor, proxyTrap);
  }
  function assertFlowDescriptor(adm, _ref, key, _ref2) {
    var annotationType_ = _ref.annotationType_;
    var value = _ref2.value;
    if (!isFunction(value)) {
      die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a generator function value."));
    }
  }
  function createFlowDescriptor(adm, annotation, key, descriptor, bound, safeDescriptors) {
    if (safeDescriptors === void 0) {
      safeDescriptors = globalState.safeDescriptors;
    }
    assertFlowDescriptor(adm, annotation, key, descriptor);
    var value = descriptor.value;
    if (!isFlow(value)) {
      value = flow(value);
    }
    if (bound) {
      var _adm$proxy_;
      value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
      value.isMobXFlow = true;
    }
    return {
      value,
      configurable: safeDescriptors ? adm.isPlainObject_ : true,
      enumerable: false,
      writable: safeDescriptors ? false : true
    };
  }
  function createComputedAnnotation(name, options) {
    return {
      annotationType_: name,
      options_: options,
      make_: make_$3,
      extend_: extend_$3
    };
  }
  function make_$3(adm, key, descriptor) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
  }
  function extend_$3(adm, key, descriptor, proxyTrap) {
    assertComputedDescriptor(adm, this, key, descriptor);
    return adm.defineComputedProperty_(key, _extends({}, this.options_, {
      get: descriptor.get,
      set: descriptor.set
    }), proxyTrap);
  }
  function assertComputedDescriptor(adm, _ref, key, _ref2) {
    var annotationType_ = _ref.annotationType_;
    var get3 = _ref2.get;
    if (!get3) {
      die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on getter(+setter) properties."));
    }
  }
  function createObservableAnnotation(name, options) {
    return {
      annotationType_: name,
      options_: options,
      make_: make_$4,
      extend_: extend_$4
    };
  }
  function make_$4(adm, key, descriptor) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
  }
  function extend_$4(adm, key, descriptor, proxyTrap) {
    var _this$options_$enhanc, _this$options_;
    assertObservableDescriptor(adm, this, key, descriptor);
    return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);
  }
  function assertObservableDescriptor(adm, _ref, key, descriptor) {
    var annotationType_ = _ref.annotationType_;
    if (!("value" in descriptor)) {
      die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' cannot be used on getter/setter properties"));
    }
  }
  var AUTO = "true";
  var autoAnnotation = /* @__PURE__ */ createAutoAnnotation();
  function createAutoAnnotation(options) {
    return {
      annotationType_: AUTO,
      options_: options,
      make_: make_$5,
      extend_: extend_$5
    };
  }
  function make_$5(adm, key, descriptor, source) {
    var _this$options_3, _this$options_4;
    if (descriptor.get) {
      return computed.make_(adm, key, descriptor, source);
    }
    if (descriptor.set) {
      var set4 = createAction(key.toString(), descriptor.set);
      if (source === adm.target_) {
        return adm.defineProperty_(key, {
          configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
          set: set4
        }) === null ? 0 : 2;
      }
      defineProperty(source, key, {
        configurable: true,
        set: set4
      });
      return 2;
    }
    if (source !== adm.target_ && typeof descriptor.value === "function") {
      var _this$options_2;
      if (isGenerator(descriptor.value)) {
        var _this$options_;
        var flowAnnotation2 = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;
        return flowAnnotation2.make_(adm, key, descriptor, source);
      }
      var actionAnnotation2 = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;
      return actionAnnotation2.make_(adm, key, descriptor, source);
    }
    var observableAnnotation2 = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable;
    if (typeof descriptor.value === "function" && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {
      var _adm$proxy_;
      descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
    }
    return observableAnnotation2.make_(adm, key, descriptor, source);
  }
  function extend_$5(adm, key, descriptor, proxyTrap) {
    var _this$options_5, _this$options_6;
    if (descriptor.get) {
      return computed.extend_(adm, key, descriptor, proxyTrap);
    }
    if (descriptor.set) {
      return adm.defineProperty_(key, {
        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
        set: createAction(key.toString(), descriptor.set)
      }, proxyTrap);
    }
    if (typeof descriptor.value === "function" && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {
      var _adm$proxy_2;
      descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);
    }
    var observableAnnotation2 = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;
    return observableAnnotation2.extend_(adm, key, descriptor, proxyTrap);
  }
  var OBSERVABLE = "observable";
  var OBSERVABLE_REF = "observable.ref";
  var OBSERVABLE_SHALLOW = "observable.shallow";
  var OBSERVABLE_STRUCT = "observable.struct";
  var defaultCreateObservableOptions = {
    deep: true,
    name: void 0,
    defaultDecorator: void 0,
    proxy: true
  };
  Object.freeze(defaultCreateObservableOptions);
  function asCreateObservableOptions(thing) {
    return thing || defaultCreateObservableOptions;
  }
  var observableAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE);
  var observableRefAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_REF, {
    enhancer: referenceEnhancer
  });
  var observableShallowAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_SHALLOW, {
    enhancer: shallowEnhancer
  });
  var observableStructAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_STRUCT, {
    enhancer: refStructEnhancer
  });
  var observableDecoratorAnnotation = /* @__PURE__ */ createDecoratorAnnotation(observableAnnotation);
  function getEnhancerFromOptions(options) {
    return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);
  }
  function getAnnotationFromOptions(options) {
    var _options$defaultDecor;
    return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : void 0;
  }
  function getEnhancerFromAnnotation(annotation) {
    var _annotation$options_$, _annotation$options_;
    return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
  }
  function createObservable(v2, arg2, arg3) {
    if (isStringish(arg2)) {
      storeAnnotation(v2, arg2, observableAnnotation);
      return;
    }
    if (isObservable(v2)) {
      return v2;
    }
    if (isPlainObject(v2)) {
      return observable.object(v2, arg2, arg3);
    }
    if (Array.isArray(v2)) {
      return observable.array(v2, arg2);
    }
    if (isES6Map(v2)) {
      return observable.map(v2, arg2);
    }
    if (isES6Set(v2)) {
      return observable.set(v2, arg2);
    }
    if (typeof v2 === "object" && v2 !== null) {
      return v2;
    }
    return observable.box(v2, arg2);
  }
  Object.assign(createObservable, observableDecoratorAnnotation);
  var observableFactories = {
    box: function box(value, options) {
      var o2 = asCreateObservableOptions(options);
      return new ObservableValue(value, getEnhancerFromOptions(o2), o2.name, true, o2.equals);
    },
    array: function array(initialValues, options) {
      var o2 = asCreateObservableOptions(options);
      return (globalState.useProxies === false || o2.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o2), o2.name);
    },
    map: function map(initialValues, options) {
      var o2 = asCreateObservableOptions(options);
      return new ObservableMap(initialValues, getEnhancerFromOptions(o2), o2.name);
    },
    set: function set(initialValues, options) {
      var o2 = asCreateObservableOptions(options);
      return new ObservableSet(initialValues, getEnhancerFromOptions(o2), o2.name);
    },
    object: function object(props, decorators, options) {
      return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);
    },
    ref: /* @__PURE__ */ createDecoratorAnnotation(observableRefAnnotation),
    shallow: /* @__PURE__ */ createDecoratorAnnotation(observableShallowAnnotation),
    deep: observableDecoratorAnnotation,
    struct: /* @__PURE__ */ createDecoratorAnnotation(observableStructAnnotation)
  };
  var observable = /* @__PURE__ */ assign(createObservable, observableFactories);
  var COMPUTED = "computed";
  var COMPUTED_STRUCT = "computed.struct";
  var computedAnnotation = /* @__PURE__ */ createComputedAnnotation(COMPUTED);
  var computedStructAnnotation = /* @__PURE__ */ createComputedAnnotation(COMPUTED_STRUCT, {
    equals: comparer.structural
  });
  var computed = function computed2(arg1, arg2) {
    if (isStringish(arg2)) {
      return storeAnnotation(arg1, arg2, computedAnnotation);
    }
    if (isPlainObject(arg1)) {
      return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
    }
    if (true) {
      if (!isFunction(arg1)) {
        die("First argument to `computed` should be an expression.");
      }
      if (isFunction(arg2)) {
        die("A setter as second argument is no longer supported, use `{ set: fn }` option instead");
      }
    }
    var opts = isPlainObject(arg2) ? arg2 : {};
    opts.get = arg1;
    opts.name || (opts.name = arg1.name || "");
    return new ComputedValue(opts);
  };
  Object.assign(computed, computedAnnotation);
  computed.struct = /* @__PURE__ */ createDecoratorAnnotation(computedStructAnnotation);
  var _getDescriptor$config;
  var _getDescriptor;
  var currentActionId = 0;
  var nextActionId = 1;
  var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /* @__PURE__ */ getDescriptor(function() {
  }, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false;
  var tmpNameDescriptor = {
    value: "action",
    configurable: true,
    writable: false,
    enumerable: false
  };
  function createAction(actionName, fn, autoAction2, ref) {
    if (autoAction2 === void 0) {
      autoAction2 = false;
    }
    if (true) {
      if (!isFunction(fn)) {
        die("`action` can only be invoked on functions");
      }
      if (typeof actionName !== "string" || !actionName) {
        die("actions should have valid names, got: '" + actionName + "'");
      }
    }
    function res() {
      return executeAction(actionName, autoAction2, fn, ref || this, arguments);
    }
    res.isMobxAction = true;
    if (isFunctionNameConfigurable) {
      tmpNameDescriptor.value = actionName;
      Object.defineProperty(res, "name", tmpNameDescriptor);
    }
    return res;
  }
  function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
    var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);
    try {
      return fn.apply(scope, args);
    } catch (err) {
      runInfo.error_ = err;
      throw err;
    } finally {
      _endAction(runInfo);
    }
  }
  function _startAction(actionName, canRunAsDerivation, scope, args) {
    var notifySpy_ = isSpyEnabled() && !!actionName;
    var startTime_ = 0;
    if (notifySpy_) {
      startTime_ = Date.now();
      var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;
      spyReportStart({
        type: ACTION,
        name: actionName,
        object: scope,
        arguments: flattenedArgs
      });
    }
    var prevDerivation_ = globalState.trackingDerivation;
    var runAsAction = !canRunAsDerivation || !prevDerivation_;
    startBatch();
    var prevAllowStateChanges_ = globalState.allowStateChanges;
    if (runAsAction) {
      untrackedStart();
      prevAllowStateChanges_ = allowStateChangesStart(true);
    }
    var prevAllowStateReads_ = allowStateReadsStart(true);
    var runInfo = {
      runAsAction_: runAsAction,
      prevDerivation_,
      prevAllowStateChanges_,
      prevAllowStateReads_,
      notifySpy_,
      startTime_,
      actionId_: nextActionId++,
      parentActionId_: currentActionId
    };
    currentActionId = runInfo.actionId_;
    return runInfo;
  }
  function _endAction(runInfo) {
    if (currentActionId !== runInfo.actionId_) {
      die(30);
    }
    currentActionId = runInfo.parentActionId_;
    if (runInfo.error_ !== void 0) {
      globalState.suppressReactionErrors = true;
    }
    allowStateChangesEnd(runInfo.prevAllowStateChanges_);
    allowStateReadsEnd(runInfo.prevAllowStateReads_);
    endBatch();
    if (runInfo.runAsAction_) {
      untrackedEnd(runInfo.prevDerivation_);
    }
    if (runInfo.notifySpy_) {
      spyReportEnd({
        time: Date.now() - runInfo.startTime_
      });
    }
    globalState.suppressReactionErrors = false;
  }
  function allowStateChanges(allowStateChanges2, func) {
    var prev = allowStateChangesStart(allowStateChanges2);
    try {
      return func();
    } finally {
      allowStateChangesEnd(prev);
    }
  }
  function allowStateChangesStart(allowStateChanges2) {
    var prev = globalState.allowStateChanges;
    globalState.allowStateChanges = allowStateChanges2;
    return prev;
  }
  function allowStateChangesEnd(prev) {
    globalState.allowStateChanges = prev;
  }
  var _Symbol$toPrimitive;
  var CREATE = "create";
  _Symbol$toPrimitive = Symbol.toPrimitive;
  var ObservableValue = /* @__PURE__ */ function(_Atom) {
    _inheritsLoose(ObservableValue2, _Atom);
    function ObservableValue2(value, enhancer, name_, notifySpy, equals) {
      var _this;
      if (name_ === void 0) {
        name_ = true ? "ObservableValue@" + getNextId() : "ObservableValue";
      }
      if (notifySpy === void 0) {
        notifySpy = true;
      }
      if (equals === void 0) {
        equals = comparer["default"];
      }
      _this = _Atom.call(this, name_) || this;
      _this.enhancer = void 0;
      _this.name_ = void 0;
      _this.equals = void 0;
      _this.hasUnreportedChange_ = false;
      _this.interceptors_ = void 0;
      _this.changeListeners_ = void 0;
      _this.value_ = void 0;
      _this.dehancer = void 0;
      _this.enhancer = enhancer;
      _this.name_ = name_;
      _this.equals = equals;
      _this.value_ = enhancer(value, void 0, name_);
      if (notifySpy && isSpyEnabled()) {
        spyReport({
          type: CREATE,
          object: _assertThisInitialized(_this),
          observableKind: "value",
          debugObjectName: _this.name_,
          newValue: "" + _this.value_
        });
      }
      return _this;
    }
    var _proto = ObservableValue2.prototype;
    _proto.dehanceValue = function dehanceValue(value) {
      if (this.dehancer !== void 0) {
        return this.dehancer(value);
      }
      return value;
    };
    _proto.set = function set4(newValue) {
      var oldValue = this.value_;
      newValue = this.prepareNewValue_(newValue);
      if (newValue !== globalState.UNCHANGED) {
        var notifySpy = isSpyEnabled();
        if (notifySpy) {
          spyReportStart({
            type: UPDATE,
            object: this,
            observableKind: "value",
            debugObjectName: this.name_,
            newValue,
            oldValue
          });
        }
        this.setNewValue_(newValue);
        if (notifySpy) {
          spyReportEnd();
        }
      }
    };
    _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
      checkIfStateModificationsAreAllowed(this);
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this,
          type: UPDATE,
          newValue
        });
        if (!change) {
          return globalState.UNCHANGED;
        }
        newValue = change.newValue;
      }
      newValue = this.enhancer(newValue, this.value_, this.name_);
      return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
    };
    _proto.setNewValue_ = function setNewValue_(newValue) {
      var oldValue = this.value_;
      this.value_ = newValue;
      this.reportChanged();
      if (hasListeners(this)) {
        notifyListeners(this, {
          type: UPDATE,
          object: this,
          newValue,
          oldValue
        });
      }
    };
    _proto.get = function get3() {
      this.reportObserved();
      return this.dehanceValue(this.value_);
    };
    _proto.intercept_ = function intercept_(handler) {
      return registerInterceptor(this, handler);
    };
    _proto.observe_ = function observe_(listener, fireImmediately) {
      if (fireImmediately) {
        listener({
          observableKind: "value",
          debugObjectName: this.name_,
          object: this,
          type: UPDATE,
          newValue: this.value_,
          oldValue: void 0
        });
      }
      return registerListener(this, listener);
    };
    _proto.raw = function raw() {
      return this.value_;
    };
    _proto.toJSON = function toJSON2() {
      return this.get();
    };
    _proto.toString = function toString2() {
      return this.name_ + "[" + this.value_ + "]";
    };
    _proto.valueOf = function valueOf() {
      return toPrimitive(this.get());
    };
    _proto[_Symbol$toPrimitive] = function() {
      return this.valueOf();
    };
    return ObservableValue2;
  }(Atom);
  var _Symbol$toPrimitive$1;
  _Symbol$toPrimitive$1 = Symbol.toPrimitive;
  var ComputedValue = /* @__PURE__ */ function() {
    function ComputedValue2(options) {
      this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
      this.observing_ = [];
      this.newObserving_ = null;
      this.isBeingObserved_ = false;
      this.isPendingUnobservation_ = false;
      this.observers_ = /* @__PURE__ */ new Set();
      this.diffValue_ = 0;
      this.runId_ = 0;
      this.lastAccessedBy_ = 0;
      this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
      this.unboundDepsCount_ = 0;
      this.value_ = new CaughtException(null);
      this.name_ = void 0;
      this.triggeredBy_ = void 0;
      this.isComputing_ = false;
      this.isRunningSetter_ = false;
      this.derivation = void 0;
      this.setter_ = void 0;
      this.isTracing_ = TraceMode.NONE;
      this.scope_ = void 0;
      this.equals_ = void 0;
      this.requiresReaction_ = void 0;
      this.keepAlive_ = void 0;
      this.onBOL = void 0;
      this.onBUOL = void 0;
      if (!options.get) {
        die(31);
      }
      this.derivation = options.get;
      this.name_ = options.name || (true ? "ComputedValue@" + getNextId() : "ComputedValue");
      if (options.set) {
        this.setter_ = createAction(true ? this.name_ + "-setter" : "ComputedValue-setter", options.set);
      }
      this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);
      this.scope_ = options.context;
      this.requiresReaction_ = options.requiresReaction;
      this.keepAlive_ = !!options.keepAlive;
    }
    var _proto = ComputedValue2.prototype;
    _proto.onBecomeStale_ = function onBecomeStale_() {
      propagateMaybeChanged(this);
    };
    _proto.onBO = function onBO() {
      if (this.onBOL) {
        this.onBOL.forEach(function(listener) {
          return listener();
        });
      }
    };
    _proto.onBUO = function onBUO() {
      if (this.onBUOL) {
        this.onBUOL.forEach(function(listener) {
          return listener();
        });
      }
    };
    _proto.get = function get3() {
      if (this.isComputing_) {
        die(32, this.name_, this.derivation);
      }
      if (globalState.inBatch === 0 && this.observers_.size === 0 && !this.keepAlive_) {
        if (shouldCompute(this)) {
          this.warnAboutUntrackedRead_();
          startBatch();
          this.value_ = this.computeValue_(false);
          endBatch();
        }
      } else {
        reportObserved(this);
        if (shouldCompute(this)) {
          var prevTrackingContext = globalState.trackingContext;
          if (this.keepAlive_ && !prevTrackingContext) {
            globalState.trackingContext = this;
          }
          if (this.trackAndCompute()) {
            propagateChangeConfirmed(this);
          }
          globalState.trackingContext = prevTrackingContext;
        }
      }
      var result = this.value_;
      if (isCaughtException(result)) {
        throw result.cause;
      }
      return result;
    };
    _proto.set = function set4(value) {
      if (this.setter_) {
        if (this.isRunningSetter_) {
          die(33, this.name_);
        }
        this.isRunningSetter_ = true;
        try {
          this.setter_.call(this.scope_, value);
        } finally {
          this.isRunningSetter_ = false;
        }
      } else {
        die(34, this.name_);
      }
    };
    _proto.trackAndCompute = function trackAndCompute() {
      var oldValue = this.value_;
      var wasSuspended = this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;
      var newValue = this.computeValue_(true);
      var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);
      if (changed) {
        this.value_ = newValue;
        if (isSpyEnabled()) {
          spyReport({
            observableKind: "computed",
            debugObjectName: this.name_,
            object: this.scope_,
            type: "update",
            oldValue,
            newValue
          });
        }
      }
      return changed;
    };
    _proto.computeValue_ = function computeValue_(track) {
      this.isComputing_ = true;
      var prev = allowStateChangesStart(false);
      var res;
      if (track) {
        res = trackDerivedFunction(this, this.derivation, this.scope_);
      } else {
        if (globalState.disableErrorBoundaries === true) {
          res = this.derivation.call(this.scope_);
        } else {
          try {
            res = this.derivation.call(this.scope_);
          } catch (e2) {
            res = new CaughtException(e2);
          }
        }
      }
      allowStateChangesEnd(prev);
      this.isComputing_ = false;
      return res;
    };
    _proto.suspend_ = function suspend_() {
      if (!this.keepAlive_) {
        clearObserving(this);
        this.value_ = void 0;
        if (this.isTracing_ !== TraceMode.NONE) {
          console.log("[mobx.trace] Computed value '" + this.name_ + "' was suspended and it will recompute on the next access.");
        }
      }
    };
    _proto.observe_ = function observe_(listener, fireImmediately) {
      var _this = this;
      var firstTime = true;
      var prevValue = void 0;
      return autorun(function() {
        var newValue = _this.get();
        if (!firstTime || fireImmediately) {
          var prevU = untrackedStart();
          listener({
            observableKind: "computed",
            debugObjectName: _this.name_,
            type: UPDATE,
            object: _this,
            newValue,
            oldValue: prevValue
          });
          untrackedEnd(prevU);
        }
        firstTime = false;
        prevValue = newValue;
      });
    };
    _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
      if (false) {
        return;
      }
      if (this.isTracing_ !== TraceMode.NONE) {
        console.log("[mobx.trace] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
      }
      if (typeof this.requiresReaction_ === "boolean" ? this.requiresReaction_ : globalState.computedRequiresReaction) {
        console.warn("[mobx] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
      }
    };
    _proto.toString = function toString2() {
      return this.name_ + "[" + this.derivation.toString() + "]";
    };
    _proto.valueOf = function valueOf() {
      return toPrimitive(this.get());
    };
    _proto[_Symbol$toPrimitive$1] = function() {
      return this.valueOf();
    };
    return ComputedValue2;
  }();
  var isComputedValue = /* @__PURE__ */ createInstanceofPredicate("ComputedValue", ComputedValue);
  var IDerivationState_;
  (function(IDerivationState_2) {
    IDerivationState_2[IDerivationState_2["NOT_TRACKING_"] = -1] = "NOT_TRACKING_";
    IDerivationState_2[IDerivationState_2["UP_TO_DATE_"] = 0] = "UP_TO_DATE_";
    IDerivationState_2[IDerivationState_2["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_";
    IDerivationState_2[IDerivationState_2["STALE_"] = 2] = "STALE_";
  })(IDerivationState_ || (IDerivationState_ = {}));
  var TraceMode;
  (function(TraceMode2) {
    TraceMode2[TraceMode2["NONE"] = 0] = "NONE";
    TraceMode2[TraceMode2["LOG"] = 1] = "LOG";
    TraceMode2[TraceMode2["BREAK"] = 2] = "BREAK";
  })(TraceMode || (TraceMode = {}));
  var CaughtException = function CaughtException2(cause) {
    this.cause = void 0;
    this.cause = cause;
  };
  function isCaughtException(e2) {
    return e2 instanceof CaughtException;
  }
  function shouldCompute(derivation) {
    switch (derivation.dependenciesState_) {
      case IDerivationState_.UP_TO_DATE_:
        return false;
      case IDerivationState_.NOT_TRACKING_:
      case IDerivationState_.STALE_:
        return true;
      case IDerivationState_.POSSIBLY_STALE_: {
        var prevAllowStateReads = allowStateReadsStart(true);
        var prevUntracked = untrackedStart();
        var obs = derivation.observing_, l2 = obs.length;
        for (var i2 = 0; i2 < l2; i2++) {
          var obj = obs[i2];
          if (isComputedValue(obj)) {
            if (globalState.disableErrorBoundaries) {
              obj.get();
            } else {
              try {
                obj.get();
              } catch (e2) {
                untrackedEnd(prevUntracked);
                allowStateReadsEnd(prevAllowStateReads);
                return true;
              }
            }
            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
              untrackedEnd(prevUntracked);
              allowStateReadsEnd(prevAllowStateReads);
              return true;
            }
          }
        }
        changeDependenciesStateTo0(derivation);
        untrackedEnd(prevUntracked);
        allowStateReadsEnd(prevAllowStateReads);
        return false;
      }
    }
  }
  function checkIfStateModificationsAreAllowed(atom) {
    if (false) {
      return;
    }
    var hasObservers = atom.observers_.size > 0;
    if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always")) {
      console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ") + atom.name_);
    }
  }
  function checkIfStateReadsAreAllowed(observable2) {
    if (!globalState.allowStateReads && globalState.observableRequiresReaction) {
      console.warn("[mobx] Observable '" + observable2.name_ + "' being read outside a reactive context.");
    }
  }
  function trackDerivedFunction(derivation, f2, context) {
    var prevAllowStateReads = allowStateReadsStart(true);
    changeDependenciesStateTo0(derivation);
    derivation.newObserving_ = new Array(derivation.observing_.length + 100);
    derivation.unboundDepsCount_ = 0;
    derivation.runId_ = ++globalState.runId;
    var prevTracking = globalState.trackingDerivation;
    globalState.trackingDerivation = derivation;
    globalState.inBatch++;
    var result;
    if (globalState.disableErrorBoundaries === true) {
      result = f2.call(context);
    } else {
      try {
        result = f2.call(context);
      } catch (e2) {
        result = new CaughtException(e2);
      }
    }
    globalState.inBatch--;
    globalState.trackingDerivation = prevTracking;
    bindDependencies(derivation);
    warnAboutDerivationWithoutDependencies(derivation);
    allowStateReadsEnd(prevAllowStateReads);
    return result;
  }
  function warnAboutDerivationWithoutDependencies(derivation) {
    if (false) {
      return;
    }
    if (derivation.observing_.length !== 0) {
      return;
    }
    if (typeof derivation.requiresObservable_ === "boolean" ? derivation.requiresObservable_ : globalState.reactionRequiresObservable) {
      console.warn("[mobx] Derivation '" + derivation.name_ + "' is created/updated without reading any observable value.");
    }
  }
  function bindDependencies(derivation) {
    var prevObserving = derivation.observing_;
    var observing = derivation.observing_ = derivation.newObserving_;
    var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;
    var i0 = 0, l2 = derivation.unboundDepsCount_;
    for (var i2 = 0; i2 < l2; i2++) {
      var dep = observing[i2];
      if (dep.diffValue_ === 0) {
        dep.diffValue_ = 1;
        if (i0 !== i2) {
          observing[i0] = dep;
        }
        i0++;
      }
      if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
        lowestNewObservingDerivationState = dep.dependenciesState_;
      }
    }
    observing.length = i0;
    derivation.newObserving_ = null;
    l2 = prevObserving.length;
    while (l2--) {
      var _dep = prevObserving[l2];
      if (_dep.diffValue_ === 0) {
        removeObserver(_dep, derivation);
      }
      _dep.diffValue_ = 0;
    }
    while (i0--) {
      var _dep2 = observing[i0];
      if (_dep2.diffValue_ === 1) {
        _dep2.diffValue_ = 0;
        addObserver(_dep2, derivation);
      }
    }
    if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
      derivation.dependenciesState_ = lowestNewObservingDerivationState;
      derivation.onBecomeStale_();
    }
  }
  function clearObserving(derivation) {
    var obs = derivation.observing_;
    derivation.observing_ = [];
    var i2 = obs.length;
    while (i2--) {
      removeObserver(obs[i2], derivation);
    }
    derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
  }
  function untracked(action2) {
    var prev = untrackedStart();
    try {
      return action2();
    } finally {
      untrackedEnd(prev);
    }
  }
  function untrackedStart() {
    var prev = globalState.trackingDerivation;
    globalState.trackingDerivation = null;
    return prev;
  }
  function untrackedEnd(prev) {
    globalState.trackingDerivation = prev;
  }
  function allowStateReadsStart(allowStateReads) {
    var prev = globalState.allowStateReads;
    globalState.allowStateReads = allowStateReads;
    return prev;
  }
  function allowStateReadsEnd(prev) {
    globalState.allowStateReads = prev;
  }
  function changeDependenciesStateTo0(derivation) {
    if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      return;
    }
    derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
    var obs = derivation.observing_;
    var i2 = obs.length;
    while (i2--) {
      obs[i2].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    }
  }
  var MobXGlobals = function MobXGlobals2() {
    this.version = 6;
    this.UNCHANGED = {};
    this.trackingDerivation = null;
    this.trackingContext = null;
    this.runId = 0;
    this.mobxGuid = 0;
    this.inBatch = 0;
    this.pendingUnobservations = [];
    this.pendingReactions = [];
    this.isRunningReactions = false;
    this.allowStateChanges = false;
    this.allowStateReads = true;
    this.enforceActions = true;
    this.spyListeners = [];
    this.globalReactionErrorHandlers = [];
    this.computedRequiresReaction = false;
    this.reactionRequiresObservable = false;
    this.observableRequiresReaction = false;
    this.disableErrorBoundaries = false;
    this.suppressReactionErrors = false;
    this.useProxies = true;
    this.verifyProxies = false;
    this.safeDescriptors = true;
  };
  var canMergeGlobalState = true;
  var isolateCalled = false;
  var globalState = /* @__PURE__ */ function() {
    var global2 = /* @__PURE__ */ getGlobal();
    if (global2.__mobxInstanceCount > 0 && !global2.__mobxGlobals) {
      canMergeGlobalState = false;
    }
    if (global2.__mobxGlobals && global2.__mobxGlobals.version !== new MobXGlobals().version) {
      canMergeGlobalState = false;
    }
    if (!canMergeGlobalState) {
      setTimeout(function() {
        if (!isolateCalled) {
          die(35);
        }
      }, 1);
      return new MobXGlobals();
    } else if (global2.__mobxGlobals) {
      global2.__mobxInstanceCount += 1;
      if (!global2.__mobxGlobals.UNCHANGED) {
        global2.__mobxGlobals.UNCHANGED = {};
      }
      return global2.__mobxGlobals;
    } else {
      global2.__mobxInstanceCount = 1;
      return global2.__mobxGlobals = /* @__PURE__ */ new MobXGlobals();
    }
  }();
  function isolateGlobalState() {
    if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) {
      die(36);
    }
    isolateCalled = true;
    if (canMergeGlobalState) {
      var global2 = getGlobal();
      if (--global2.__mobxInstanceCount === 0) {
        global2.__mobxGlobals = void 0;
      }
      globalState = new MobXGlobals();
    }
  }
  function addObserver(observable2, node) {
    observable2.observers_.add(node);
    if (observable2.lowestObserverState_ > node.dependenciesState_) {
      observable2.lowestObserverState_ = node.dependenciesState_;
    }
  }
  function removeObserver(observable2, node) {
    observable2.observers_["delete"](node);
    if (observable2.observers_.size === 0) {
      queueForUnobservation(observable2);
    }
  }
  function queueForUnobservation(observable2) {
    if (observable2.isPendingUnobservation_ === false) {
      observable2.isPendingUnobservation_ = true;
      globalState.pendingUnobservations.push(observable2);
    }
  }
  function startBatch() {
    globalState.inBatch++;
  }
  function endBatch() {
    if (--globalState.inBatch === 0) {
      runReactions();
      var list = globalState.pendingUnobservations;
      for (var i2 = 0; i2 < list.length; i2++) {
        var observable2 = list[i2];
        observable2.isPendingUnobservation_ = false;
        if (observable2.observers_.size === 0) {
          if (observable2.isBeingObserved_) {
            observable2.isBeingObserved_ = false;
            observable2.onBUO();
          }
          if (observable2 instanceof ComputedValue) {
            observable2.suspend_();
          }
        }
      }
      globalState.pendingUnobservations = [];
    }
  }
  function reportObserved(observable2) {
    checkIfStateReadsAreAllowed(observable2);
    var derivation = globalState.trackingDerivation;
    if (derivation !== null) {
      if (derivation.runId_ !== observable2.lastAccessedBy_) {
        observable2.lastAccessedBy_ = derivation.runId_;
        derivation.newObserving_[derivation.unboundDepsCount_++] = observable2;
        if (!observable2.isBeingObserved_ && globalState.trackingContext) {
          observable2.isBeingObserved_ = true;
          observable2.onBO();
        }
      }
      return true;
    } else if (observable2.observers_.size === 0 && globalState.inBatch > 0) {
      queueForUnobservation(observable2);
    }
    return false;
  }
  function propagateChanged(observable2) {
    if (observable2.lowestObserverState_ === IDerivationState_.STALE_) {
      return;
    }
    observable2.lowestObserverState_ = IDerivationState_.STALE_;
    observable2.observers_.forEach(function(d2) {
      if (d2.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
        if (d2.isTracing_ !== TraceMode.NONE) {
          logTraceInfo(d2, observable2);
        }
        d2.onBecomeStale_();
      }
      d2.dependenciesState_ = IDerivationState_.STALE_;
    });
  }
  function propagateChangeConfirmed(observable2) {
    if (observable2.lowestObserverState_ === IDerivationState_.STALE_) {
      return;
    }
    observable2.lowestObserverState_ = IDerivationState_.STALE_;
    observable2.observers_.forEach(function(d2) {
      if (d2.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {
        d2.dependenciesState_ = IDerivationState_.STALE_;
        if (d2.isTracing_ !== TraceMode.NONE) {
          logTraceInfo(d2, observable2);
        }
      } else if (d2.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
        observable2.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
      }
    });
  }
  function propagateMaybeChanged(observable2) {
    if (observable2.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {
      return;
    }
    observable2.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
    observable2.observers_.forEach(function(d2) {
      if (d2.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
        d2.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;
        d2.onBecomeStale_();
      }
    });
  }
  function logTraceInfo(derivation, observable2) {
    console.log("[mobx.trace] '" + derivation.name_ + "' is invalidated due to a change in: '" + observable2.name_ + "'");
    if (derivation.isTracing_ === TraceMode.BREAK) {
      var lines = [];
      printDepTree(getDependencyTree(derivation), lines, 1);
      new Function("debugger;\n/*\nTracing '" + derivation.name_ + "'\n\nYou are entering this break point because derivation '" + derivation.name_ + "' is being traced and '" + observable2.name_ + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
    }
  }
  function printDepTree(tree, lines, depth) {
    if (lines.length >= 1e3) {
      lines.push("(and many more)");
      return;
    }
    lines.push("" + "	".repeat(depth - 1) + tree.name);
    if (tree.dependencies) {
      tree.dependencies.forEach(function(child) {
        return printDepTree(child, lines, depth + 1);
      });
    }
  }
  var Reaction = /* @__PURE__ */ function() {
    function Reaction2(name_, onInvalidate_, errorHandler_, requiresObservable_) {
      if (name_ === void 0) {
        name_ = true ? "Reaction@" + getNextId() : "Reaction";
      }
      this.name_ = void 0;
      this.onInvalidate_ = void 0;
      this.errorHandler_ = void 0;
      this.requiresObservable_ = void 0;
      this.observing_ = [];
      this.newObserving_ = [];
      this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
      this.diffValue_ = 0;
      this.runId_ = 0;
      this.unboundDepsCount_ = 0;
      this.isDisposed_ = false;
      this.isScheduled_ = false;
      this.isTrackPending_ = false;
      this.isRunning_ = false;
      this.isTracing_ = TraceMode.NONE;
      this.name_ = name_;
      this.onInvalidate_ = onInvalidate_;
      this.errorHandler_ = errorHandler_;
      this.requiresObservable_ = requiresObservable_;
    }
    var _proto = Reaction2.prototype;
    _proto.onBecomeStale_ = function onBecomeStale_() {
      this.schedule_();
    };
    _proto.schedule_ = function schedule_() {
      if (!this.isScheduled_) {
        this.isScheduled_ = true;
        globalState.pendingReactions.push(this);
        runReactions();
      }
    };
    _proto.isScheduled = function isScheduled() {
      return this.isScheduled_;
    };
    _proto.runReaction_ = function runReaction_() {
      if (!this.isDisposed_) {
        startBatch();
        this.isScheduled_ = false;
        var prev = globalState.trackingContext;
        globalState.trackingContext = this;
        if (shouldCompute(this)) {
          this.isTrackPending_ = true;
          try {
            this.onInvalidate_();
            if (this.isTrackPending_ && isSpyEnabled()) {
              spyReport({
                name: this.name_,
                type: "scheduled-reaction"
              });
            }
          } catch (e2) {
            this.reportExceptionInDerivation_(e2);
          }
        }
        globalState.trackingContext = prev;
        endBatch();
      }
    };
    _proto.track = function track(fn) {
      if (this.isDisposed_) {
        return;
      }
      startBatch();
      var notify = isSpyEnabled();
      var startTime;
      if (notify) {
        startTime = Date.now();
        spyReportStart({
          name: this.name_,
          type: "reaction"
        });
      }
      this.isRunning_ = true;
      var prevReaction = globalState.trackingContext;
      globalState.trackingContext = this;
      var result = trackDerivedFunction(this, fn, void 0);
      globalState.trackingContext = prevReaction;
      this.isRunning_ = false;
      this.isTrackPending_ = false;
      if (this.isDisposed_) {
        clearObserving(this);
      }
      if (isCaughtException(result)) {
        this.reportExceptionInDerivation_(result.cause);
      }
      if (notify) {
        spyReportEnd({
          time: Date.now() - startTime
        });
      }
      endBatch();
    };
    _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
      var _this = this;
      if (this.errorHandler_) {
        this.errorHandler_(error, this);
        return;
      }
      if (globalState.disableErrorBoundaries) {
        throw error;
      }
      var message = true ? "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'" : "[mobx] uncaught error in '" + this + "'";
      if (!globalState.suppressReactionErrors) {
        console.error(message, error);
      } else if (true) {
        console.warn("[mobx] (error in reaction '" + this.name_ + "' suppressed, fix error of causing action below)");
      }
      if (isSpyEnabled()) {
        spyReport({
          type: "error",
          name: this.name_,
          message,
          error: "" + error
        });
      }
      globalState.globalReactionErrorHandlers.forEach(function(f2) {
        return f2(error, _this);
      });
    };
    _proto.dispose = function dispose() {
      if (!this.isDisposed_) {
        this.isDisposed_ = true;
        if (!this.isRunning_) {
          startBatch();
          clearObserving(this);
          endBatch();
        }
      }
    };
    _proto.getDisposer_ = function getDisposer_() {
      var r2 = this.dispose.bind(this);
      r2[$mobx] = this;
      return r2;
    };
    _proto.toString = function toString2() {
      return "Reaction[" + this.name_ + "]";
    };
    _proto.trace = function trace$1(enterBreakPoint) {
      if (enterBreakPoint === void 0) {
        enterBreakPoint = false;
      }
      trace(this, enterBreakPoint);
    };
    return Reaction2;
  }();
  var MAX_REACTION_ITERATIONS = 100;
  var reactionScheduler = function reactionScheduler2(f2) {
    return f2();
  };
  function runReactions() {
    if (globalState.inBatch > 0 || globalState.isRunningReactions) {
      return;
    }
    reactionScheduler(runReactionsHelper);
  }
  function runReactionsHelper() {
    globalState.isRunningReactions = true;
    var allReactions = globalState.pendingReactions;
    var iterations = 0;
    while (allReactions.length > 0) {
      if (++iterations === MAX_REACTION_ITERATIONS) {
        console.error(true ? "Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]) : "[mobx] cycle in reaction: " + allReactions[0]);
        allReactions.splice(0);
      }
      var remainingReactions = allReactions.splice(0);
      for (var i2 = 0, l2 = remainingReactions.length; i2 < l2; i2++) {
        remainingReactions[i2].runReaction_();
      }
    }
    globalState.isRunningReactions = false;
  }
  var isReaction = /* @__PURE__ */ createInstanceofPredicate("Reaction", Reaction);
  function setReactionScheduler(fn) {
    var baseScheduler = reactionScheduler;
    reactionScheduler = function reactionScheduler3(f2) {
      return fn(function() {
        return baseScheduler(f2);
      });
    };
  }
  function isSpyEnabled() {
    return !!globalState.spyListeners.length;
  }
  function spyReport(event) {
    if (false) {
      return;
    }
    if (!globalState.spyListeners.length) {
      return;
    }
    var listeners = globalState.spyListeners;
    for (var i2 = 0, l2 = listeners.length; i2 < l2; i2++) {
      listeners[i2](event);
    }
  }
  function spyReportStart(event) {
    if (false) {
      return;
    }
    var change = _extends({}, event, {
      spyReportStart: true
    });
    spyReport(change);
  }
  var END_EVENT = {
    type: "report-end",
    spyReportEnd: true
  };
  function spyReportEnd(change) {
    if (false) {
      return;
    }
    if (change) {
      spyReport(_extends({}, change, {
        type: "report-end",
        spyReportEnd: true
      }));
    } else {
      spyReport(END_EVENT);
    }
  }
  function spy(listener) {
    if (false) {
      console.warn("[mobx.spy] Is a no-op in production builds");
      return function() {
      };
    } else {
      globalState.spyListeners.push(listener);
      return once(function() {
        globalState.spyListeners = globalState.spyListeners.filter(function(l2) {
          return l2 !== listener;
        });
      });
    }
  }
  var ACTION = "action";
  var ACTION_BOUND = "action.bound";
  var AUTOACTION = "autoAction";
  var AUTOACTION_BOUND = "autoAction.bound";
  var DEFAULT_ACTION_NAME = "<unnamed action>";
  var actionAnnotation = /* @__PURE__ */ createActionAnnotation(ACTION);
  var actionBoundAnnotation = /* @__PURE__ */ createActionAnnotation(ACTION_BOUND, {
    bound: true
  });
  var autoActionAnnotation = /* @__PURE__ */ createActionAnnotation(AUTOACTION, {
    autoAction: true
  });
  var autoActionBoundAnnotation = /* @__PURE__ */ createActionAnnotation(AUTOACTION_BOUND, {
    autoAction: true,
    bound: true
  });
  function createActionFactory(autoAction2) {
    var res = function action2(arg1, arg2) {
      if (isFunction(arg1)) {
        return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction2);
      }
      if (isFunction(arg2)) {
        return createAction(arg1, arg2, autoAction2);
      }
      if (isStringish(arg2)) {
        return storeAnnotation(arg1, arg2, autoAction2 ? autoActionAnnotation : actionAnnotation);
      }
      if (isStringish(arg1)) {
        return createDecoratorAnnotation(createActionAnnotation(autoAction2 ? AUTOACTION : ACTION, {
          name: arg1,
          autoAction: autoAction2
        }));
      }
      if (true) {
        die("Invalid arguments for `action`");
      }
    };
    return res;
  }
  var action = /* @__PURE__ */ createActionFactory(false);
  Object.assign(action, actionAnnotation);
  var autoAction = /* @__PURE__ */ createActionFactory(true);
  Object.assign(autoAction, autoActionAnnotation);
  action.bound = /* @__PURE__ */ createDecoratorAnnotation(actionBoundAnnotation);
  autoAction.bound = /* @__PURE__ */ createDecoratorAnnotation(autoActionBoundAnnotation);
  function runInAction(fn) {
    return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, void 0);
  }
  function isAction(thing) {
    return isFunction(thing) && thing.isMobxAction === true;
  }
  function autorun(view, opts) {
    var _opts$name, _opts;
    if (opts === void 0) {
      opts = EMPTY_OBJECT;
    }
    if (true) {
      if (!isFunction(view)) {
        die("Autorun expects a function as first argument");
      }
      if (isAction(view)) {
        die("Autorun does not accept actions since actions are untrackable");
      }
    }
    var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name : true ? view.name || "Autorun@" + getNextId() : "Autorun";
    var runSync = !opts.scheduler && !opts.delay;
    var reaction;
    if (runSync) {
      reaction = new Reaction(name, function() {
        this.track(reactionRunner);
      }, opts.onError, opts.requiresObservable);
    } else {
      var scheduler = createSchedulerFromOptions(opts);
      var isScheduled = false;
      reaction = new Reaction(name, function() {
        if (!isScheduled) {
          isScheduled = true;
          scheduler(function() {
            isScheduled = false;
            if (!reaction.isDisposed_) {
              reaction.track(reactionRunner);
            }
          });
        }
      }, opts.onError, opts.requiresObservable);
    }
    function reactionRunner() {
      view(reaction);
    }
    reaction.schedule_();
    return reaction.getDisposer_();
  }
  var run = function run2(f2) {
    return f2();
  };
  function createSchedulerFromOptions(opts) {
    return opts.scheduler ? opts.scheduler : opts.delay ? function(f2) {
      return setTimeout(f2, opts.delay);
    } : run;
  }
  var ON_BECOME_OBSERVED = "onBO";
  var ON_BECOME_UNOBSERVED = "onBUO";
  function onBecomeObserved(thing, arg2, arg3) {
    return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
  }
  function onBecomeUnobserved(thing, arg2, arg3) {
    return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
  }
  function interceptHook(hook, thing, arg2, arg3) {
    var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
    var cb = isFunction(arg3) ? arg3 : arg2;
    var listenersKey = hook + "L";
    if (atom[listenersKey]) {
      atom[listenersKey].add(cb);
    } else {
      atom[listenersKey] = /* @__PURE__ */ new Set([cb]);
    }
    return function() {
      var hookListeners = atom[listenersKey];
      if (hookListeners) {
        hookListeners["delete"](cb);
        if (hookListeners.size === 0) {
          delete atom[listenersKey];
        }
      }
    };
  }
  var NEVER = "never";
  var ALWAYS = "always";
  var OBSERVED = "observed";
  function configure(options) {
    if (options.isolateGlobalState === true) {
      isolateGlobalState();
    }
    var useProxies = options.useProxies, enforceActions = options.enforceActions;
    if (useProxies !== void 0) {
      globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";
    }
    if (useProxies === "ifavailable") {
      globalState.verifyProxies = true;
    }
    if (enforceActions !== void 0) {
      var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
      globalState.enforceActions = ea;
      globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;
    }
    ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function(key) {
      if (key in options) {
        globalState[key] = !!options[key];
      }
    });
    globalState.allowStateReads = !globalState.observableRequiresReaction;
    if (globalState.disableErrorBoundaries === true) {
      console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
    }
    if (options.reactionScheduler) {
      setReactionScheduler(options.reactionScheduler);
    }
  }
  function extendObservable(target, properties, annotations, options) {
    if (true) {
      if (arguments.length > 4) {
        die("'extendObservable' expected 2-4 arguments");
      }
      if (typeof target !== "object") {
        die("'extendObservable' expects an object as first argument");
      }
      if (isObservableMap(target)) {
        die("'extendObservable' should not be used on maps, use map.merge instead");
      }
      if (!isPlainObject(properties)) {
        die("'extendObservable' only accepts plain objects as second argument");
      }
      if (isObservable(properties) || isObservable(annotations)) {
        die("Extending an object with another observable (object) is not supported");
      }
    }
    var descriptors = getOwnPropertyDescriptors(properties);
    var adm = asObservableObject(target, options)[$mobx];
    startBatch();
    try {
      ownKeys(descriptors).forEach(function(key) {
        adm.extend_(
          key,
          descriptors[key],
          !annotations ? true : key in annotations ? annotations[key] : true
        );
      });
    } finally {
      endBatch();
    }
    return target;
  }
  function getDependencyTree(thing, property) {
    return nodeToDependencyTree(getAtom(thing, property));
  }
  function nodeToDependencyTree(node) {
    var result = {
      name: node.name_
    };
    if (node.observing_ && node.observing_.length > 0) {
      result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
    }
    return result;
  }
  function unique(list) {
    return Array.from(new Set(list));
  }
  var generatorId = 0;
  function FlowCancellationError() {
    this.message = "FLOW_CANCELLED";
  }
  FlowCancellationError.prototype = /* @__PURE__ */ Object.create(Error.prototype);
  var flowAnnotation = /* @__PURE__ */ createFlowAnnotation("flow");
  var flowBoundAnnotation = /* @__PURE__ */ createFlowAnnotation("flow.bound", {
    bound: true
  });
  var flow = /* @__PURE__ */ Object.assign(function flow2(arg1, arg2) {
    if (isStringish(arg2)) {
      return storeAnnotation(arg1, arg2, flowAnnotation);
    }
    if (arguments.length !== 1) {
      die("Flow expects single argument with generator function");
    }
    var generator = arg1;
    var name = generator.name || "<unnamed flow>";
    var res = function res2() {
      var ctx = this;
      var args = arguments;
      var runId = ++generatorId;
      var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
      var rejector;
      var pendingPromise = void 0;
      var promise = new Promise(function(resolve, reject) {
        var stepId = 0;
        rejector = reject;
        function onFulfilled(res3) {
          pendingPromise = void 0;
          var ret;
          try {
            ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res3);
          } catch (e2) {
            return reject(e2);
          }
          next(ret);
        }
        function onRejected(err) {
          pendingPromise = void 0;
          var ret;
          try {
            ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);
          } catch (e2) {
            return reject(e2);
          }
          next(ret);
        }
        function next(ret) {
          if (isFunction(ret == null ? void 0 : ret.then)) {
            ret.then(next, reject);
            return;
          }
          if (ret.done) {
            return resolve(ret.value);
          }
          pendingPromise = Promise.resolve(ret.value);
          return pendingPromise.then(onFulfilled, onRejected);
        }
        onFulfilled(void 0);
      });
      promise.cancel = action(name + " - runid: " + runId + " - cancel", function() {
        try {
          if (pendingPromise) {
            cancelPromise(pendingPromise);
          }
          var _res = gen["return"](void 0);
          var yieldedPromise = Promise.resolve(_res.value);
          yieldedPromise.then(noop, noop);
          cancelPromise(yieldedPromise);
          rejector(new FlowCancellationError());
        } catch (e2) {
          rejector(e2);
        }
      });
      return promise;
    };
    res.isMobXFlow = true;
    return res;
  }, flowAnnotation);
  flow.bound = /* @__PURE__ */ createDecoratorAnnotation(flowBoundAnnotation);
  function cancelPromise(promise) {
    if (isFunction(promise.cancel)) {
      promise.cancel();
    }
  }
  function isFlow(fn) {
    return (fn == null ? void 0 : fn.isMobXFlow) === true;
  }
  function _isObservable(value, property) {
    if (!value) {
      return false;
    }
    if (property !== void 0) {
      if (isObservableMap(value) || isObservableArray(value)) {
        return die("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
      }
      if (isObservableObject(value)) {
        return value[$mobx].values_.has(property);
      }
      return false;
    }
    return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
  }
  function isObservable(value) {
    if (arguments.length !== 1) {
      die("isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
    }
    return _isObservable(value);
  }
  function trace() {
    if (false) {
      die("trace() is not available in production builds");
    }
    var enterBreakPoint = false;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (typeof args[args.length - 1] === "boolean") {
      enterBreakPoint = args.pop();
    }
    var derivation = getAtomFromArgs(args);
    if (!derivation) {
      return die("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
    }
    if (derivation.isTracing_ === TraceMode.NONE) {
      console.log("[mobx.trace] '" + derivation.name_ + "' tracing enabled");
    }
    derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
  }
  function getAtomFromArgs(args) {
    switch (args.length) {
      case 0:
        return globalState.trackingDerivation;
      case 1:
        return getAtom(args[0]);
      case 2:
        return getAtom(args[0], args[1]);
    }
  }
  function transaction(action2, thisArg) {
    if (thisArg === void 0) {
      thisArg = void 0;
    }
    startBatch();
    try {
      return action2.apply(thisArg);
    } finally {
      endBatch();
    }
  }
  function getAdm(target) {
    return target[$mobx];
  }
  var objectProxyTraps = {
    has: function has(target, name) {
      if (globalState.trackingDerivation) {
        warnAboutProxyRequirement("detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.");
      }
      return getAdm(target).has_(name);
    },
    get: function get(target, name) {
      return getAdm(target).get_(name);
    },
    set: function set2(target, name, value) {
      var _getAdm$set_;
      if (!isStringish(name)) {
        return false;
      }
      if (!getAdm(target).values_.has(name)) {
        warnAboutProxyRequirement("add a new observable property through direct assignment. Use 'set' from 'mobx' instead.");
      }
      return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;
    },
    deleteProperty: function deleteProperty(target, name) {
      var _getAdm$delete_;
      if (true) {
        warnAboutProxyRequirement("delete properties from an observable object. Use 'remove' from 'mobx' instead.");
      }
      if (!isStringish(name)) {
        return false;
      }
      return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;
    },
    defineProperty: function defineProperty2(target, name, descriptor) {
      var _getAdm$definePropert;
      if (true) {
        warnAboutProxyRequirement("define property on an observable object. Use 'defineProperty' from 'mobx' instead.");
      }
      return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;
    },
    ownKeys: function ownKeys2(target) {
      if (globalState.trackingDerivation) {
        warnAboutProxyRequirement("iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.");
      }
      return getAdm(target).ownKeys_();
    },
    preventExtensions: function preventExtensions(target) {
      die(13);
    }
  };
  function asDynamicObservableObject(target, options) {
    var _target$$mobx, _target$$mobx$proxy_;
    assertProxies();
    target = asObservableObject(target, options);
    return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
  }
  function hasInterceptors(interceptable) {
    return interceptable.interceptors_ !== void 0 && interceptable.interceptors_.length > 0;
  }
  function registerInterceptor(interceptable, handler) {
    var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
    interceptors.push(handler);
    return once(function() {
      var idx = interceptors.indexOf(handler);
      if (idx !== -1) {
        interceptors.splice(idx, 1);
      }
    });
  }
  function interceptChange(interceptable, change) {
    var prevU = untrackedStart();
    try {
      var interceptors = [].concat(interceptable.interceptors_ || []);
      for (var i2 = 0, l2 = interceptors.length; i2 < l2; i2++) {
        change = interceptors[i2](change);
        if (change && !change.type) {
          die(14);
        }
        if (!change) {
          break;
        }
      }
      return change;
    } finally {
      untrackedEnd(prevU);
    }
  }
  function hasListeners(listenable) {
    return listenable.changeListeners_ !== void 0 && listenable.changeListeners_.length > 0;
  }
  function registerListener(listenable, handler) {
    var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
    listeners.push(handler);
    return once(function() {
      var idx = listeners.indexOf(handler);
      if (idx !== -1) {
        listeners.splice(idx, 1);
      }
    });
  }
  function notifyListeners(listenable, change) {
    var prevU = untrackedStart();
    var listeners = listenable.changeListeners_;
    if (!listeners) {
      return;
    }
    listeners = listeners.slice();
    for (var i2 = 0, l2 = listeners.length; i2 < l2; i2++) {
      listeners[i2](change);
    }
    untrackedEnd(prevU);
  }
  function makeObservable(target, annotations, options) {
    var adm = asObservableObject(target, options)[$mobx];
    startBatch();
    try {
      var _annotations;
      if (annotations && target[storedAnnotationsSymbol]) {
        die("makeObservable second arg must be nullish when using decorators. Mixing @decorator syntax with annotations is not supported.");
      }
      (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target);
      ownKeys(annotations).forEach(function(key) {
        return adm.make_(key, annotations[key]);
      });
    } finally {
      endBatch();
    }
    return target;
  }
  var keysSymbol = /* @__PURE__ */ Symbol("mobx-keys");
  function makeAutoObservable(target, overrides, options) {
    if (true) {
      if (!isPlainObject(target) && !isPlainObject(Object.getPrototypeOf(target))) {
        die("'makeAutoObservable' can only be used for classes that don't have a superclass");
      }
      if (isObservableObject(target)) {
        die("makeAutoObservable can only be used on objects not already made observable");
      }
    }
    if (isPlainObject(target)) {
      return extendObservable(target, target, overrides, options);
    }
    var adm = asObservableObject(target, options)[$mobx];
    if (!target[keysSymbol]) {
      var proto = Object.getPrototypeOf(target);
      var keys = new Set([].concat(ownKeys(target), ownKeys(proto)));
      keys["delete"]("constructor");
      keys["delete"]($mobx);
      addHiddenProp(proto, keysSymbol, keys);
    }
    startBatch();
    try {
      target[keysSymbol].forEach(function(key) {
        return adm.make_(
          key,
          !overrides ? true : key in overrides ? overrides[key] : true
        );
      });
    } finally {
      endBatch();
    }
    return target;
  }
  var SPLICE = "splice";
  var UPDATE = "update";
  var MAX_SPLICE_SIZE = 1e4;
  var arrayTraps = {
    get: function get2(target, name) {
      var adm = target[$mobx];
      if (name === $mobx) {
        return adm;
      }
      if (name === "length") {
        return adm.getArrayLength_();
      }
      if (typeof name === "string" && !isNaN(name)) {
        return adm.get_(parseInt(name));
      }
      if (hasProp(arrayExtensions, name)) {
        return arrayExtensions[name];
      }
      return target[name];
    },
    set: function set3(target, name, value) {
      var adm = target[$mobx];
      if (name === "length") {
        adm.setArrayLength_(value);
      }
      if (typeof name === "symbol" || isNaN(name)) {
        target[name] = value;
      } else {
        adm.set_(parseInt(name), value);
      }
      return true;
    },
    preventExtensions: function preventExtensions2() {
      die(15);
    }
  };
  var ObservableArrayAdministration = /* @__PURE__ */ function() {
    function ObservableArrayAdministration2(name, enhancer, owned_, legacyMode_) {
      if (name === void 0) {
        name = true ? "ObservableArray@" + getNextId() : "ObservableArray";
      }
      this.owned_ = void 0;
      this.legacyMode_ = void 0;
      this.atom_ = void 0;
      this.values_ = [];
      this.interceptors_ = void 0;
      this.changeListeners_ = void 0;
      this.enhancer_ = void 0;
      this.dehancer = void 0;
      this.proxy_ = void 0;
      this.lastKnownLength_ = 0;
      this.owned_ = owned_;
      this.legacyMode_ = legacyMode_;
      this.atom_ = new Atom(name);
      this.enhancer_ = function(newV, oldV) {
        return enhancer(newV, oldV, true ? name + "[..]" : "ObservableArray[..]");
      };
    }
    var _proto = ObservableArrayAdministration2.prototype;
    _proto.dehanceValue_ = function dehanceValue_(value) {
      if (this.dehancer !== void 0) {
        return this.dehancer(value);
      }
      return value;
    };
    _proto.dehanceValues_ = function dehanceValues_(values2) {
      if (this.dehancer !== void 0 && values2.length > 0) {
        return values2.map(this.dehancer);
      }
      return values2;
    };
    _proto.intercept_ = function intercept_(handler) {
      return registerInterceptor(this, handler);
    };
    _proto.observe_ = function observe_(listener, fireImmediately) {
      if (fireImmediately === void 0) {
        fireImmediately = false;
      }
      if (fireImmediately) {
        listener({
          observableKind: "array",
          object: this.proxy_,
          debugObjectName: this.atom_.name_,
          type: "splice",
          index: 0,
          added: this.values_.slice(),
          addedCount: this.values_.length,
          removed: [],
          removedCount: 0
        });
      }
      return registerListener(this, listener);
    };
    _proto.getArrayLength_ = function getArrayLength_() {
      this.atom_.reportObserved();
      return this.values_.length;
    };
    _proto.setArrayLength_ = function setArrayLength_(newLength) {
      if (typeof newLength !== "number" || isNaN(newLength) || newLength < 0) {
        die("Out of range: " + newLength);
      }
      var currentLength = this.values_.length;
      if (newLength === currentLength) {
        return;
      } else if (newLength > currentLength) {
        var newItems = new Array(newLength - currentLength);
        for (var i2 = 0; i2 < newLength - currentLength; i2++) {
          newItems[i2] = void 0;
        }
        this.spliceWithArray_(currentLength, 0, newItems);
      } else {
        this.spliceWithArray_(newLength, currentLength - newLength);
      }
    };
    _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
      if (oldLength !== this.lastKnownLength_) {
        die(16);
      }
      this.lastKnownLength_ += delta;
      if (this.legacyMode_ && delta > 0) {
        reserveArrayBuffer(oldLength + delta + 1);
      }
    };
    _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {
      var _this = this;
      checkIfStateModificationsAreAllowed(this.atom_);
      var length = this.values_.length;
      if (index === void 0) {
        index = 0;
      } else if (index > length) {
        index = length;
      } else if (index < 0) {
        index = Math.max(0, length + index);
      }
      if (arguments.length === 1) {
        deleteCount = length - index;
      } else if (deleteCount === void 0 || deleteCount === null) {
        deleteCount = 0;
      } else {
        deleteCount = Math.max(0, Math.min(deleteCount, length - index));
      }
      if (newItems === void 0) {
        newItems = EMPTY_ARRAY;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_,
          type: SPLICE,
          index,
          removedCount: deleteCount,
          added: newItems
        });
        if (!change) {
          return EMPTY_ARRAY;
        }
        deleteCount = change.removedCount;
        newItems = change.added;
      }
      newItems = newItems.length === 0 ? newItems : newItems.map(function(v2) {
        return _this.enhancer_(v2, void 0);
      });
      if (this.legacyMode_ || true) {
        var lengthDelta = newItems.length - deleteCount;
        this.updateArrayLength_(length, lengthDelta);
      }
      var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);
      if (deleteCount !== 0 || newItems.length !== 0) {
        this.notifyArraySplice_(index, newItems, res);
      }
      return this.dehanceValues_(res);
    };
    _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {
      if (newItems.length < MAX_SPLICE_SIZE) {
        var _this$values_;
        return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));
      } else {
        var res = this.values_.slice(index, index + deleteCount);
        var oldItems = this.values_.slice(index + deleteCount);
        this.values_.length += newItems.length - deleteCount;
        for (var i2 = 0; i2 < newItems.length; i2++) {
          this.values_[index + i2] = newItems[i2];
        }
        for (var _i = 0; _i < oldItems.length; _i++) {
          this.values_[index + newItems.length + _i] = oldItems[_i];
        }
        return res;
      }
    };
    _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {
      var notifySpy = !this.owned_ && isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "array",
        object: this.proxy_,
        type: UPDATE,
        debugObjectName: this.atom_.name_,
        index,
        newValue,
        oldValue
      } : null;
      if (notifySpy) {
        spyReportStart(change);
      }
      this.atom_.reportChanged();
      if (notify) {
        notifyListeners(this, change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
    };
    _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {
      var notifySpy = !this.owned_ && isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "array",
        object: this.proxy_,
        debugObjectName: this.atom_.name_,
        type: SPLICE,
        index,
        removed,
        added,
        removedCount: removed.length,
        addedCount: added.length
      } : null;
      if (notifySpy) {
        spyReportStart(change);
      }
      this.atom_.reportChanged();
      if (notify) {
        notifyListeners(this, change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
    };
    _proto.get_ = function get_(index) {
      if (index < this.values_.length) {
        this.atom_.reportObserved();
        return this.dehanceValue_(this.values_[index]);
      }
      console.warn(true ? "[mobx] Out of bounds read: " + index : "[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + this.values_.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
    };
    _proto.set_ = function set_(index, newValue) {
      var values2 = this.values_;
      if (index < values2.length) {
        checkIfStateModificationsAreAllowed(this.atom_);
        var oldValue = values2[index];
        if (hasInterceptors(this)) {
          var change = interceptChange(this, {
            type: UPDATE,
            object: this.proxy_,
            index,
            newValue
          });
          if (!change) {
            return;
          }
          newValue = change.newValue;
        }
        newValue = this.enhancer_(newValue, oldValue);
        var changed = newValue !== oldValue;
        if (changed) {
          values2[index] = newValue;
          this.notifyArrayChildUpdate_(index, newValue, oldValue);
        }
      } else if (index === values2.length) {
        this.spliceWithArray_(index, 0, [newValue]);
      } else {
        die(17, index, values2.length);
      }
    };
    return ObservableArrayAdministration2;
  }();
  function createObservableArray(initialValues, enhancer, name, owned) {
    if (name === void 0) {
      name = true ? "ObservableArray@" + getNextId() : "ObservableArray";
    }
    if (owned === void 0) {
      owned = false;
    }
    assertProxies();
    var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
    addHiddenFinalProp(adm.values_, $mobx, adm);
    var proxy = new Proxy(adm.values_, arrayTraps);
    adm.proxy_ = proxy;
    if (initialValues && initialValues.length) {
      var prev = allowStateChangesStart(true);
      adm.spliceWithArray_(0, 0, initialValues);
      allowStateChangesEnd(prev);
    }
    return proxy;
  }
  var arrayExtensions = {
    clear: function clear() {
      return this.splice(0);
    },
    replace: function replace(newItems) {
      var adm = this[$mobx];
      return adm.spliceWithArray_(0, adm.values_.length, newItems);
    },
    toJSON: function toJSON() {
      return this.slice();
    },
    splice: function splice(index, deleteCount) {
      for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        newItems[_key - 2] = arguments[_key];
      }
      var adm = this[$mobx];
      switch (arguments.length) {
        case 0:
          return [];
        case 1:
          return adm.spliceWithArray_(index);
        case 2:
          return adm.spliceWithArray_(index, deleteCount);
      }
      return adm.spliceWithArray_(index, deleteCount, newItems);
    },
    spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {
      return this[$mobx].spliceWithArray_(index, deleteCount, newItems);
    },
    push: function push() {
      var adm = this[$mobx];
      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        items[_key2] = arguments[_key2];
      }
      adm.spliceWithArray_(adm.values_.length, 0, items);
      return adm.values_.length;
    },
    pop: function pop() {
      return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
    },
    shift: function shift() {
      return this.splice(0, 1)[0];
    },
    unshift: function unshift() {
      var adm = this[$mobx];
      for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        items[_key3] = arguments[_key3];
      }
      adm.spliceWithArray_(0, 0, items);
      return adm.values_.length;
    },
    reverse: function reverse() {
      if (globalState.trackingDerivation) {
        die(37, "reverse");
      }
      this.replace(this.slice().reverse());
      return this;
    },
    sort: function sort() {
      if (globalState.trackingDerivation) {
        die(37, "sort");
      }
      var copy = this.slice();
      copy.sort.apply(copy, arguments);
      this.replace(copy);
      return this;
    },
    remove: function remove(value) {
      var adm = this[$mobx];
      var idx = adm.dehanceValues_(adm.values_).indexOf(value);
      if (idx > -1) {
        this.splice(idx, 1);
        return true;
      }
      return false;
    }
  };
  addArrayExtension("concat", simpleFunc);
  addArrayExtension("flat", simpleFunc);
  addArrayExtension("includes", simpleFunc);
  addArrayExtension("indexOf", simpleFunc);
  addArrayExtension("join", simpleFunc);
  addArrayExtension("lastIndexOf", simpleFunc);
  addArrayExtension("slice", simpleFunc);
  addArrayExtension("toString", simpleFunc);
  addArrayExtension("toLocaleString", simpleFunc);
  addArrayExtension("every", mapLikeFunc);
  addArrayExtension("filter", mapLikeFunc);
  addArrayExtension("find", mapLikeFunc);
  addArrayExtension("findIndex", mapLikeFunc);
  addArrayExtension("flatMap", mapLikeFunc);
  addArrayExtension("forEach", mapLikeFunc);
  addArrayExtension("map", mapLikeFunc);
  addArrayExtension("some", mapLikeFunc);
  addArrayExtension("reduce", reduceLikeFunc);
  addArrayExtension("reduceRight", reduceLikeFunc);
  function addArrayExtension(funcName, funcFactory) {
    if (typeof Array.prototype[funcName] === "function") {
      arrayExtensions[funcName] = funcFactory(funcName);
    }
  }
  function simpleFunc(funcName) {
    return function() {
      var adm = this[$mobx];
      adm.atom_.reportObserved();
      var dehancedValues = adm.dehanceValues_(adm.values_);
      return dehancedValues[funcName].apply(dehancedValues, arguments);
    };
  }
  function mapLikeFunc(funcName) {
    return function(callback, thisArg) {
      var _this2 = this;
      var adm = this[$mobx];
      adm.atom_.reportObserved();
      var dehancedValues = adm.dehanceValues_(adm.values_);
      return dehancedValues[funcName](function(element, index) {
        return callback.call(thisArg, element, index, _this2);
      });
    };
  }
  function reduceLikeFunc(funcName) {
    return function() {
      var _this3 = this;
      var adm = this[$mobx];
      adm.atom_.reportObserved();
      var dehancedValues = adm.dehanceValues_(adm.values_);
      var callback = arguments[0];
      arguments[0] = function(accumulator, currentValue, index) {
        return callback(accumulator, currentValue, index, _this3);
      };
      return dehancedValues[funcName].apply(dehancedValues, arguments);
    };
  }
  var isObservableArrayAdministration = /* @__PURE__ */ createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
  function isObservableArray(thing) {
    return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
  }
  var _Symbol$iterator;
  var _Symbol$toStringTag;
  var ObservableMapMarker = {};
  var ADD = "add";
  var DELETE = "delete";
  _Symbol$iterator = Symbol.iterator;
  _Symbol$toStringTag = Symbol.toStringTag;
  var ObservableMap = /* @__PURE__ */ function() {
    function ObservableMap2(initialData, enhancer_, name_) {
      var _this = this;
      if (enhancer_ === void 0) {
        enhancer_ = deepEnhancer;
      }
      if (name_ === void 0) {
        name_ = true ? "ObservableMap@" + getNextId() : "ObservableMap";
      }
      this.enhancer_ = void 0;
      this.name_ = void 0;
      this[$mobx] = ObservableMapMarker;
      this.data_ = void 0;
      this.hasMap_ = void 0;
      this.keysAtom_ = void 0;
      this.interceptors_ = void 0;
      this.changeListeners_ = void 0;
      this.dehancer = void 0;
      this.enhancer_ = enhancer_;
      this.name_ = name_;
      if (!isFunction(Map)) {
        die(18);
      }
      this.keysAtom_ = createAtom(true ? this.name_ + ".keys()" : "ObservableMap.keys()");
      this.data_ = /* @__PURE__ */ new Map();
      this.hasMap_ = /* @__PURE__ */ new Map();
      allowStateChanges(true, function() {
        _this.merge(initialData);
      });
    }
    var _proto = ObservableMap2.prototype;
    _proto.has_ = function has_(key) {
      return this.data_.has(key);
    };
    _proto.has = function has2(key) {
      var _this2 = this;
      if (!globalState.trackingDerivation) {
        return this.has_(key);
      }
      var entry = this.hasMap_.get(key);
      if (!entry) {
        var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer, true ? this.name_ + "." + stringifyKey(key) + "?" : "ObservableMap.key?", false);
        this.hasMap_.set(key, newEntry);
        onBecomeUnobserved(newEntry, function() {
          return _this2.hasMap_["delete"](key);
        });
      }
      return entry.get();
    };
    _proto.set = function set4(key, value) {
      var hasKey = this.has_(key);
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: hasKey ? UPDATE : ADD,
          object: this,
          newValue: value,
          name: key
        });
        if (!change) {
          return this;
        }
        value = change.newValue;
      }
      if (hasKey) {
        this.updateValue_(key, value);
      } else {
        this.addValue_(key, value);
      }
      return this;
    };
    _proto["delete"] = function _delete(key) {
      var _this3 = this;
      checkIfStateModificationsAreAllowed(this.keysAtom_);
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: DELETE,
          object: this,
          name: key
        });
        if (!change) {
          return false;
        }
      }
      if (this.has_(key)) {
        var notifySpy = isSpyEnabled();
        var notify = hasListeners(this);
        var _change = notify || notifySpy ? {
          observableKind: "map",
          debugObjectName: this.name_,
          type: DELETE,
          object: this,
          oldValue: this.data_.get(key).value_,
          name: key
        } : null;
        if (notifySpy) {
          spyReportStart(_change);
        }
        transaction(function() {
          var _this3$hasMap_$get;
          _this3.keysAtom_.reportChanged();
          (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ? void 0 : _this3$hasMap_$get.setNewValue_(false);
          var observable2 = _this3.data_.get(key);
          observable2.setNewValue_(void 0);
          _this3.data_["delete"](key);
        });
        if (notify) {
          notifyListeners(this, _change);
        }
        if (notifySpy) {
          spyReportEnd();
        }
        return true;
      }
      return false;
    };
    _proto.updateValue_ = function updateValue_(key, newValue) {
      var observable2 = this.data_.get(key);
      newValue = observable2.prepareNewValue_(newValue);
      if (newValue !== globalState.UNCHANGED) {
        var notifySpy = isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy ? {
          observableKind: "map",
          debugObjectName: this.name_,
          type: UPDATE,
          object: this,
          oldValue: observable2.value_,
          name: key,
          newValue
        } : null;
        if (notifySpy) {
          spyReportStart(change);
        }
        observable2.setNewValue_(newValue);
        if (notify) {
          notifyListeners(this, change);
        }
        if (notifySpy) {
          spyReportEnd();
        }
      }
    };
    _proto.addValue_ = function addValue_(key, newValue) {
      var _this4 = this;
      checkIfStateModificationsAreAllowed(this.keysAtom_);
      transaction(function() {
        var _this4$hasMap_$get;
        var observable2 = new ObservableValue(newValue, _this4.enhancer_, true ? _this4.name_ + "." + stringifyKey(key) : "ObservableMap.key", false);
        _this4.data_.set(key, observable2);
        newValue = observable2.value_;
        (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ? void 0 : _this4$hasMap_$get.setNewValue_(true);
        _this4.keysAtom_.reportChanged();
      });
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: ADD,
        object: this,
        name: key,
        newValue
      } : null;
      if (notifySpy) {
        spyReportStart(change);
      }
      if (notify) {
        notifyListeners(this, change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
    };
    _proto.get = function get3(key) {
      if (this.has(key)) {
        return this.dehanceValue_(this.data_.get(key).get());
      }
      return this.dehanceValue_(void 0);
    };
    _proto.dehanceValue_ = function dehanceValue_(value) {
      if (this.dehancer !== void 0) {
        return this.dehancer(value);
      }
      return value;
    };
    _proto.keys = function keys() {
      this.keysAtom_.reportObserved();
      return this.data_.keys();
    };
    _proto.values = function values2() {
      var self2 = this;
      var keys = this.keys();
      return makeIterable({
        next: function next() {
          var _keys$next = keys.next(), done = _keys$next.done, value = _keys$next.value;
          return {
            done,
            value: done ? void 0 : self2.get(value)
          };
        }
      });
    };
    _proto.entries = function entries() {
      var self2 = this;
      var keys = this.keys();
      return makeIterable({
        next: function next() {
          var _keys$next2 = keys.next(), done = _keys$next2.done, value = _keys$next2.value;
          return {
            done,
            value: done ? void 0 : [value, self2.get(value)]
          };
        }
      });
    };
    _proto[_Symbol$iterator] = function() {
      return this.entries();
    };
    _proto.forEach = function forEach(callback, thisArg) {
      for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done; ) {
        var _step$value = _step.value, key = _step$value[0], value = _step$value[1];
        callback.call(thisArg, value, key, this);
      }
    };
    _proto.merge = function merge2(other) {
      var _this5 = this;
      if (isObservableMap(other)) {
        other = new Map(other);
      }
      transaction(function() {
        if (isPlainObject(other)) {
          getPlainObjectKeys(other).forEach(function(key) {
            return _this5.set(key, other[key]);
          });
        } else if (Array.isArray(other)) {
          other.forEach(function(_ref) {
            var key = _ref[0], value = _ref[1];
            return _this5.set(key, value);
          });
        } else if (isES6Map(other)) {
          if (other.constructor !== Map) {
            die(19, other);
          }
          other.forEach(function(value, key) {
            return _this5.set(key, value);
          });
        } else if (other !== null && other !== void 0) {
          die(20, other);
        }
      });
      return this;
    };
    _proto.clear = function clear2() {
      var _this6 = this;
      transaction(function() {
        untracked(function() {
          for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2; !(_step2 = _iterator2()).done; ) {
            var key = _step2.value;
            _this6["delete"](key);
          }
        });
      });
    };
    _proto.replace = function replace2(values2) {
      var _this7 = this;
      transaction(function() {
        var replacementMap = convertToMap(values2);
        var orderedData = /* @__PURE__ */ new Map();
        var keysReportChangedCalled = false;
        for (var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done; ) {
          var key = _step3.value;
          if (!replacementMap.has(key)) {
            var deleted = _this7["delete"](key);
            if (deleted) {
              keysReportChangedCalled = true;
            } else {
              var value = _this7.data_.get(key);
              orderedData.set(key, value);
            }
          }
        }
        for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done; ) {
          var _step4$value = _step4.value, _key = _step4$value[0], _value = _step4$value[1];
          var keyExisted = _this7.data_.has(_key);
          _this7.set(_key, _value);
          if (_this7.data_.has(_key)) {
            var _value2 = _this7.data_.get(_key);
            orderedData.set(_key, _value2);
            if (!keyExisted) {
              keysReportChangedCalled = true;
            }
          }
        }
        if (!keysReportChangedCalled) {
          if (_this7.data_.size !== orderedData.size) {
            _this7.keysAtom_.reportChanged();
          } else {
            var iter1 = _this7.data_.keys();
            var iter2 = orderedData.keys();
            var next1 = iter1.next();
            var next2 = iter2.next();
            while (!next1.done) {
              if (next1.value !== next2.value) {
                _this7.keysAtom_.reportChanged();
                break;
              }
              next1 = iter1.next();
              next2 = iter2.next();
            }
          }
        }
        _this7.data_ = orderedData;
      });
      return this;
    };
    _proto.toString = function toString2() {
      return "[object ObservableMap]";
    };
    _proto.toJSON = function toJSON2() {
      return Array.from(this);
    };
    _proto.observe_ = function observe_(listener, fireImmediately) {
      if (fireImmediately === true) {
        die("`observe` doesn't support fireImmediately=true in combination with maps.");
      }
      return registerListener(this, listener);
    };
    _proto.intercept_ = function intercept_(handler) {
      return registerInterceptor(this, handler);
    };
    _createClass(ObservableMap2, [{
      key: "size",
      get: function get3() {
        this.keysAtom_.reportObserved();
        return this.data_.size;
      }
    }, {
      key: _Symbol$toStringTag,
      get: function get3() {
        return "Map";
      }
    }]);
    return ObservableMap2;
  }();
  var isObservableMap = /* @__PURE__ */ createInstanceofPredicate("ObservableMap", ObservableMap);
  function convertToMap(dataStructure) {
    if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
      return dataStructure;
    } else if (Array.isArray(dataStructure)) {
      return new Map(dataStructure);
    } else if (isPlainObject(dataStructure)) {
      var map2 = /* @__PURE__ */ new Map();
      for (var key in dataStructure) {
        map2.set(key, dataStructure[key]);
      }
      return map2;
    } else {
      return die(21, dataStructure);
    }
  }
  var _Symbol$iterator$1;
  var _Symbol$toStringTag$1;
  var ObservableSetMarker = {};
  _Symbol$iterator$1 = Symbol.iterator;
  _Symbol$toStringTag$1 = Symbol.toStringTag;
  var ObservableSet = /* @__PURE__ */ function() {
    function ObservableSet2(initialData, enhancer, name_) {
      if (enhancer === void 0) {
        enhancer = deepEnhancer;
      }
      if (name_ === void 0) {
        name_ = true ? "ObservableSet@" + getNextId() : "ObservableSet";
      }
      this.name_ = void 0;
      this[$mobx] = ObservableSetMarker;
      this.data_ = /* @__PURE__ */ new Set();
      this.atom_ = void 0;
      this.changeListeners_ = void 0;
      this.interceptors_ = void 0;
      this.dehancer = void 0;
      this.enhancer_ = void 0;
      this.name_ = name_;
      if (!isFunction(Set)) {
        die(22);
      }
      this.atom_ = createAtom(this.name_);
      this.enhancer_ = function(newV, oldV) {
        return enhancer(newV, oldV, name_);
      };
      if (initialData) {
        this.replace(initialData);
      }
    }
    var _proto = ObservableSet2.prototype;
    _proto.dehanceValue_ = function dehanceValue_(value) {
      if (this.dehancer !== void 0) {
        return this.dehancer(value);
      }
      return value;
    };
    _proto.clear = function clear2() {
      var _this = this;
      transaction(function() {
        untracked(function() {
          for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done; ) {
            var value = _step.value;
            _this["delete"](value);
          }
        });
      });
    };
    _proto.forEach = function forEach(callbackFn, thisArg) {
      for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done; ) {
        var value = _step2.value;
        callbackFn.call(thisArg, value, value, this);
      }
    };
    _proto.add = function add(value) {
      var _this2 = this;
      checkIfStateModificationsAreAllowed(this.atom_);
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: ADD,
          object: this,
          newValue: value
        });
        if (!change) {
          return this;
        }
      }
      if (!this.has(value)) {
        transaction(function() {
          _this2.data_.add(_this2.enhancer_(value, void 0));
          _this2.atom_.reportChanged();
        });
        var notifySpy = isSpyEnabled();
        var notify = hasListeners(this);
        var _change = notify || notifySpy ? {
          observableKind: "set",
          debugObjectName: this.name_,
          type: ADD,
          object: this,
          newValue: value
        } : null;
        if (notifySpy && true) {
          spyReportStart(_change);
        }
        if (notify) {
          notifyListeners(this, _change);
        }
        if (notifySpy && true) {
          spyReportEnd();
        }
      }
      return this;
    };
    _proto["delete"] = function _delete(value) {
      var _this3 = this;
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: DELETE,
          object: this,
          oldValue: value
        });
        if (!change) {
          return false;
        }
      }
      if (this.has(value)) {
        var notifySpy = isSpyEnabled();
        var notify = hasListeners(this);
        var _change2 = notify || notifySpy ? {
          observableKind: "set",
          debugObjectName: this.name_,
          type: DELETE,
          object: this,
          oldValue: value
        } : null;
        if (notifySpy && true) {
          spyReportStart(_change2);
        }
        transaction(function() {
          _this3.atom_.reportChanged();
          _this3.data_["delete"](value);
        });
        if (notify) {
          notifyListeners(this, _change2);
        }
        if (notifySpy && true) {
          spyReportEnd();
        }
        return true;
      }
      return false;
    };
    _proto.has = function has2(value) {
      this.atom_.reportObserved();
      return this.data_.has(this.dehanceValue_(value));
    };
    _proto.entries = function entries() {
      var nextIndex = 0;
      var keys = Array.from(this.keys());
      var values2 = Array.from(this.values());
      return makeIterable({
        next: function next() {
          var index = nextIndex;
          nextIndex += 1;
          return index < values2.length ? {
            value: [keys[index], values2[index]],
            done: false
          } : {
            done: true
          };
        }
      });
    };
    _proto.keys = function keys() {
      return this.values();
    };
    _proto.values = function values2() {
      this.atom_.reportObserved();
      var self2 = this;
      var nextIndex = 0;
      var observableValues = Array.from(this.data_.values());
      return makeIterable({
        next: function next() {
          return nextIndex < observableValues.length ? {
            value: self2.dehanceValue_(observableValues[nextIndex++]),
            done: false
          } : {
            done: true
          };
        }
      });
    };
    _proto.replace = function replace2(other) {
      var _this4 = this;
      if (isObservableSet(other)) {
        other = new Set(other);
      }
      transaction(function() {
        if (Array.isArray(other)) {
          _this4.clear();
          other.forEach(function(value) {
            return _this4.add(value);
          });
        } else if (isES6Set(other)) {
          _this4.clear();
          other.forEach(function(value) {
            return _this4.add(value);
          });
        } else if (other !== null && other !== void 0) {
          die("Cannot initialize set from " + other);
        }
      });
      return this;
    };
    _proto.observe_ = function observe_(listener, fireImmediately) {
      if (fireImmediately === true) {
        die("`observe` doesn't support fireImmediately=true in combination with sets.");
      }
      return registerListener(this, listener);
    };
    _proto.intercept_ = function intercept_(handler) {
      return registerInterceptor(this, handler);
    };
    _proto.toJSON = function toJSON2() {
      return Array.from(this);
    };
    _proto.toString = function toString2() {
      return "[object ObservableSet]";
    };
    _proto[_Symbol$iterator$1] = function() {
      return this.values();
    };
    _createClass(ObservableSet2, [{
      key: "size",
      get: function get3() {
        this.atom_.reportObserved();
        return this.data_.size;
      }
    }, {
      key: _Symbol$toStringTag$1,
      get: function get3() {
        return "Set";
      }
    }]);
    return ObservableSet2;
  }();
  var isObservableSet = /* @__PURE__ */ createInstanceofPredicate("ObservableSet", ObservableSet);
  var descriptorCache = /* @__PURE__ */ Object.create(null);
  var REMOVE = "remove";
  var ObservableObjectAdministration = /* @__PURE__ */ function() {
    function ObservableObjectAdministration2(target_, values_, name_, defaultAnnotation_) {
      if (values_ === void 0) {
        values_ = /* @__PURE__ */ new Map();
      }
      if (defaultAnnotation_ === void 0) {
        defaultAnnotation_ = autoAnnotation;
      }
      this.target_ = void 0;
      this.values_ = void 0;
      this.name_ = void 0;
      this.defaultAnnotation_ = void 0;
      this.keysAtom_ = void 0;
      this.changeListeners_ = void 0;
      this.interceptors_ = void 0;
      this.proxy_ = void 0;
      this.isPlainObject_ = void 0;
      this.appliedAnnotations_ = void 0;
      this.pendingKeys_ = void 0;
      this.target_ = target_;
      this.values_ = values_;
      this.name_ = name_;
      this.defaultAnnotation_ = defaultAnnotation_;
      this.keysAtom_ = new Atom(true ? this.name_ + ".keys" : "ObservableObject.keys");
      this.isPlainObject_ = isPlainObject(this.target_);
      if (!isAnnotation(this.defaultAnnotation_)) {
        die("defaultAnnotation must be valid annotation");
      }
      if (true) {
        this.appliedAnnotations_ = {};
      }
    }
    var _proto = ObservableObjectAdministration2.prototype;
    _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
      return this.values_.get(key).get();
    };
    _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
      var observable2 = this.values_.get(key);
      if (observable2 instanceof ComputedValue) {
        observable2.set(newValue);
        return true;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: UPDATE,
          object: this.proxy_ || this.target_,
          name: key,
          newValue
        });
        if (!change) {
          return null;
        }
        newValue = change.newValue;
      }
      newValue = observable2.prepareNewValue_(newValue);
      if (newValue !== globalState.UNCHANGED) {
        var notify = hasListeners(this);
        var notifySpy = isSpyEnabled();
        var _change = notify || notifySpy ? {
          type: UPDATE,
          observableKind: "object",
          debugObjectName: this.name_,
          object: this.proxy_ || this.target_,
          oldValue: observable2.value_,
          name: key,
          newValue
        } : null;
        if (notifySpy) {
          spyReportStart(_change);
        }
        observable2.setNewValue_(newValue);
        if (notify) {
          notifyListeners(this, _change);
        }
        if (notifySpy) {
          spyReportEnd();
        }
      }
      return true;
    };
    _proto.get_ = function get_(key) {
      if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
        this.has_(key);
      }
      return this.target_[key];
    };
    _proto.set_ = function set_(key, value, proxyTrap) {
      if (proxyTrap === void 0) {
        proxyTrap = false;
      }
      if (hasProp(this.target_, key)) {
        if (this.values_.has(key)) {
          return this.setObservablePropValue_(key, value);
        } else if (proxyTrap) {
          return Reflect.set(this.target_, key, value);
        } else {
          this.target_[key] = value;
          return true;
        }
      } else {
        return this.extend_(key, {
          value,
          enumerable: true,
          writable: true,
          configurable: true
        }, this.defaultAnnotation_, proxyTrap);
      }
    };
    _proto.has_ = function has_(key) {
      if (!globalState.trackingDerivation) {
        return key in this.target_;
      }
      this.pendingKeys_ || (this.pendingKeys_ = /* @__PURE__ */ new Map());
      var entry = this.pendingKeys_.get(key);
      if (!entry) {
        entry = new ObservableValue(key in this.target_, referenceEnhancer, true ? this.name_ + "." + stringifyKey(key) + "?" : "ObservableObject.key?", false);
        this.pendingKeys_.set(key, entry);
      }
      return entry.get();
    };
    _proto.make_ = function make_(key, annotation) {
      if (annotation === true) {
        annotation = this.defaultAnnotation_;
      }
      if (annotation === false) {
        return;
      }
      assertAnnotable(this, annotation, key);
      if (!(key in this.target_)) {
        var _this$target_$storedA;
        if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {
          return;
        } else {
          die(1, annotation.annotationType_, this.name_ + "." + key.toString());
        }
      }
      var source = this.target_;
      while (source && source !== objectPrototype) {
        var descriptor = getDescriptor(source, key);
        if (descriptor) {
          var outcome = annotation.make_(this, key, descriptor, source);
          if (outcome === 0) {
            return;
          }
          if (outcome === 1) {
            break;
          }
        }
        source = Object.getPrototypeOf(source);
      }
      recordAnnotationApplied(this, annotation, key);
    };
    _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
      if (proxyTrap === void 0) {
        proxyTrap = false;
      }
      if (annotation === true) {
        annotation = this.defaultAnnotation_;
      }
      if (annotation === false) {
        return this.defineProperty_(key, descriptor, proxyTrap);
      }
      assertAnnotable(this, annotation, key);
      var outcome = annotation.extend_(this, key, descriptor, proxyTrap);
      if (outcome) {
        recordAnnotationApplied(this, annotation, key);
      }
      return outcome;
    };
    _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
      if (proxyTrap === void 0) {
        proxyTrap = false;
      }
      try {
        startBatch();
        var deleteOutcome = this.delete_(key);
        if (!deleteOutcome) {
          return deleteOutcome;
        }
        if (hasInterceptors(this)) {
          var change = interceptChange(this, {
            object: this.proxy_ || this.target_,
            name: key,
            type: ADD,
            newValue: descriptor.value
          });
          if (!change) {
            return null;
          }
          var newValue = change.newValue;
          if (descriptor.value !== newValue) {
            descriptor = _extends({}, descriptor, {
              value: newValue
            });
          }
        }
        if (proxyTrap) {
          if (!Reflect.defineProperty(this.target_, key, descriptor)) {
            return false;
          }
        } else {
          defineProperty(this.target_, key, descriptor);
        }
        this.notifyPropertyAddition_(key, descriptor.value);
      } finally {
        endBatch();
      }
      return true;
    };
    _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
      if (proxyTrap === void 0) {
        proxyTrap = false;
      }
      try {
        startBatch();
        var deleteOutcome = this.delete_(key);
        if (!deleteOutcome) {
          return deleteOutcome;
        }
        if (hasInterceptors(this)) {
          var change = interceptChange(this, {
            object: this.proxy_ || this.target_,
            name: key,
            type: ADD,
            newValue: value
          });
          if (!change) {
            return null;
          }
          value = change.newValue;
        }
        var cachedDescriptor = getCachedObservablePropDescriptor(key);
        var descriptor = {
          configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
          enumerable: true,
          get: cachedDescriptor.get,
          set: cachedDescriptor.set
        };
        if (proxyTrap) {
          if (!Reflect.defineProperty(this.target_, key, descriptor)) {
            return false;
          }
        } else {
          defineProperty(this.target_, key, descriptor);
        }
        var observable2 = new ObservableValue(value, enhancer, true ? this.name_ + "." + key.toString() : "ObservableObject.key", false);
        this.values_.set(key, observable2);
        this.notifyPropertyAddition_(key, observable2.value_);
      } finally {
        endBatch();
      }
      return true;
    };
    _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
      if (proxyTrap === void 0) {
        proxyTrap = false;
      }
      try {
        startBatch();
        var deleteOutcome = this.delete_(key);
        if (!deleteOutcome) {
          return deleteOutcome;
        }
        if (hasInterceptors(this)) {
          var change = interceptChange(this, {
            object: this.proxy_ || this.target_,
            name: key,
            type: ADD,
            newValue: void 0
          });
          if (!change) {
            return null;
          }
        }
        options.name || (options.name = true ? this.name_ + "." + key.toString() : "ObservableObject.key");
        options.context = this.proxy_ || this.target_;
        var cachedDescriptor = getCachedObservablePropDescriptor(key);
        var descriptor = {
          configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
          enumerable: false,
          get: cachedDescriptor.get,
          set: cachedDescriptor.set
        };
        if (proxyTrap) {
          if (!Reflect.defineProperty(this.target_, key, descriptor)) {
            return false;
          }
        } else {
          defineProperty(this.target_, key, descriptor);
        }
        this.values_.set(key, new ComputedValue(options));
        this.notifyPropertyAddition_(key, void 0);
      } finally {
        endBatch();
      }
      return true;
    };
    _proto.delete_ = function delete_(key, proxyTrap) {
      if (proxyTrap === void 0) {
        proxyTrap = false;
      }
      if (!hasProp(this.target_, key)) {
        return true;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: REMOVE
        });
        if (!change) {
          return null;
        }
      }
      try {
        var _this$pendingKeys_, _this$pendingKeys_$ge;
        startBatch();
        var notify = hasListeners(this);
        var notifySpy = isSpyEnabled();
        var observable2 = this.values_.get(key);
        var value = void 0;
        if (!observable2 && (notify || notifySpy)) {
          var _getDescriptor2;
          value = (_getDescriptor2 = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor2.value;
        }
        if (proxyTrap) {
          if (!Reflect.deleteProperty(this.target_, key)) {
            return false;
          }
        } else {
          delete this.target_[key];
        }
        if (true) {
          delete this.appliedAnnotations_[key];
        }
        if (observable2) {
          this.values_["delete"](key);
          if (observable2 instanceof ObservableValue) {
            value = observable2.value_;
          }
          propagateChanged(observable2);
        }
        this.keysAtom_.reportChanged();
        (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_);
        if (notify || notifySpy) {
          var _change2 = {
            type: REMOVE,
            observableKind: "object",
            object: this.proxy_ || this.target_,
            debugObjectName: this.name_,
            oldValue: value,
            name: key
          };
          if (notifySpy) {
            spyReportStart(_change2);
          }
          if (notify) {
            notifyListeners(this, _change2);
          }
          if (notifySpy) {
            spyReportEnd();
          }
        }
      } finally {
        endBatch();
      }
      return true;
    };
    _proto.observe_ = function observe_(callback, fireImmediately) {
      if (fireImmediately === true) {
        die("`observe` doesn't support the fire immediately property for observable objects.");
      }
      return registerListener(this, callback);
    };
    _proto.intercept_ = function intercept_(handler) {
      return registerInterceptor(this, handler);
    };
    _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
      var _this$pendingKeys_2, _this$pendingKeys_2$g;
      var notify = hasListeners(this);
      var notifySpy = isSpyEnabled();
      if (notify || notifySpy) {
        var change = notify || notifySpy ? {
          type: ADD,
          observableKind: "object",
          debugObjectName: this.name_,
          object: this.proxy_ || this.target_,
          name: key,
          newValue: value
        } : null;
        if (notifySpy) {
          spyReportStart(change);
        }
        if (notify) {
          notifyListeners(this, change);
        }
        if (notifySpy) {
          spyReportEnd();
        }
      }
      (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true);
      this.keysAtom_.reportChanged();
    };
    _proto.ownKeys_ = function ownKeys_() {
      this.keysAtom_.reportObserved();
      return ownKeys(this.target_);
    };
    _proto.keys_ = function keys_() {
      this.keysAtom_.reportObserved();
      return Object.keys(this.target_);
    };
    return ObservableObjectAdministration2;
  }();
  function asObservableObject(target, options) {
    var _options$name;
    if (options && isObservableObject(target)) {
      die("Options can't be provided for already observable objects.");
    }
    if (hasProp(target, $mobx)) {
      if (!(getAdministration(target) instanceof ObservableObjectAdministration)) {
        die("Cannot convert '" + getDebugName(target) + "' into observable object:\nThe target is already observable of different type.\nExtending builtins is not supported.");
      }
      return target;
    }
    if (!Object.isExtensible(target)) {
      die("Cannot make the designated object observable; it is not extensible");
    }
    var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name : true ? (isPlainObject(target) ? "ObservableObject" : target.constructor.name) + "@" + getNextId() : "ObservableObject";
    var adm = new ObservableObjectAdministration(target, /* @__PURE__ */ new Map(), String(name), getAnnotationFromOptions(options));
    addHiddenProp(target, $mobx, adm);
    return target;
  }
  var isObservableObjectAdministration = /* @__PURE__ */ createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
  function getCachedObservablePropDescriptor(key) {
    return descriptorCache[key] || (descriptorCache[key] = {
      get: function get3() {
        return this[$mobx].getObservablePropValue_(key);
      },
      set: function set4(value) {
        return this[$mobx].setObservablePropValue_(key, value);
      }
    });
  }
  function isObservableObject(thing) {
    if (isObject(thing)) {
      return isObservableObjectAdministration(thing[$mobx]);
    }
    return false;
  }
  function recordAnnotationApplied(adm, annotation, key) {
    var _adm$target_$storedAn;
    if (true) {
      adm.appliedAnnotations_[key] = annotation;
    }
    (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];
  }
  function assertAnnotable(adm, annotation, key) {
    if (!isAnnotation(annotation)) {
      die("Cannot annotate '" + adm.name_ + "." + key.toString() + "': Invalid annotation.");
    }
    if (!isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {
      var fieldName = adm.name_ + "." + key.toString();
      var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;
      var requestedAnnotationType = annotation.annotationType_;
      die("Cannot apply '" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already annotated with '" + currentAnnotationType + "'.") + "\nRe-annotating fields is not allowed.\nUse 'override' annotation for methods overridden by subclass.");
    }
  }
  var ENTRY_0 = /* @__PURE__ */ createArrayEntryDescriptor(0);
  var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
  var StubArray = function StubArray2() {
  };
  function inherit(ctor, proto) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(ctor.prototype, proto);
    } else if (ctor.prototype.__proto__ !== void 0) {
      ctor.prototype.__proto__ = proto;
    } else {
      ctor.prototype = proto;
    }
  }
  inherit(StubArray, Array.prototype);
  var LegacyObservableArray = /* @__PURE__ */ function(_StubArray, _Symbol$toStringTag2, _Symbol$iterator2) {
    _inheritsLoose(LegacyObservableArray2, _StubArray);
    function LegacyObservableArray2(initialValues, enhancer, name, owned) {
      var _this;
      if (name === void 0) {
        name = true ? "ObservableArray@" + getNextId() : "ObservableArray";
      }
      if (owned === void 0) {
        owned = false;
      }
      _this = _StubArray.call(this) || this;
      var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
      adm.proxy_ = _assertThisInitialized(_this);
      addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);
      if (initialValues && initialValues.length) {
        var prev = allowStateChangesStart(true);
        _this.spliceWithArray(0, 0, initialValues);
        allowStateChangesEnd(prev);
      }
      {
        Object.defineProperty(_assertThisInitialized(_this), "0", ENTRY_0);
      }
      return _this;
    }
    var _proto = LegacyObservableArray2.prototype;
    _proto.concat = function concat() {
      this[$mobx].atom_.reportObserved();
      for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
        arrays[_key] = arguments[_key];
      }
      return Array.prototype.concat.apply(
        this.slice(),
        arrays.map(function(a2) {
          return isObservableArray(a2) ? a2.slice() : a2;
        })
      );
    };
    _proto[_Symbol$iterator2] = function() {
      var self2 = this;
      var nextIndex = 0;
      return makeIterable({
        next: function next() {
          return nextIndex < self2.length ? {
            value: self2[nextIndex++],
            done: false
          } : {
            done: true,
            value: void 0
          };
        }
      });
    };
    _createClass(LegacyObservableArray2, [{
      key: "length",
      get: function get3() {
        return this[$mobx].getArrayLength_();
      },
      set: function set4(newLength) {
        this[$mobx].setArrayLength_(newLength);
      }
    }, {
      key: _Symbol$toStringTag2,
      get: function get3() {
        return "Array";
      }
    }]);
    return LegacyObservableArray2;
  }(StubArray, Symbol.toStringTag, Symbol.iterator);
  Object.entries(arrayExtensions).forEach(function(_ref) {
    var prop = _ref[0], fn = _ref[1];
    if (prop !== "concat") {
      addHiddenProp(LegacyObservableArray.prototype, prop, fn);
    }
  });
  function createArrayEntryDescriptor(index) {
    return {
      enumerable: false,
      configurable: true,
      get: function get3() {
        return this[$mobx].get_(index);
      },
      set: function set4(value) {
        this[$mobx].set_(index, value);
      }
    };
  }
  function createArrayBufferItem(index) {
    defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
  }
  function reserveArrayBuffer(max) {
    if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
      for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {
        createArrayBufferItem(index);
      }
      OBSERVABLE_ARRAY_BUFFER_SIZE = max;
    }
  }
  reserveArrayBuffer(1e3);
  function createLegacyArray(initialValues, enhancer, name) {
    return new LegacyObservableArray(initialValues, enhancer, name);
  }
  function getAtom(thing, property) {
    if (typeof thing === "object" && thing !== null) {
      if (isObservableArray(thing)) {
        if (property !== void 0) {
          die(23);
        }
        return thing[$mobx].atom_;
      }
      if (isObservableSet(thing)) {
        return thing[$mobx];
      }
      if (isObservableMap(thing)) {
        if (property === void 0) {
          return thing.keysAtom_;
        }
        var observable2 = thing.data_.get(property) || thing.hasMap_.get(property);
        if (!observable2) {
          die(25, property, getDebugName(thing));
        }
        return observable2;
      }
      if (isObservableObject(thing)) {
        if (!property) {
          return die(26);
        }
        var _observable = thing[$mobx].values_.get(property);
        if (!_observable) {
          die(27, property, getDebugName(thing));
        }
        return _observable;
      }
      if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
        return thing;
      }
    } else if (isFunction(thing)) {
      if (isReaction(thing[$mobx])) {
        return thing[$mobx];
      }
    }
    die(28);
  }
  function getAdministration(thing, property) {
    if (!thing) {
      die(29);
    }
    if (property !== void 0) {
      return getAdministration(getAtom(thing, property));
    }
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
      return thing;
    }
    if (isObservableMap(thing) || isObservableSet(thing)) {
      return thing;
    }
    if (thing[$mobx]) {
      return thing[$mobx];
    }
    die(24, thing);
  }
  function getDebugName(thing, property) {
    var named;
    if (property !== void 0) {
      named = getAtom(thing, property);
    } else if (isAction(thing)) {
      return thing.name;
    } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
      named = getAdministration(thing);
    } else {
      named = getAtom(thing);
    }
    return named.name_;
  }
  var toString = objectPrototype.toString;
  function deepEqual(a2, b2, depth) {
    if (depth === void 0) {
      depth = -1;
    }
    return eq(a2, b2, depth);
  }
  function eq(a2, b2, depth, aStack, bStack) {
    if (a2 === b2) {
      return a2 !== 0 || 1 / a2 === 1 / b2;
    }
    if (a2 == null || b2 == null) {
      return false;
    }
    if (a2 !== a2) {
      return b2 !== b2;
    }
    var type = typeof a2;
    if (type !== "function" && type !== "object" && typeof b2 != "object") {
      return false;
    }
    var className = toString.call(a2);
    if (className !== toString.call(b2)) {
      return false;
    }
    switch (className) {
      case "[object RegExp]":
      case "[object String]":
        return "" + a2 === "" + b2;
      case "[object Number]":
        if (+a2 !== +a2) {
          return +b2 !== +b2;
        }
        return +a2 === 0 ? 1 / +a2 === 1 / b2 : +a2 === +b2;
      case "[object Date]":
      case "[object Boolean]":
        return +a2 === +b2;
      case "[object Symbol]":
        return typeof Symbol !== "undefined" && Symbol.valueOf.call(a2) === Symbol.valueOf.call(b2);
      case "[object Map]":
      case "[object Set]":
        if (depth >= 0) {
          depth++;
        }
        break;
    }
    a2 = unwrap(a2);
    b2 = unwrap(b2);
    var areArrays = className === "[object Array]";
    if (!areArrays) {
      if (typeof a2 != "object" || typeof b2 != "object") {
        return false;
      }
      var aCtor = a2.constructor, bCtor = b2.constructor;
      if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a2 && "constructor" in b2) {
        return false;
      }
    }
    if (depth === 0) {
      return false;
    } else if (depth < 0) {
      depth = -1;
    }
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      if (aStack[length] === a2) {
        return bStack[length] === b2;
      }
    }
    aStack.push(a2);
    bStack.push(b2);
    if (areArrays) {
      length = a2.length;
      if (length !== b2.length) {
        return false;
      }
      while (length--) {
        if (!eq(a2[length], b2[length], depth - 1, aStack, bStack)) {
          return false;
        }
      }
    } else {
      var keys = Object.keys(a2);
      var key;
      length = keys.length;
      if (Object.keys(b2).length !== length) {
        return false;
      }
      while (length--) {
        key = keys[length];
        if (!(hasProp(b2, key) && eq(a2[key], b2[key], depth - 1, aStack, bStack))) {
          return false;
        }
      }
    }
    aStack.pop();
    bStack.pop();
    return true;
  }
  function unwrap(a2) {
    if (isObservableArray(a2)) {
      return a2.slice();
    }
    if (isES6Map(a2) || isObservableMap(a2)) {
      return Array.from(a2.entries());
    }
    if (isES6Set(a2) || isObservableSet(a2)) {
      return Array.from(a2.entries());
    }
    return a2;
  }
  function makeIterable(iterator) {
    iterator[Symbol.iterator] = getSelf;
    return iterator;
  }
  function getSelf() {
    return this;
  }
  function isAnnotation(thing) {
    return thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_);
  }
  ["Symbol", "Map", "Set"].forEach(function(m2) {
    var g2 = getGlobal();
    if (typeof g2[m2] === "undefined") {
      die("MobX requires global '" + m2 + "' to be available or polyfilled");
    }
  });
  if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
      spy,
      extras: {
        getDebugName
      },
      $mobx
    });
  }

  // node_modules/mobx-react/dist/mobxreact.esm.js
  var import_react7 = __toESM(require_react());

  // node_modules/mobx-react-lite/es/utils/assertEnvironment.js
  var import_react = __toESM(require_react());
  if (!import_react.useState) {
    throw new Error("mobx-react-lite requires React with Hooks support");
  }
  if (!makeObservable) {
    throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");
  }

  // node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/mobx-react-lite/es/utils/observerBatching.js
  function defaultNoopBatch(callback) {
    callback();
  }
  function observerBatching(reactionScheduler3) {
    if (!reactionScheduler3) {
      reactionScheduler3 = defaultNoopBatch;
      if (true) {
        console.warn("[MobX] Failed to get unstable_batched updates from react-dom / react-native");
      }
    }
    configure({ reactionScheduler: reactionScheduler3 });
  }

  // node_modules/mobx-react-lite/es/useObserver.js
  var import_react2 = __toESM(require_react());

  // node_modules/mobx-react-lite/es/utils/printDebugValue.js
  function printDebugValue(v2) {
    return getDependencyTree(v2);
  }

  // node_modules/mobx-react-lite/es/utils/FinalizationRegistryWrapper.js
  var FinalizationRegistryLocal = typeof FinalizationRegistry === "undefined" ? void 0 : FinalizationRegistry;

  // node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js
  function createTrackingData(reaction) {
    var trackingData = {
      reaction,
      mounted: false,
      changedBeforeMount: false,
      cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS
    };
    return trackingData;
  }
  var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 1e4;
  var CLEANUP_TIMER_LOOP_MILLIS = 1e4;

  // node_modules/mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js
  function createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistry2) {
    var cleanupTokenToReactionTrackingMap = /* @__PURE__ */ new Map();
    var globalCleanupTokensCounter = 1;
    var registry = new FinalizationRegistry2(function cleanupFunction(token) {
      var trackedReaction = cleanupTokenToReactionTrackingMap.get(token);
      if (trackedReaction) {
        trackedReaction.reaction.dispose();
        cleanupTokenToReactionTrackingMap.delete(token);
      }
    });
    return {
      addReactionToTrack: function(reactionTrackingRef, reaction, objectRetainedByReact) {
        var token = globalCleanupTokensCounter++;
        registry.register(objectRetainedByReact, token, reactionTrackingRef);
        reactionTrackingRef.current = createTrackingData(reaction);
        reactionTrackingRef.current.finalizationRegistryCleanupToken = token;
        cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current);
        return reactionTrackingRef.current;
      },
      recordReactionAsCommitted: function(reactionRef) {
        registry.unregister(reactionRef);
        if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {
          cleanupTokenToReactionTrackingMap.delete(reactionRef.current.finalizationRegistryCleanupToken);
        }
      },
      forceCleanupTimerToRunNowForTests: function() {
      },
      resetCleanupScheduleForTests: function() {
      }
    };
  }

  // node_modules/mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js
  var __values = function(o2) {
    var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
    if (m2)
      return m2.call(o2);
    if (o2 && typeof o2.length === "number")
      return {
        next: function() {
          if (o2 && i2 >= o2.length)
            o2 = void 0;
          return { value: o2 && o2[i2++], done: !o2 };
        }
      };
    throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  function createTimerBasedReactionCleanupTracking() {
    var uncommittedReactionRefs = /* @__PURE__ */ new Set();
    var reactionCleanupHandle;
    function forceCleanupTimerToRunNowForTests2() {
      if (reactionCleanupHandle) {
        clearTimeout(reactionCleanupHandle);
        cleanUncommittedReactions();
      }
    }
    function resetCleanupScheduleForTests2() {
      var e_1, _a6;
      if (uncommittedReactionRefs.size > 0) {
        try {
          for (var uncommittedReactionRefs_1 = __values(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {
            var ref = uncommittedReactionRefs_1_1.value;
            var tracking = ref.current;
            if (tracking) {
              tracking.reaction.dispose();
              ref.current = null;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a6 = uncommittedReactionRefs_1.return))
              _a6.call(uncommittedReactionRefs_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        uncommittedReactionRefs.clear();
      }
      if (reactionCleanupHandle) {
        clearTimeout(reactionCleanupHandle);
        reactionCleanupHandle = void 0;
      }
    }
    function ensureCleanupTimerRunning() {
      if (reactionCleanupHandle === void 0) {
        reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);
      }
    }
    function scheduleCleanupOfReactionIfLeaked(ref) {
      uncommittedReactionRefs.add(ref);
      ensureCleanupTimerRunning();
    }
    function recordReactionAsCommitted2(reactionRef) {
      uncommittedReactionRefs.delete(reactionRef);
    }
    function cleanUncommittedReactions() {
      reactionCleanupHandle = void 0;
      var now = Date.now();
      uncommittedReactionRefs.forEach(function(ref) {
        var tracking = ref.current;
        if (tracking) {
          if (now >= tracking.cleanAt) {
            tracking.reaction.dispose();
            ref.current = null;
            uncommittedReactionRefs.delete(ref);
          }
        }
      });
      if (uncommittedReactionRefs.size > 0) {
        ensureCleanupTimerRunning();
      }
    }
    return {
      addReactionToTrack: function(reactionTrackingRef, reaction, objectRetainedByReact) {
        reactionTrackingRef.current = createTrackingData(reaction);
        scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);
        return reactionTrackingRef.current;
      },
      recordReactionAsCommitted: recordReactionAsCommitted2,
      forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests2,
      resetCleanupScheduleForTests: resetCleanupScheduleForTests2
    };
  }

  // node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js
  var _a = FinalizationRegistryLocal ? createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistryLocal) : createTimerBasedReactionCleanupTracking();
  var addReactionToTrack = _a.addReactionToTrack;
  var recordReactionAsCommitted = _a.recordReactionAsCommitted;
  var resetCleanupScheduleForTests = _a.resetCleanupScheduleForTests;
  var forceCleanupTimerToRunNowForTests = _a.forceCleanupTimerToRunNowForTests;

  // node_modules/mobx-react-lite/es/staticRendering.js
  var globalIsUsingStaticRendering = false;
  function isUsingStaticRendering() {
    return globalIsUsingStaticRendering;
  }

  // node_modules/mobx-react-lite/es/useObserver.js
  var __read = function(o2, n2) {
    var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
    if (!m2)
      return o2;
    var i2 = m2.call(o2), r2, ar2 = [], e2;
    try {
      while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
        ar2.push(r2.value);
    } catch (error) {
      e2 = { error };
    } finally {
      try {
        if (r2 && !r2.done && (m2 = i2["return"]))
          m2.call(i2);
      } finally {
        if (e2)
          throw e2.error;
      }
    }
    return ar2;
  };
  function observerComponentNameFor(baseComponentName) {
    return "observer".concat(baseComponentName);
  }
  var ObjectToBeRetainedByReact = function() {
    function ObjectToBeRetainedByReact2() {
    }
    return ObjectToBeRetainedByReact2;
  }();
  function objectToBeRetainedByReactFactory() {
    return new ObjectToBeRetainedByReact();
  }
  function useObserver(fn, baseComponentName) {
    if (baseComponentName === void 0) {
      baseComponentName = "observed";
    }
    if (isUsingStaticRendering()) {
      return fn();
    }
    var _a6 = __read(import_react2.default.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a6[0];
    var _b = __read(import_react2.default.useState(), 2), setState = _b[1];
    var forceUpdate = function() {
      return setState([]);
    };
    var reactionTrackingRef = import_react2.default.useRef(null);
    if (!reactionTrackingRef.current) {
      var newReaction = new Reaction(observerComponentNameFor(baseComponentName), function() {
        if (trackingData_1.mounted) {
          forceUpdate();
        } else {
          trackingData_1.changedBeforeMount = true;
        }
      });
      var trackingData_1 = addReactionToTrack(reactionTrackingRef, newReaction, objectRetainedByReact);
    }
    var reaction = reactionTrackingRef.current.reaction;
    import_react2.default.useDebugValue(reaction, printDebugValue);
    import_react2.default.useEffect(function() {
      recordReactionAsCommitted(reactionTrackingRef);
      if (reactionTrackingRef.current) {
        reactionTrackingRef.current.mounted = true;
        if (reactionTrackingRef.current.changedBeforeMount) {
          reactionTrackingRef.current.changedBeforeMount = false;
          forceUpdate();
        }
      } else {
        reactionTrackingRef.current = {
          reaction: new Reaction(observerComponentNameFor(baseComponentName), function() {
            forceUpdate();
          }),
          mounted: true,
          changedBeforeMount: false,
          cleanAt: Infinity
        };
        forceUpdate();
      }
      return function() {
        reactionTrackingRef.current.reaction.dispose();
        reactionTrackingRef.current = null;
      };
    }, []);
    var rendering;
    var exception;
    reaction.track(function() {
      try {
        rendering = fn();
      } catch (e2) {
        exception = e2;
      }
    });
    if (exception) {
      throw exception;
    }
    return rendering;
  }

  // node_modules/mobx-react-lite/es/observer.js
  var import_react3 = __toESM(require_react());
  var warnObserverOptionsDeprecated = true;
  var hasSymbol = typeof Symbol === "function" && Symbol.for;
  var ReactForwardRefSymbol = hasSymbol ? Symbol.for("react.forward_ref") : typeof import_react3.forwardRef === "function" && (0, import_react3.forwardRef)(function(props) {
    return null;
  })["$$typeof"];
  var ReactMemoSymbol = hasSymbol ? Symbol.for("react.memo") : typeof import_react3.memo === "function" && (0, import_react3.memo)(function(props) {
    return null;
  })["$$typeof"];
  function observer(baseComponent, options) {
    var _a6;
    if (warnObserverOptionsDeprecated && options) {
      warnObserverOptionsDeprecated = false;
      console.warn("[mobx-react-lite] `observer(fn, { forwardRef: true })` is deprecated, use `observer(React.forwardRef(fn))`");
    }
    if (ReactMemoSymbol && baseComponent["$$typeof"] === ReactMemoSymbol) {
      throw new Error("[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.");
    }
    if (isUsingStaticRendering()) {
      return baseComponent;
    }
    var useForwardRef = (_a6 = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a6 !== void 0 ? _a6 : false;
    var render = baseComponent;
    var baseComponentName = baseComponent.displayName || baseComponent.name;
    if (ReactForwardRefSymbol && baseComponent["$$typeof"] === ReactForwardRefSymbol) {
      useForwardRef = true;
      render = baseComponent["render"];
      if (typeof render !== "function") {
        throw new Error("[mobx-react-lite] `render` property of ForwardRef was not a function");
      }
    }
    var observerComponent = function(props, ref) {
      return useObserver(function() {
        return render(props, ref);
      }, baseComponentName);
    };
    if (baseComponentName !== "") {
      ;
      observerComponent.displayName = baseComponentName;
    }
    if (baseComponent.contextTypes) {
      ;
      observerComponent.contextTypes = baseComponent.contextTypes;
    }
    if (useForwardRef) {
      observerComponent = (0, import_react3.forwardRef)(observerComponent);
    }
    observerComponent = (0, import_react3.memo)(observerComponent);
    copyStaticProperties(baseComponent, observerComponent);
    if (true) {
      Object.defineProperty(observerComponent, "contextTypes", {
        set: function() {
          var _a7;
          throw new Error("[mobx-react-lite] `".concat(this.displayName || ((_a7 = this.type) === null || _a7 === void 0 ? void 0 : _a7.displayName) || "Component", ".contextTypes` must be set before applying `observer`."));
        }
      });
    }
    return observerComponent;
  }
  var hoistBlackList = {
    $$typeof: true,
    render: true,
    compare: true,
    type: true,
    displayName: true
  };
  function copyStaticProperties(base, target) {
    Object.keys(base).forEach(function(key) {
      if (!hoistBlackList[key]) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
      }
    });
  }

  // node_modules/mobx-react-lite/es/ObserverComponent.js
  function ObserverComponent(_a6) {
    var children = _a6.children, render = _a6.render;
    var component = children || render;
    if (typeof component !== "function") {
      return null;
    }
    return useObserver(component);
  }
  if (true) {
    ObserverComponent.propTypes = {
      children: ObserverPropsCheck,
      render: ObserverPropsCheck
    };
  }
  ObserverComponent.displayName = "Observer";
  function ObserverPropsCheck(props, key, componentName, location, propFullName) {
    var extraKey = key === "children" ? "render" : "children";
    var hasProp2 = typeof props[key] === "function";
    var hasExtraProp = typeof props[extraKey] === "function";
    if (hasProp2 && hasExtraProp) {
      return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
    }
    if (hasProp2 || hasExtraProp) {
      return null;
    }
    return new Error("Invalid prop `" + propFullName + "` of type `" + typeof props[key] + "` supplied to `" + componentName + "`, expected `function`.");
  }

  // node_modules/mobx-react-lite/es/useLocalObservable.js
  var import_react4 = __toESM(require_react());

  // node_modules/mobx-react-lite/es/useLocalStore.js
  var import_react6 = __toESM(require_react());

  // node_modules/mobx-react-lite/es/useAsObservableSource.js
  var import_react5 = __toESM(require_react());

  // node_modules/mobx-react-lite/es/index.js
  observerBatching(import_react_dom.unstable_batchedUpdates);

  // node_modules/mobx-react/dist/mobxreact.esm.js
  var symbolId = 0;
  function createSymbol(name) {
    if (typeof Symbol === "function") {
      return Symbol(name);
    }
    var symbol = "__$mobx-react " + name + " (" + symbolId + ")";
    symbolId++;
    return symbol;
  }
  var createdSymbols = {};
  function newSymbol(name) {
    if (!createdSymbols[name]) {
      createdSymbols[name] = createSymbol(name);
    }
    return createdSymbols[name];
  }
  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }
    if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
      return false;
    }
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) {
      return false;
    }
    for (var i2 = 0; i2 < keysA.length; i2++) {
      if (!Object.hasOwnProperty.call(objB, keysA[i2]) || !is(objA[keysA[i2]], objB[keysA[i2]])) {
        return false;
      }
    }
    return true;
  }
  function is(x2, y2) {
    if (x2 === y2) {
      return x2 !== 0 || 1 / x2 === 1 / y2;
    } else {
      return x2 !== x2 && y2 !== y2;
    }
  }
  function setHiddenProp(target, prop, value) {
    if (!Object.hasOwnProperty.call(target, prop)) {
      Object.defineProperty(target, prop, {
        enumerable: false,
        configurable: true,
        writable: true,
        value
      });
    } else {
      target[prop] = value;
    }
  }
  var mobxMixins = /* @__PURE__ */ newSymbol("patchMixins");
  var mobxPatchedDefinition = /* @__PURE__ */ newSymbol("patchedDefinition");
  function getMixins(target, methodName) {
    var mixins = target[mobxMixins] = target[mobxMixins] || {};
    var methodMixins = mixins[methodName] = mixins[methodName] || {};
    methodMixins.locks = methodMixins.locks || 0;
    methodMixins.methods = methodMixins.methods || [];
    return methodMixins;
  }
  function wrapper(realMethod, mixins) {
    var _this = this;
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    mixins.locks++;
    try {
      var retVal2;
      if (realMethod !== void 0 && realMethod !== null) {
        retVal2 = realMethod.apply(this, args);
      }
      return retVal2;
    } finally {
      mixins.locks--;
      if (mixins.locks === 0) {
        mixins.methods.forEach(function(mx) {
          mx.apply(_this, args);
        });
      }
    }
  }
  function wrapFunction(realMethod, mixins) {
    var fn = function fn2() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      wrapper.call.apply(wrapper, [this, realMethod, mixins].concat(args));
    };
    return fn;
  }
  function patch(target, methodName, mixinMethod) {
    var mixins = getMixins(target, methodName);
    if (mixins.methods.indexOf(mixinMethod) < 0) {
      mixins.methods.push(mixinMethod);
    }
    var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);
    if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {
      return;
    }
    var originalMethod = target[methodName];
    var newDefinition = createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : void 0, mixins, originalMethod);
    Object.defineProperty(target, methodName, newDefinition);
  }
  function createDefinition(target, methodName, enumerable, mixins, originalMethod) {
    var _ref;
    var wrappedFunc = wrapFunction(originalMethod, mixins);
    return _ref = {}, _ref[mobxPatchedDefinition] = true, _ref.get = function get3() {
      return wrappedFunc;
    }, _ref.set = function set4(value) {
      if (this === target) {
        wrappedFunc = wrapFunction(value, mixins);
      } else {
        var newDefinition = createDefinition(this, methodName, enumerable, mixins, value);
        Object.defineProperty(this, methodName, newDefinition);
      }
    }, _ref.configurable = true, _ref.enumerable = enumerable, _ref;
  }
  var mobxAdminProperty = $mobx || "$mobx";
  var mobxObserverProperty = /* @__PURE__ */ newSymbol("isMobXReactObserver");
  var mobxIsUnmounted = /* @__PURE__ */ newSymbol("isUnmounted");
  var skipRenderKey = /* @__PURE__ */ newSymbol("skipRender");
  var isForcingUpdateKey = /* @__PURE__ */ newSymbol("isForcingUpdate");
  function makeClassComponentObserver(componentClass) {
    var target = componentClass.prototype;
    if (componentClass[mobxObserverProperty]) {
      var displayName = getDisplayName(target);
      console.warn("The provided component class (" + displayName + ")\n                has already been declared as an observer component.");
    } else {
      componentClass[mobxObserverProperty] = true;
    }
    if (target.componentWillReact) {
      throw new Error("The componentWillReact life-cycle event is no longer supported");
    }
    if (componentClass["__proto__"] !== import_react7.PureComponent) {
      if (!target.shouldComponentUpdate) {
        target.shouldComponentUpdate = observerSCU;
      } else if (target.shouldComponentUpdate !== observerSCU) {
        throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.");
      }
    }
    makeObservableProp(target, "props");
    makeObservableProp(target, "state");
    if (componentClass.contextType) {
      makeObservableProp(target, "context");
    }
    var originalRender = target.render;
    if (typeof originalRender !== "function") {
      var _displayName = getDisplayName(target);
      throw new Error("[mobx-react] class component (" + _displayName + ") is missing `render` method.\n`observer` requires `render` being a function defined on prototype.\n`render = () => {}` or `render = function() {}` is not supported.");
    }
    target.render = function() {
      this.render = isUsingStaticRendering() ? originalRender : createReactiveRender.call(this, originalRender);
      return this.render();
    };
    patch(target, "componentDidMount", function() {
      this[mobxIsUnmounted] = false;
      if (!this.render[mobxAdminProperty]) {
        import_react7.Component.prototype.forceUpdate.call(this);
      }
    });
    patch(target, "componentWillUnmount", function() {
      if (isUsingStaticRendering()) {
        return;
      }
      var reaction = this.render[mobxAdminProperty];
      if (reaction) {
        reaction.dispose();
        this.render[mobxAdminProperty] = null;
      } else {
        var _displayName2 = getDisplayName(this);
        console.warn("The reactive render of an observer class component (" + _displayName2 + ")\n                was overridden after MobX attached. This may result in a memory leak if the\n                overridden reactive render was not properly disposed.");
      }
      this[mobxIsUnmounted] = true;
    });
    return componentClass;
  }
  function getDisplayName(comp) {
    return comp.displayName || comp.name || comp.constructor && (comp.constructor.displayName || comp.constructor.name) || "<component>";
  }
  function createReactiveRender(originalRender) {
    var _this = this;
    setHiddenProp(this, skipRenderKey, false);
    setHiddenProp(this, isForcingUpdateKey, false);
    var initialName = getDisplayName(this);
    var boundOriginalRender = originalRender.bind(this);
    var isRenderingPending = false;
    var createReaction = function createReaction2() {
      var reaction = new Reaction(initialName + ".render()", function() {
        if (!isRenderingPending) {
          isRenderingPending = true;
          if (_this[mobxIsUnmounted] !== true) {
            var hasError = true;
            try {
              setHiddenProp(_this, isForcingUpdateKey, true);
              if (!_this[skipRenderKey]) {
                import_react7.Component.prototype.forceUpdate.call(_this);
              }
              hasError = false;
            } finally {
              setHiddenProp(_this, isForcingUpdateKey, false);
              if (hasError) {
                reaction.dispose();
                _this.render[mobxAdminProperty] = null;
              }
            }
          }
        }
      });
      reaction["reactComponent"] = _this;
      return reaction;
    };
    function reactiveRender() {
      var _reactiveRender$mobxA;
      isRenderingPending = false;
      var reaction = (_reactiveRender$mobxA = reactiveRender[mobxAdminProperty]) != null ? _reactiveRender$mobxA : reactiveRender[mobxAdminProperty] = createReaction();
      var exception = void 0;
      var rendering = void 0;
      reaction.track(function() {
        try {
          rendering = allowStateChanges(false, boundOriginalRender);
        } catch (e2) {
          exception = e2;
        }
      });
      if (exception) {
        throw exception;
      }
      return rendering;
    }
    return reactiveRender;
  }
  function observerSCU(nextProps, nextState) {
    if (isUsingStaticRendering()) {
      console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
    }
    if (this.state !== nextState) {
      return true;
    }
    return !shallowEqual(this.props, nextProps);
  }
  function makeObservableProp(target, propName) {
    var valueHolderKey = newSymbol("reactProp_" + propName + "_valueHolder");
    var atomHolderKey = newSymbol("reactProp_" + propName + "_atomHolder");
    function getAtom2() {
      if (!this[atomHolderKey]) {
        setHiddenProp(this, atomHolderKey, createAtom("reactive " + propName));
      }
      return this[atomHolderKey];
    }
    Object.defineProperty(target, propName, {
      configurable: true,
      enumerable: true,
      get: function get3() {
        var prevReadState = false;
        if (allowStateReadsStart && allowStateReadsEnd) {
          prevReadState = allowStateReadsStart(true);
        }
        getAtom2.call(this).reportObserved();
        if (allowStateReadsStart && allowStateReadsEnd) {
          allowStateReadsEnd(prevReadState);
        }
        return this[valueHolderKey];
      },
      set: function set4(v2) {
        if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v2)) {
          setHiddenProp(this, valueHolderKey, v2);
          setHiddenProp(this, skipRenderKey, true);
          getAtom2.call(this).reportChanged();
          setHiddenProp(this, skipRenderKey, false);
        } else {
          setHiddenProp(this, valueHolderKey, v2);
        }
      }
    });
  }
  function observer2(component) {
    if (component["isMobxInjector"] === true) {
      console.warn("Mobx observer: You are trying to use `observer` on a component that already has `inject`. Please apply `observer` before applying `inject`");
    }
    if (Object.prototype.isPrototypeOf.call(import_react7.Component, component) || Object.prototype.isPrototypeOf.call(import_react7.PureComponent, component)) {
      return makeClassComponentObserver(component);
    } else {
      return observer(component);
    }
  }
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var _excluded = ["children"];
  var MobXProviderContext = /* @__PURE__ */ import_react7.default.createContext({});
  function Provider(props) {
    var children = props.children, stores = _objectWithoutPropertiesLoose(props, _excluded);
    var parentValue = import_react7.default.useContext(MobXProviderContext);
    var mutableProviderRef = import_react7.default.useRef(_extends2({}, parentValue, stores));
    var value = mutableProviderRef.current;
    if (true) {
      var newValue = _extends2({}, value, stores);
      if (!shallowEqual(value, newValue)) {
        throw new Error("MobX Provider: The set of provided stores has changed. See: https://github.com/mobxjs/mobx-react#the-set-of-provided-stores-has-changed-error.");
      }
    }
    return import_react7.default.createElement(MobXProviderContext.Provider, {
      value
    }, children);
  }
  Provider.displayName = "MobXProvider";
  if (!import_react7.Component)
    throw new Error("mobx-react requires React to be available");
  if (!observable)
    throw new Error("mobx-react requires mobx to be available");

  // node_modules/@fluentui/set-version/lib/setVersion.js
  var packagesCache = {};
  var _win = void 0;
  try {
    _win = window;
  } catch (e2) {
  }
  function setVersion(packageName, packageVersion) {
    if (typeof _win !== "undefined") {
      var packages = _win.__packages__ = _win.__packages__ || {};
      if (!packages[packageName] || !packagesCache[packageName]) {
        packagesCache[packageName] = packageVersion;
        var versions = packages[packageName] = packages[packageName] || [];
        versions.push(packageVersion);
      }
    }
  }

  // node_modules/@fluentui/set-version/lib/index.js
  setVersion("@fluentui/set-version", "6.0.0");

  // node_modules/@fluentui/react/lib/version.js
  setVersion("@fluentui/react", "8.98.8");

  // node_modules/@fluentui/merge-styles/node_modules/tslib/modules/index.js
  var import_tslib = __toESM(require_tslib(), 1);
  var {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values: __values2,
    __read: __read2,
    __spread,
    __spreadArrays,
    __spreadArray,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet,
    __classPrivateFieldIn
  } = import_tslib.default;

  // node_modules/@fluentui/merge-styles/lib/Stylesheet.js
  var InjectionMode = {
    none: 0,
    insertNode: 1,
    appendChild: 2
  };
  var STYLESHEET_SETTING = "__stylesheet__";
  var REUSE_STYLE_NODE = typeof navigator !== "undefined" && /rv:11.0/.test(navigator.userAgent);
  var _global = {};
  try {
    _global = window || {};
  } catch (_a6) {
  }
  var _stylesheet;
  var Stylesheet = function() {
    function Stylesheet2(config, serializedStylesheet) {
      var _a6, _b, _c, _d, _e2, _f;
      this._rules = [];
      this._preservedRules = [];
      this._counter = 0;
      this._keyToClassName = {};
      this._onInsertRuleCallbacks = [];
      this._onResetCallbacks = [];
      this._classNameToArgs = {};
      this._config = __assign({
        injectionMode: typeof document === "undefined" ? InjectionMode.none : InjectionMode.insertNode,
        defaultPrefix: "css",
        namespace: void 0,
        cspSettings: void 0
      }, config);
      this._classNameToArgs = (_a6 = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.classNameToArgs) !== null && _a6 !== void 0 ? _a6 : this._classNameToArgs;
      this._counter = (_b = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.counter) !== null && _b !== void 0 ? _b : this._counter;
      this._keyToClassName = (_d = (_c = this._config.classNameCache) !== null && _c !== void 0 ? _c : serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.keyToClassName) !== null && _d !== void 0 ? _d : this._keyToClassName;
      this._preservedRules = (_e2 = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.preservedRules) !== null && _e2 !== void 0 ? _e2 : this._preservedRules;
      this._rules = (_f = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.rules) !== null && _f !== void 0 ? _f : this._rules;
    }
    Stylesheet2.getInstance = function() {
      _stylesheet = _global[STYLESHEET_SETTING];
      if (!_stylesheet || _stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document) {
        var fabricConfig = (_global === null || _global === void 0 ? void 0 : _global.FabricConfig) || {};
        var stylesheet3 = new Stylesheet2(fabricConfig.mergeStyles, fabricConfig.serializedStylesheet);
        _stylesheet = stylesheet3;
        _global[STYLESHEET_SETTING] = stylesheet3;
      }
      return _stylesheet;
    };
    Stylesheet2.prototype.serialize = function() {
      return JSON.stringify({
        classNameToArgs: this._classNameToArgs,
        counter: this._counter,
        keyToClassName: this._keyToClassName,
        preservedRules: this._preservedRules,
        rules: this._rules
      });
    };
    Stylesheet2.prototype.setConfig = function(config) {
      this._config = __assign(__assign({}, this._config), config);
    };
    Stylesheet2.prototype.onReset = function(callback) {
      var _this = this;
      this._onResetCallbacks.push(callback);
      return function() {
        _this._onResetCallbacks = _this._onResetCallbacks.filter(function(cb) {
          return cb !== callback;
        });
      };
    };
    Stylesheet2.prototype.onInsertRule = function(callback) {
      var _this = this;
      this._onInsertRuleCallbacks.push(callback);
      return function() {
        _this._onInsertRuleCallbacks = _this._onInsertRuleCallbacks.filter(function(cb) {
          return cb !== callback;
        });
      };
    };
    Stylesheet2.prototype.getClassName = function(displayName) {
      var namespace = this._config.namespace;
      var prefix = displayName || this._config.defaultPrefix;
      return (namespace ? namespace + "-" : "") + prefix + "-" + this._counter++;
    };
    Stylesheet2.prototype.cacheClassName = function(className, key, args, rules2) {
      this._keyToClassName[key] = className;
      this._classNameToArgs[className] = {
        args,
        rules: rules2
      };
    };
    Stylesheet2.prototype.classNameFromKey = function(key) {
      return this._keyToClassName[key];
    };
    Stylesheet2.prototype.getClassNameCache = function() {
      return this._keyToClassName;
    };
    Stylesheet2.prototype.argsFromClassName = function(className) {
      var entry = this._classNameToArgs[className];
      return entry && entry.args;
    };
    Stylesheet2.prototype.insertedRulesFromClassName = function(className) {
      var entry = this._classNameToArgs[className];
      return entry && entry.rules;
    };
    Stylesheet2.prototype.insertRule = function(rule, preserve) {
      var injectionMode = this._config.injectionMode;
      var element = injectionMode !== InjectionMode.none ? this._getStyleElement() : void 0;
      if (preserve) {
        this._preservedRules.push(rule);
      }
      if (element) {
        switch (injectionMode) {
          case InjectionMode.insertNode:
            var sheet = element.sheet;
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e2) {
            }
            break;
          case InjectionMode.appendChild:
            element.appendChild(document.createTextNode(rule));
            break;
        }
      } else {
        this._rules.push(rule);
      }
      if (this._config.onInsertRule) {
        this._config.onInsertRule(rule);
      }
      this._onInsertRuleCallbacks.forEach(function(callback) {
        return callback();
      });
    };
    Stylesheet2.prototype.getRules = function(includePreservedRules) {
      return (includePreservedRules ? this._preservedRules.join("") : "") + this._rules.join("");
    };
    Stylesheet2.prototype.reset = function() {
      this._rules = [];
      this._counter = 0;
      this._classNameToArgs = {};
      this._keyToClassName = {};
      this._onResetCallbacks.forEach(function(callback) {
        return callback();
      });
    };
    Stylesheet2.prototype.resetKeys = function() {
      this._keyToClassName = {};
    };
    Stylesheet2.prototype._getStyleElement = function() {
      var _this = this;
      if (!this._styleElement && typeof document !== "undefined") {
        this._styleElement = this._createStyleElement();
        if (!REUSE_STYLE_NODE) {
          window.requestAnimationFrame(function() {
            _this._styleElement = void 0;
          });
        }
      }
      return this._styleElement;
    };
    Stylesheet2.prototype._createStyleElement = function() {
      var head = document.head;
      var styleElement = document.createElement("style");
      var nodeToInsertBefore = null;
      styleElement.setAttribute("data-merge-styles", "true");
      var cspSettings = this._config.cspSettings;
      if (cspSettings) {
        if (cspSettings.nonce) {
          styleElement.setAttribute("nonce", cspSettings.nonce);
        }
      }
      if (this._lastStyleElement) {
        nodeToInsertBefore = this._lastStyleElement.nextElementSibling;
      } else {
        var placeholderStyleTag = this._findPlaceholderStyleTag();
        if (placeholderStyleTag) {
          nodeToInsertBefore = placeholderStyleTag.nextElementSibling;
        } else {
          nodeToInsertBefore = head.childNodes[0];
        }
      }
      head.insertBefore(styleElement, head.contains(nodeToInsertBefore) ? nodeToInsertBefore : null);
      this._lastStyleElement = styleElement;
      return styleElement;
    };
    Stylesheet2.prototype._findPlaceholderStyleTag = function() {
      var head = document.head;
      if (head) {
        return head.querySelector("style[data-merge-styles]");
      }
      return null;
    };
    return Stylesheet2;
  }();

  // node_modules/@fluentui/merge-styles/lib/extractStyleParts.js
  function extractStyleParts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var classes = [];
    var objects = [];
    var stylesheet3 = Stylesheet.getInstance();
    function _processArgs(argsList) {
      for (var _i2 = 0, argsList_1 = argsList; _i2 < argsList_1.length; _i2++) {
        var arg = argsList_1[_i2];
        if (arg) {
          if (typeof arg === "string") {
            if (arg.indexOf(" ") >= 0) {
              _processArgs(arg.split(" "));
            } else {
              var translatedArgs = stylesheet3.argsFromClassName(arg);
              if (translatedArgs) {
                _processArgs(translatedArgs);
              } else {
                if (classes.indexOf(arg) === -1) {
                  classes.push(arg);
                }
              }
            }
          } else if (Array.isArray(arg)) {
            _processArgs(arg);
          } else if (typeof arg === "object") {
            objects.push(arg);
          }
        }
      }
    }
    _processArgs(args);
    return {
      classes,
      objects
    };
  }

  // node_modules/@fluentui/merge-styles/lib/StyleOptionsState.js
  function setRTL(isRTL) {
    if (_rtl !== isRTL) {
      _rtl = isRTL;
    }
  }
  function getRTL() {
    if (_rtl === void 0) {
      _rtl = typeof document !== "undefined" && !!document.documentElement && document.documentElement.getAttribute("dir") === "rtl";
    }
    return _rtl;
  }
  var _rtl;
  _rtl = getRTL();
  function getStyleOptions() {
    return {
      rtl: getRTL()
    };
  }

  // node_modules/@fluentui/merge-styles/lib/transforms/kebabRules.js
  var rules = {};
  function kebabRules(rulePairs, index) {
    var rule = rulePairs[index];
    if (rule.charAt(0) !== "-") {
      rulePairs[index] = rules[rule] = rules[rule] || rule.replace(/([A-Z])/g, "-$1").toLowerCase();
    }
  }

  // node_modules/@fluentui/merge-styles/lib/getVendorSettings.js
  var _vendorSettings;
  function getVendorSettings() {
    var _a6;
    if (!_vendorSettings) {
      var doc = typeof document !== "undefined" ? document : void 0;
      var nav = typeof navigator !== "undefined" ? navigator : void 0;
      var userAgent = (_a6 = nav === null || nav === void 0 ? void 0 : nav.userAgent) === null || _a6 === void 0 ? void 0 : _a6.toLowerCase();
      if (!doc) {
        _vendorSettings = {
          isWebkit: true,
          isMoz: true,
          isOpera: true,
          isMs: true
        };
      } else {
        _vendorSettings = {
          isWebkit: !!(doc && "WebkitAppearance" in doc.documentElement.style),
          isMoz: !!(userAgent && userAgent.indexOf("firefox") > -1),
          isOpera: !!(userAgent && userAgent.indexOf("opera") > -1),
          isMs: !!(nav && (/rv:11.0/i.test(nav.userAgent) || /Edge\/\d./i.test(navigator.userAgent)))
        };
      }
    }
    return _vendorSettings;
  }

  // node_modules/@fluentui/merge-styles/lib/transforms/prefixRules.js
  var autoPrefixNames = {
    "user-select": 1
  };
  function prefixRules(rulePairs, index) {
    var vendorSettings = getVendorSettings();
    var name = rulePairs[index];
    if (autoPrefixNames[name]) {
      var value = rulePairs[index + 1];
      if (autoPrefixNames[name]) {
        if (vendorSettings.isWebkit) {
          rulePairs.push("-webkit-" + name, value);
        }
        if (vendorSettings.isMoz) {
          rulePairs.push("-moz-" + name, value);
        }
        if (vendorSettings.isMs) {
          rulePairs.push("-ms-" + name, value);
        }
        if (vendorSettings.isOpera) {
          rulePairs.push("-o-" + name, value);
        }
      }
    }
  }

  // node_modules/@fluentui/merge-styles/lib/transforms/provideUnits.js
  var NON_PIXEL_NUMBER_PROPS = [
    "column-count",
    "font-weight",
    "flex",
    "flex-grow",
    "flex-shrink",
    "fill-opacity",
    "opacity",
    "order",
    "z-index",
    "zoom"
  ];
  function provideUnits(rulePairs, index) {
    var name = rulePairs[index];
    var value = rulePairs[index + 1];
    if (typeof value === "number") {
      var isNonPixelProp = NON_PIXEL_NUMBER_PROPS.indexOf(name) > -1;
      var isVariableOrPrefixed = name.indexOf("--") > -1;
      var unit = isNonPixelProp || isVariableOrPrefixed ? "" : "px";
      rulePairs[index + 1] = "" + value + unit;
    }
  }

  // node_modules/@fluentui/merge-styles/lib/transforms/rtlifyRules.js
  var _a2;
  var LEFT = "left";
  var RIGHT = "right";
  var NO_FLIP = "@noflip";
  var NAME_REPLACEMENTS = (_a2 = {}, _a2[LEFT] = RIGHT, _a2[RIGHT] = LEFT, _a2);
  var VALUE_REPLACEMENTS = {
    "w-resize": "e-resize",
    "sw-resize": "se-resize",
    "nw-resize": "ne-resize"
  };
  function rtlifyRules(options, rulePairs, index) {
    if (options.rtl) {
      var name_1 = rulePairs[index];
      if (!name_1) {
        return;
      }
      var value = rulePairs[index + 1];
      if (typeof value === "string" && value.indexOf(NO_FLIP) >= 0) {
        rulePairs[index + 1] = value.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g, "");
      } else if (name_1.indexOf(LEFT) >= 0) {
        rulePairs[index] = name_1.replace(LEFT, RIGHT);
      } else if (name_1.indexOf(RIGHT) >= 0) {
        rulePairs[index] = name_1.replace(RIGHT, LEFT);
      } else if (String(value).indexOf(LEFT) >= 0) {
        rulePairs[index + 1] = value.replace(LEFT, RIGHT);
      } else if (String(value).indexOf(RIGHT) >= 0) {
        rulePairs[index + 1] = value.replace(RIGHT, LEFT);
      } else if (NAME_REPLACEMENTS[name_1]) {
        rulePairs[index] = NAME_REPLACEMENTS[name_1];
      } else if (VALUE_REPLACEMENTS[value]) {
        rulePairs[index + 1] = VALUE_REPLACEMENTS[value];
      } else {
        switch (name_1) {
          case "margin":
          case "padding":
            rulePairs[index + 1] = flipQuad(value);
            break;
          case "box-shadow":
            rulePairs[index + 1] = negateNum(value, 0);
            break;
        }
      }
    }
  }
  function negateNum(value, partIndex) {
    var parts = value.split(" ");
    var numberVal = parseInt(parts[partIndex], 10);
    parts[0] = parts[0].replace(String(numberVal), String(numberVal * -1));
    return parts.join(" ");
  }
  function flipQuad(value) {
    if (typeof value === "string") {
      var parts = value.split(" ");
      if (parts.length === 4) {
        return parts[0] + " " + parts[3] + " " + parts[2] + " " + parts[1];
      }
    }
    return value;
  }

  // node_modules/@fluentui/merge-styles/lib/tokenizeWithParentheses.js
  function tokenizeWithParentheses(value) {
    var parts = [];
    var partStart = 0;
    var parens = 0;
    for (var i2 = 0; i2 < value.length; i2++) {
      switch (value[i2]) {
        case "(":
          parens++;
          break;
        case ")":
          if (parens) {
            parens--;
          }
          break;
        case "	":
        case " ":
          if (!parens) {
            if (i2 > partStart) {
              parts.push(value.substring(partStart, i2));
            }
            partStart = i2 + 1;
          }
          break;
      }
    }
    if (partStart < value.length) {
      parts.push(value.substring(partStart));
    }
    return parts;
  }

  // node_modules/@fluentui/merge-styles/lib/styleToClassName.js
  var DISPLAY_NAME = "displayName";
  function getDisplayName2(rules2) {
    var rootStyle = rules2 && rules2["&"];
    return rootStyle ? rootStyle.displayName : void 0;
  }
  var globalSelectorRegExp = /\:global\((.+?)\)/g;
  function expandCommaSeparatedGlobals(selectorWithGlobals) {
    if (!globalSelectorRegExp.test(selectorWithGlobals)) {
      return selectorWithGlobals;
    }
    var replacementInfo = [];
    var findGlobal = /\:global\((.+?)\)/g;
    var match = null;
    while (match = findGlobal.exec(selectorWithGlobals)) {
      if (match[1].indexOf(",") > -1) {
        replacementInfo.push([
          match.index,
          match.index + match[0].length,
          match[1].split(",").map(function(v2) {
            return ":global(" + v2.trim() + ")";
          }).join(", ")
        ]);
      }
    }
    return replacementInfo.reverse().reduce(function(selector, _a6) {
      var matchIndex = _a6[0], matchEndIndex = _a6[1], replacement = _a6[2];
      var prefix = selector.slice(0, matchIndex);
      var suffix = selector.slice(matchEndIndex);
      return prefix + replacement + suffix;
    }, selectorWithGlobals);
  }
  function expandSelector(newSelector, currentSelector) {
    if (newSelector.indexOf(":global(") >= 0) {
      return newSelector.replace(globalSelectorRegExp, "$1");
    } else if (newSelector.indexOf(":") === 0) {
      return currentSelector + newSelector;
    } else if (newSelector.indexOf("&") < 0) {
      return currentSelector + " " + newSelector;
    }
    return newSelector;
  }
  function extractSelector(currentSelector, rules2, selector, value) {
    if (rules2 === void 0) {
      rules2 = { __order: [] };
    }
    if (selector.indexOf("@") === 0) {
      selector = selector + "{" + currentSelector;
      extractRules([value], rules2, selector);
    } else if (selector.indexOf(",") > -1) {
      expandCommaSeparatedGlobals(selector).split(",").map(function(s2) {
        return s2.trim();
      }).forEach(function(separatedSelector) {
        return extractRules([value], rules2, expandSelector(separatedSelector, currentSelector));
      });
    } else {
      extractRules([value], rules2, expandSelector(selector, currentSelector));
    }
  }
  function extractRules(args, rules2, currentSelector) {
    if (rules2 === void 0) {
      rules2 = { __order: [] };
    }
    if (currentSelector === void 0) {
      currentSelector = "&";
    }
    var stylesheet3 = Stylesheet.getInstance();
    var currentRules = rules2[currentSelector];
    if (!currentRules) {
      currentRules = {};
      rules2[currentSelector] = currentRules;
      rules2.__order.push(currentSelector);
    }
    for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
      var arg = args_1[_i];
      if (typeof arg === "string") {
        var expandedRules = stylesheet3.argsFromClassName(arg);
        if (expandedRules) {
          extractRules(expandedRules, rules2, currentSelector);
        }
      } else if (Array.isArray(arg)) {
        extractRules(arg, rules2, currentSelector);
      } else {
        for (var prop in arg) {
          if (arg.hasOwnProperty(prop)) {
            var propValue = arg[prop];
            if (prop === "selectors") {
              var selectors = arg.selectors;
              for (var newSelector in selectors) {
                if (selectors.hasOwnProperty(newSelector)) {
                  extractSelector(currentSelector, rules2, newSelector, selectors[newSelector]);
                }
              }
            } else if (typeof propValue === "object") {
              if (propValue !== null) {
                extractSelector(currentSelector, rules2, prop, propValue);
              }
            } else {
              if (propValue !== void 0) {
                if (prop === "margin" || prop === "padding") {
                  expandQuads(currentRules, prop, propValue);
                } else {
                  currentRules[prop] = propValue;
                }
              }
            }
          }
        }
      }
    }
    return rules2;
  }
  function expandQuads(currentRules, name, value) {
    var parts = typeof value === "string" ? tokenizeWithParentheses(value) : [value];
    if (parts.length === 0) {
      parts.push(value);
    }
    if (parts[parts.length - 1] === "!important") {
      parts = parts.slice(0, -1).map(function(p2) {
        return p2 + " !important";
      });
    }
    currentRules[name + "Top"] = parts[0];
    currentRules[name + "Right"] = parts[1] || parts[0];
    currentRules[name + "Bottom"] = parts[2] || parts[0];
    currentRules[name + "Left"] = parts[3] || parts[1] || parts[0];
  }
  function getKeyForRules(options, rules2) {
    var serialized = [options.rtl ? "rtl" : "ltr"];
    var hasProps = false;
    for (var _i = 0, _a6 = rules2.__order; _i < _a6.length; _i++) {
      var selector = _a6[_i];
      serialized.push(selector);
      var rulesForSelector = rules2[selector];
      for (var propName in rulesForSelector) {
        if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== void 0) {
          hasProps = true;
          serialized.push(propName, rulesForSelector[propName]);
        }
      }
    }
    return hasProps ? serialized.join("") : void 0;
  }
  function repeatString(target, count) {
    if (count <= 0) {
      return "";
    }
    if (count === 1) {
      return target;
    }
    return target + repeatString(target, count - 1);
  }
  function serializeRuleEntries(options, ruleEntries) {
    if (!ruleEntries) {
      return "";
    }
    var allEntries = [];
    for (var entry in ruleEntries) {
      if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== void 0) {
        allEntries.push(entry, ruleEntries[entry]);
      }
    }
    for (var i2 = 0; i2 < allEntries.length; i2 += 2) {
      kebabRules(allEntries, i2);
      provideUnits(allEntries, i2);
      rtlifyRules(options, allEntries, i2);
      prefixRules(allEntries, i2);
    }
    for (var i2 = 1; i2 < allEntries.length; i2 += 4) {
      allEntries.splice(i2, 1, ":", allEntries[i2], ";");
    }
    return allEntries.join("");
  }
  function styleToRegistration(options) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    var rules2 = extractRules(args);
    var key = getKeyForRules(options, rules2);
    if (key) {
      var stylesheet3 = Stylesheet.getInstance();
      var registration = {
        className: stylesheet3.classNameFromKey(key),
        key,
        args
      };
      if (!registration.className) {
        registration.className = stylesheet3.getClassName(getDisplayName2(rules2));
        var rulesToInsert = [];
        for (var _a6 = 0, _b = rules2.__order; _a6 < _b.length; _a6++) {
          var selector = _b[_a6];
          rulesToInsert.push(selector, serializeRuleEntries(options, rules2[selector]));
        }
        registration.rulesToInsert = rulesToInsert;
      }
      return registration;
    }
    return void 0;
  }
  function applyRegistration(registration, specificityMultiplier) {
    if (specificityMultiplier === void 0) {
      specificityMultiplier = 1;
    }
    var stylesheet3 = Stylesheet.getInstance();
    var className = registration.className, key = registration.key, args = registration.args, rulesToInsert = registration.rulesToInsert;
    if (rulesToInsert) {
      for (var i2 = 0; i2 < rulesToInsert.length; i2 += 2) {
        var rules2 = rulesToInsert[i2 + 1];
        if (rules2) {
          var selector = rulesToInsert[i2];
          selector = selector.replace(/&/g, repeatString("." + registration.className, specificityMultiplier));
          var processedRule = selector + "{" + rules2 + "}" + (selector.indexOf("@") === 0 ? "}" : "");
          stylesheet3.insertRule(processedRule);
        }
      }
      stylesheet3.cacheClassName(className, key, args, rulesToInsert);
    }
  }
  function styleToClassName(options) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    var registration = styleToRegistration.apply(void 0, __spreadArray([options], args));
    if (registration) {
      applyRegistration(registration, options.specificityMultiplier);
      return registration.className;
    }
    return "";
  }

  // node_modules/@fluentui/merge-styles/lib/mergeStyles.js
  function mergeStyles() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return mergeCss(args, getStyleOptions());
  }
  function mergeCss(args, options) {
    var styleArgs = args instanceof Array ? args : [args];
    var _a6 = extractStyleParts(styleArgs), classes = _a6.classes, objects = _a6.objects;
    if (objects.length) {
      classes.push(styleToClassName(options || {}, objects));
    }
    return classes.join(" ");
  }

  // node_modules/@fluentui/merge-styles/lib/concatStyleSets.js
  function concatStyleSets() {
    var styleSets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      styleSets[_i] = arguments[_i];
    }
    if (styleSets && styleSets.length === 1 && styleSets[0] && !styleSets[0].subComponentStyles) {
      return styleSets[0];
    }
    var mergedSet = {};
    var workingSubcomponentStyles = {};
    for (var _a6 = 0, styleSets_1 = styleSets; _a6 < styleSets_1.length; _a6++) {
      var currentSet = styleSets_1[_a6];
      if (currentSet) {
        for (var prop in currentSet) {
          if (currentSet.hasOwnProperty(prop)) {
            if (prop === "subComponentStyles" && currentSet.subComponentStyles !== void 0) {
              var currentComponentStyles = currentSet.subComponentStyles;
              for (var subCompProp in currentComponentStyles) {
                if (currentComponentStyles.hasOwnProperty(subCompProp)) {
                  if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {
                    workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);
                  } else {
                    workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];
                  }
                }
              }
              continue;
            }
            var mergedValue = mergedSet[prop];
            var currentValue = currentSet[prop];
            if (mergedValue === void 0) {
              mergedSet[prop] = currentValue;
            } else {
              mergedSet[prop] = __spreadArray(__spreadArray([], Array.isArray(mergedValue) ? mergedValue : [mergedValue]), Array.isArray(currentValue) ? currentValue : [currentValue]);
            }
          }
        }
      }
    }
    if (Object.keys(workingSubcomponentStyles).length > 0) {
      mergedSet.subComponentStyles = {};
      var mergedSubStyles = mergedSet.subComponentStyles;
      var _loop_1 = function(subCompProp2) {
        if (workingSubcomponentStyles.hasOwnProperty(subCompProp2)) {
          var workingSet_1 = workingSubcomponentStyles[subCompProp2];
          mergedSubStyles[subCompProp2] = function(styleProps) {
            return concatStyleSets.apply(void 0, workingSet_1.map(function(styleFunctionOrObject) {
              return typeof styleFunctionOrObject === "function" ? styleFunctionOrObject(styleProps) : styleFunctionOrObject;
            }));
          };
        }
      };
      for (var subCompProp in workingSubcomponentStyles) {
        _loop_1(subCompProp);
      }
    }
    return mergedSet;
  }

  // node_modules/@fluentui/merge-styles/lib/mergeStyleSets.js
  function mergeStyleSets() {
    var styleSets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      styleSets[_i] = arguments[_i];
    }
    return mergeCssSets(styleSets, getStyleOptions());
  }
  function mergeCssSets(styleSets, options) {
    var classNameSet = { subComponentStyles: {} };
    var styleSet = styleSets[0];
    if (!styleSet && styleSets.length <= 1) {
      return { subComponentStyles: {} };
    }
    var concatenatedStyleSet = concatStyleSets.apply(void 0, styleSets);
    var registrations = [];
    for (var styleSetArea in concatenatedStyleSet) {
      if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {
        if (styleSetArea === "subComponentStyles") {
          classNameSet.subComponentStyles = concatenatedStyleSet.subComponentStyles || {};
          continue;
        }
        var styles2 = concatenatedStyleSet[styleSetArea];
        var _a6 = extractStyleParts(styles2), classes = _a6.classes, objects = _a6.objects;
        if (objects === null || objects === void 0 ? void 0 : objects.length) {
          var registration = styleToRegistration(options || {}, { displayName: styleSetArea }, objects);
          if (registration) {
            registrations.push(registration);
            classNameSet[styleSetArea] = classes.concat([registration.className]).join(" ");
          }
        } else {
          classNameSet[styleSetArea] = classes.join(" ");
        }
      }
    }
    for (var _i = 0, registrations_1 = registrations; _i < registrations_1.length; _i++) {
      var registration = registrations_1[_i];
      if (registration) {
        applyRegistration(registration, options === null || options === void 0 ? void 0 : options.specificityMultiplier);
      }
    }
    return classNameSet;
  }

  // node_modules/@fluentui/merge-styles/lib/concatStyleSetsWithProps.js
  function concatStyleSetsWithProps(styleProps) {
    var allStyles = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      allStyles[_i - 1] = arguments[_i];
    }
    var result = [];
    for (var _a6 = 0, allStyles_1 = allStyles; _a6 < allStyles_1.length; _a6++) {
      var styles2 = allStyles_1[_a6];
      if (styles2) {
        result.push(typeof styles2 === "function" ? styles2(styleProps) : styles2);
      }
    }
    if (result.length === 1) {
      return result[0];
    } else if (result.length) {
      return concatStyleSets.apply(void 0, result);
    }
    return {};
  }

  // node_modules/@fluentui/merge-styles/lib/fontFace.js
  function fontFace(font) {
    var stylesheet3 = Stylesheet.getInstance();
    var rule = serializeRuleEntries(getStyleOptions(), font);
    var className = stylesheet3.classNameFromKey(rule);
    if (className) {
      return;
    }
    var name = stylesheet3.getClassName();
    stylesheet3.insertRule("@font-face{" + rule + "}", true);
    stylesheet3.cacheClassName(name, rule, [], ["font-face", rule]);
  }

  // node_modules/@fluentui/merge-styles/lib/keyframes.js
  function keyframes(timeline) {
    var stylesheet3 = Stylesheet.getInstance();
    var rulesArray = [];
    for (var prop in timeline) {
      if (timeline.hasOwnProperty(prop)) {
        rulesArray.push(prop, "{", serializeRuleEntries(getStyleOptions(), timeline[prop]), "}");
      }
    }
    var rules2 = rulesArray.join("");
    var className = stylesheet3.classNameFromKey(rules2);
    if (className) {
      return className;
    }
    var name = stylesheet3.getClassName();
    stylesheet3.insertRule("@keyframes " + name + "{" + rules2 + "}", true);
    stylesheet3.cacheClassName(name, rules2, [], ["keyframes", rules2]);
    return name;
  }

  // node_modules/@fluentui/merge-styles/lib/version.js
  setVersion("@fluentui/merge-styles", "8.5.3");

  // node_modules/@fluentui/style-utilities/lib/utilities/buildClassMap.js
  function buildClassMap(styles2) {
    var classes = {};
    var _loop_1 = function(styleName2) {
      if (styles2.hasOwnProperty(styleName2)) {
        var className_1;
        Object.defineProperty(classes, styleName2, {
          get: function() {
            if (className_1 === void 0) {
              className_1 = mergeStyles(styles2[styleName2]).toString();
            }
            return className_1;
          },
          enumerable: true,
          configurable: true
        });
      }
    };
    for (var styleName in styles2) {
      _loop_1(styleName);
    }
    return classes;
  }

  // node_modules/@fluentui/style-utilities/node_modules/tslib/modules/index.js
  var import_tslib5 = __toESM(require_tslib2(), 1);
  var {
    __extends: __extends2,
    __assign: __assign2,
    __rest: __rest2,
    __decorate: __decorate2,
    __param: __param2,
    __metadata: __metadata2,
    __awaiter: __awaiter2,
    __generator: __generator2,
    __exportStar: __exportStar2,
    __createBinding: __createBinding2,
    __values: __values3,
    __read: __read3,
    __spread: __spread2,
    __spreadArrays: __spreadArrays2,
    __spreadArray: __spreadArray2,
    __await: __await2,
    __asyncGenerator: __asyncGenerator2,
    __asyncDelegator: __asyncDelegator2,
    __asyncValues: __asyncValues2,
    __makeTemplateObject: __makeTemplateObject2,
    __importStar: __importStar2,
    __importDefault: __importDefault2,
    __classPrivateFieldGet: __classPrivateFieldGet2,
    __classPrivateFieldSet: __classPrivateFieldSet2,
    __classPrivateFieldIn: __classPrivateFieldIn2
  } = import_tslib5.default;

  // node_modules/@fluentui/utilities/lib/dom/canUseDOM.js
  function canUseDOM() {
    return typeof window !== "undefined" && !!(window.document && window.document.createElement);
  }

  // node_modules/@fluentui/utilities/lib/dom/getWindow.js
  var _window = void 0;
  try {
    _window = window;
  } catch (e2) {
  }
  function getWindow(rootElement) {
    if (!canUseDOM() || typeof _window === "undefined") {
      return void 0;
    } else {
      var el = rootElement;
      return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;
    }
  }

  // node_modules/@fluentui/utilities/lib/Async.js
  var Async = function() {
    function Async2(parent, onError) {
      this._timeoutIds = null;
      this._immediateIds = null;
      this._intervalIds = null;
      this._animationFrameIds = null;
      this._isDisposed = false;
      this._parent = parent || null;
      this._onErrorHandler = onError;
      this._noop = function() {
      };
    }
    Async2.prototype.dispose = function() {
      var id;
      this._isDisposed = true;
      this._parent = null;
      if (this._timeoutIds) {
        for (id in this._timeoutIds) {
          if (this._timeoutIds.hasOwnProperty(id)) {
            this.clearTimeout(parseInt(id, 10));
          }
        }
        this._timeoutIds = null;
      }
      if (this._immediateIds) {
        for (id in this._immediateIds) {
          if (this._immediateIds.hasOwnProperty(id)) {
            this.clearImmediate(parseInt(id, 10));
          }
        }
        this._immediateIds = null;
      }
      if (this._intervalIds) {
        for (id in this._intervalIds) {
          if (this._intervalIds.hasOwnProperty(id)) {
            this.clearInterval(parseInt(id, 10));
          }
        }
        this._intervalIds = null;
      }
      if (this._animationFrameIds) {
        for (id in this._animationFrameIds) {
          if (this._animationFrameIds.hasOwnProperty(id)) {
            this.cancelAnimationFrame(parseInt(id, 10));
          }
        }
        this._animationFrameIds = null;
      }
    };
    Async2.prototype.setTimeout = function(callback, duration) {
      var _this = this;
      var timeoutId = 0;
      if (!this._isDisposed) {
        if (!this._timeoutIds) {
          this._timeoutIds = {};
        }
        timeoutId = setTimeout(function() {
          try {
            if (_this._timeoutIds) {
              delete _this._timeoutIds[timeoutId];
            }
            callback.apply(_this._parent);
          } catch (e2) {
            _this._logError(e2);
          }
        }, duration);
        this._timeoutIds[timeoutId] = true;
      }
      return timeoutId;
    };
    Async2.prototype.clearTimeout = function(id) {
      if (this._timeoutIds && this._timeoutIds[id]) {
        clearTimeout(id);
        delete this._timeoutIds[id];
      }
    };
    Async2.prototype.setImmediate = function(callback, targetElement) {
      var _this = this;
      var immediateId = 0;
      var win = getWindow(targetElement);
      if (!this._isDisposed) {
        if (!this._immediateIds) {
          this._immediateIds = {};
        }
        var setImmediateCallback = function() {
          try {
            if (_this._immediateIds) {
              delete _this._immediateIds[immediateId];
            }
            callback.apply(_this._parent);
          } catch (e2) {
            _this._logError(e2);
          }
        };
        immediateId = win.setTimeout(setImmediateCallback, 0);
        this._immediateIds[immediateId] = true;
      }
      return immediateId;
    };
    Async2.prototype.clearImmediate = function(id, targetElement) {
      var win = getWindow(targetElement);
      if (this._immediateIds && this._immediateIds[id]) {
        win.clearTimeout(id);
        delete this._immediateIds[id];
      }
    };
    Async2.prototype.setInterval = function(callback, duration) {
      var _this = this;
      var intervalId = 0;
      if (!this._isDisposed) {
        if (!this._intervalIds) {
          this._intervalIds = {};
        }
        intervalId = setInterval(function() {
          try {
            callback.apply(_this._parent);
          } catch (e2) {
            _this._logError(e2);
          }
        }, duration);
        this._intervalIds[intervalId] = true;
      }
      return intervalId;
    };
    Async2.prototype.clearInterval = function(id) {
      if (this._intervalIds && this._intervalIds[id]) {
        clearInterval(id);
        delete this._intervalIds[id];
      }
    };
    Async2.prototype.throttle = function(func, wait, options) {
      var _this = this;
      if (this._isDisposed) {
        return this._noop;
      }
      var waitMS = wait || 0;
      var leading = true;
      var trailing = true;
      var lastExecuteTime = 0;
      var lastResult;
      var lastArgs;
      var timeoutId = null;
      if (options && typeof options.leading === "boolean") {
        leading = options.leading;
      }
      if (options && typeof options.trailing === "boolean") {
        trailing = options.trailing;
      }
      var callback = function(userCall) {
        var now = Date.now();
        var delta = now - lastExecuteTime;
        var waitLength = leading ? waitMS - delta : waitMS;
        if (delta >= waitMS && (!userCall || leading)) {
          lastExecuteTime = now;
          if (timeoutId) {
            _this.clearTimeout(timeoutId);
            timeoutId = null;
          }
          lastResult = func.apply(_this._parent, lastArgs);
        } else if (timeoutId === null && trailing) {
          timeoutId = _this.setTimeout(callback, waitLength);
        }
        return lastResult;
      };
      var resultFunction = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        lastArgs = args;
        return callback(true);
      };
      return resultFunction;
    };
    Async2.prototype.debounce = function(func, wait, options) {
      var _this = this;
      if (this._isDisposed) {
        var noOpFunction = function() {
        };
        noOpFunction.cancel = function() {
          return;
        };
        noOpFunction.flush = function() {
          return null;
        };
        noOpFunction.pending = function() {
          return false;
        };
        return noOpFunction;
      }
      var waitMS = wait || 0;
      var leading = false;
      var trailing = true;
      var maxWait = null;
      var lastCallTime = 0;
      var lastExecuteTime = Date.now();
      var lastResult;
      var lastArgs;
      var timeoutId = null;
      if (options && typeof options.leading === "boolean") {
        leading = options.leading;
      }
      if (options && typeof options.trailing === "boolean") {
        trailing = options.trailing;
      }
      if (options && typeof options.maxWait === "number" && !isNaN(options.maxWait)) {
        maxWait = options.maxWait;
      }
      var markExecuted = function(time) {
        if (timeoutId) {
          _this.clearTimeout(timeoutId);
          timeoutId = null;
        }
        lastExecuteTime = time;
      };
      var invokeFunction = function(time) {
        markExecuted(time);
        lastResult = func.apply(_this._parent, lastArgs);
      };
      var callback = function(userCall) {
        var now = Date.now();
        var executeImmediately = false;
        if (userCall) {
          if (leading && now - lastCallTime >= waitMS) {
            executeImmediately = true;
          }
          lastCallTime = now;
        }
        var delta = now - lastCallTime;
        var waitLength = waitMS - delta;
        var maxWaitDelta = now - lastExecuteTime;
        var maxWaitExpired = false;
        if (maxWait !== null) {
          if (maxWaitDelta >= maxWait && timeoutId) {
            maxWaitExpired = true;
          } else {
            waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
          }
        }
        if (delta >= waitMS || maxWaitExpired || executeImmediately) {
          invokeFunction(now);
        } else if ((timeoutId === null || !userCall) && trailing) {
          timeoutId = _this.setTimeout(callback, waitLength);
        }
        return lastResult;
      };
      var pending = function() {
        return !!timeoutId;
      };
      var cancel = function() {
        if (pending()) {
          markExecuted(Date.now());
        }
      };
      var flush = function() {
        if (pending()) {
          invokeFunction(Date.now());
        }
        return lastResult;
      };
      var resultFunction = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        lastArgs = args;
        return callback(true);
      };
      resultFunction.cancel = cancel;
      resultFunction.flush = flush;
      resultFunction.pending = pending;
      return resultFunction;
    };
    Async2.prototype.requestAnimationFrame = function(callback, targetElement) {
      var _this = this;
      var animationFrameId = 0;
      var win = getWindow(targetElement);
      if (!this._isDisposed) {
        if (!this._animationFrameIds) {
          this._animationFrameIds = {};
        }
        var animationFrameCallback = function() {
          try {
            if (_this._animationFrameIds) {
              delete _this._animationFrameIds[animationFrameId];
            }
            callback.apply(_this._parent);
          } catch (e2) {
            _this._logError(e2);
          }
        };
        animationFrameId = win.requestAnimationFrame ? win.requestAnimationFrame(animationFrameCallback) : win.setTimeout(animationFrameCallback, 0);
        this._animationFrameIds[animationFrameId] = true;
      }
      return animationFrameId;
    };
    Async2.prototype.cancelAnimationFrame = function(id, targetElement) {
      var win = getWindow(targetElement);
      if (this._animationFrameIds && this._animationFrameIds[id]) {
        win.cancelAnimationFrame ? win.cancelAnimationFrame(id) : win.clearTimeout(id);
        delete this._animationFrameIds[id];
      }
    };
    Async2.prototype._logError = function(e2) {
      if (this._onErrorHandler) {
        this._onErrorHandler(e2);
      }
    };
    return Async2;
  }();

  // node_modules/@fluentui/utilities/lib/object.js
  function shallowCompare(a2, b2) {
    for (var propName in a2) {
      if (a2.hasOwnProperty(propName)) {
        if (!b2.hasOwnProperty(propName) || b2[propName] !== a2[propName]) {
          return false;
        }
      }
    }
    for (var propName in b2) {
      if (b2.hasOwnProperty(propName)) {
        if (!a2.hasOwnProperty(propName)) {
          return false;
        }
      }
    }
    return true;
  }
  function assign2(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    return filteredAssign.apply(this, [null, target].concat(args));
  }
  function filteredAssign(isAllowed, target) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    target = target || {};
    for (var _a6 = 0, args_1 = args; _a6 < args_1.length; _a6++) {
      var sourceObject = args_1[_a6];
      if (sourceObject) {
        for (var propName in sourceObject) {
          if (sourceObject.hasOwnProperty(propName) && (!isAllowed || isAllowed(propName))) {
            target[propName] = sourceObject[propName];
          }
        }
      }
    }
    return target;
  }

  // node_modules/@fluentui/utilities/lib/EventGroup.js
  var EventGroup = function() {
    function EventGroup2(parent) {
      this._id = EventGroup2._uniqueId++;
      this._parent = parent;
      this._eventRecords = [];
    }
    EventGroup2.raise = function(target, eventName, eventArgs, bubbleEvent) {
      var retVal2;
      if (EventGroup2._isElement(target)) {
        if (typeof document !== "undefined" && document.createEvent) {
          var ev = document.createEvent("HTMLEvents");
          ev.initEvent(eventName, bubbleEvent || false, true);
          assign2(ev, eventArgs);
          retVal2 = target.dispatchEvent(ev);
        } else if (typeof document !== "undefined" && document.createEventObject) {
          var evObj = document.createEventObject(eventArgs);
          target.fireEvent("on" + eventName, evObj);
        }
      } else {
        while (target && retVal2 !== false) {
          var events = target.__events__;
          var eventRecords = events ? events[eventName] : null;
          if (eventRecords) {
            for (var id in eventRecords) {
              if (eventRecords.hasOwnProperty(id)) {
                var eventRecordList = eventRecords[id];
                for (var listIndex = 0; retVal2 !== false && listIndex < eventRecordList.length; listIndex++) {
                  var record = eventRecordList[listIndex];
                  if (record.objectCallback) {
                    retVal2 = record.objectCallback.call(record.parent, eventArgs);
                  }
                }
              }
            }
          }
          target = bubbleEvent ? target.parent : null;
        }
      }
      return retVal2;
    };
    EventGroup2.isObserved = function(target, eventName) {
      var events = target && target.__events__;
      return !!events && !!events[eventName];
    };
    EventGroup2.isDeclared = function(target, eventName) {
      var declaredEvents = target && target.__declaredEvents;
      return !!declaredEvents && !!declaredEvents[eventName];
    };
    EventGroup2.stopPropagation = function(event) {
      if (event.stopPropagation) {
        event.stopPropagation();
      } else {
        event.cancelBubble = true;
      }
    };
    EventGroup2._isElement = function(target) {
      return !!target && (!!target.addEventListener || typeof HTMLElement !== "undefined" && target instanceof HTMLElement);
    };
    EventGroup2.prototype.dispose = function() {
      if (!this._isDisposed) {
        this._isDisposed = true;
        this.off();
        this._parent = null;
      }
    };
    EventGroup2.prototype.onAll = function(target, events, useCapture) {
      for (var eventName in events) {
        if (events.hasOwnProperty(eventName)) {
          this.on(target, eventName, events[eventName], useCapture);
        }
      }
    };
    EventGroup2.prototype.on = function(target, eventName, callback, options) {
      var _this = this;
      if (eventName.indexOf(",") > -1) {
        var events = eventName.split(/[ ,]+/);
        for (var i2 = 0; i2 < events.length; i2++) {
          this.on(target, events[i2], callback, options);
        }
      } else {
        var parent_1 = this._parent;
        var eventRecord = {
          target,
          eventName,
          parent: parent_1,
          callback,
          options
        };
        var events = target.__events__ = target.__events__ || {};
        events[eventName] = events[eventName] || {
          count: 0
        };
        events[eventName][this._id] = events[eventName][this._id] || [];
        events[eventName][this._id].push(eventRecord);
        events[eventName].count++;
        if (EventGroup2._isElement(target)) {
          var processElementEvent = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            if (_this._isDisposed) {
              return;
            }
            var result;
            try {
              result = callback.apply(parent_1, args);
              if (result === false && args[0]) {
                var e2 = args[0];
                if (e2.preventDefault) {
                  e2.preventDefault();
                }
                if (e2.stopPropagation) {
                  e2.stopPropagation();
                }
                e2.cancelBubble = true;
              }
            } catch (e3) {
            }
            return result;
          };
          eventRecord.elementCallback = processElementEvent;
          if (target.addEventListener) {
            target.addEventListener(eventName, processElementEvent, options);
          } else if (target.attachEvent) {
            target.attachEvent("on" + eventName, processElementEvent);
          }
        } else {
          var processObjectEvent = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            if (_this._isDisposed) {
              return;
            }
            return callback.apply(parent_1, args);
          };
          eventRecord.objectCallback = processObjectEvent;
        }
        this._eventRecords.push(eventRecord);
      }
    };
    EventGroup2.prototype.off = function(target, eventName, callback, options) {
      for (var i2 = 0; i2 < this._eventRecords.length; i2++) {
        var eventRecord = this._eventRecords[i2];
        if ((!target || target === eventRecord.target) && (!eventName || eventName === eventRecord.eventName) && (!callback || callback === eventRecord.callback) && (typeof options !== "boolean" || options === eventRecord.options)) {
          var events = eventRecord.target.__events__;
          var targetArrayLookup = events[eventRecord.eventName];
          var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;
          if (targetArray) {
            if (targetArray.length === 1 || !callback) {
              targetArrayLookup.count -= targetArray.length;
              delete events[eventRecord.eventName][this._id];
            } else {
              targetArrayLookup.count--;
              targetArray.splice(targetArray.indexOf(eventRecord), 1);
            }
            if (!targetArrayLookup.count) {
              delete events[eventRecord.eventName];
            }
          }
          if (eventRecord.elementCallback) {
            if (eventRecord.target.removeEventListener) {
              eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.options);
            } else if (eventRecord.target.detachEvent) {
              eventRecord.target.detachEvent("on" + eventRecord.eventName, eventRecord.elementCallback);
            }
          }
          this._eventRecords.splice(i2--, 1);
        }
      }
    };
    EventGroup2.prototype.raise = function(eventName, eventArgs, bubbleEvent) {
      return EventGroup2.raise(this._parent, eventName, eventArgs, bubbleEvent);
    };
    EventGroup2.prototype.declare = function(event) {
      var declaredEvents = this._parent.__declaredEvents = this._parent.__declaredEvents || {};
      if (typeof event === "string") {
        declaredEvents[event] = true;
      } else {
        for (var i2 = 0; i2 < event.length; i2++) {
          declaredEvents[event[i2]] = true;
        }
      }
    };
    EventGroup2._uniqueId = 0;
    return EventGroup2;
  }();

  // node_modules/@fluentui/utilities/lib/dom/getDocument.js
  function getDocument(rootElement) {
    if (!canUseDOM() || typeof document === "undefined") {
      return void 0;
    } else {
      var el = rootElement;
      return el && el.ownerDocument ? el.ownerDocument : document;
    }
  }

  // node_modules/@fluentui/utilities/lib/scroll.js
  var _scrollbarWidth;
  var DisabledScrollClassName = mergeStyles({
    overflow: "hidden !important"
  });
  var DATA_IS_SCROLLABLE_ATTRIBUTE = "data-is-scrollable";
  function getScrollbarWidth() {
    if (_scrollbarWidth === void 0) {
      var scrollDiv = document.createElement("div");
      scrollDiv.style.setProperty("width", "100px");
      scrollDiv.style.setProperty("height", "100px");
      scrollDiv.style.setProperty("overflow", "scroll");
      scrollDiv.style.setProperty("position", "absolute");
      scrollDiv.style.setProperty("top", "-9999px");
      document.body.appendChild(scrollDiv);
      _scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
    return _scrollbarWidth;
  }
  function findScrollableParent(startingElement) {
    var el = startingElement;
    var doc = getDocument(startingElement);
    while (el && el !== doc.body) {
      if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) === "true") {
        return el;
      }
      el = el.parentElement;
    }
    el = startingElement;
    while (el && el !== doc.body) {
      if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) !== "false") {
        var computedStyles = getComputedStyle(el);
        var overflowY = computedStyles ? computedStyles.getPropertyValue("overflow-y") : "";
        if (overflowY && (overflowY === "scroll" || overflowY === "auto")) {
          return el;
        }
      }
      el = el.parentElement;
    }
    if (!el || el === doc.body) {
      el = getWindow(startingElement);
    }
    return el;
  }

  // node_modules/@fluentui/utilities/node_modules/tslib/modules/index.js
  var import_tslib6 = __toESM(require_tslib3(), 1);
  var {
    __extends: __extends3,
    __assign: __assign3,
    __rest: __rest3,
    __decorate: __decorate3,
    __param: __param3,
    __metadata: __metadata3,
    __awaiter: __awaiter3,
    __generator: __generator3,
    __exportStar: __exportStar3,
    __createBinding: __createBinding3,
    __values: __values4,
    __read: __read4,
    __spread: __spread3,
    __spreadArrays: __spreadArrays3,
    __spreadArray: __spreadArray3,
    __await: __await3,
    __asyncGenerator: __asyncGenerator3,
    __asyncDelegator: __asyncDelegator3,
    __asyncValues: __asyncValues3,
    __makeTemplateObject: __makeTemplateObject3,
    __importStar: __importStar3,
    __importDefault: __importDefault3,
    __classPrivateFieldGet: __classPrivateFieldGet3,
    __classPrivateFieldSet: __classPrivateFieldSet3,
    __classPrivateFieldIn: __classPrivateFieldIn3
  } = import_tslib6.default;

  // node_modules/@fluentui/utilities/lib/BaseComponent.js
  var React2 = __toESM(require_react());

  // node_modules/@fluentui/utilities/lib/warn/warn.js
  var _warningCallback = void 0;
  function warn(message) {
    if (_warningCallback && true) {
      _warningCallback(message);
    } else if (console && console.warn) {
      console.warn(message);
    }
  }

  // node_modules/@fluentui/utilities/lib/warn/warnConditionallyRequiredProps.js
  function warnConditionallyRequiredProps(componentName, props, requiredProps, conditionalPropName, condition) {
    if (condition === true && true) {
      for (var _i = 0, requiredProps_1 = requiredProps; _i < requiredProps_1.length; _i++) {
        var requiredPropName = requiredProps_1[_i];
        if (!(requiredPropName in props)) {
          warn(componentName + " property '" + requiredPropName + "' is required when '" + conditionalPropName + "' is used.'");
        }
      }
    }
  }

  // node_modules/@fluentui/utilities/lib/warn/warnMutuallyExclusive.js
  function warnMutuallyExclusive(componentName, props, exclusiveMap) {
    if (true) {
      for (var propName in exclusiveMap) {
        if (props && props[propName] !== void 0) {
          var propInExclusiveMapValue = exclusiveMap[propName];
          if (propInExclusiveMapValue && props[propInExclusiveMapValue] !== void 0) {
            warn(componentName + " property '" + propName + "' is mutually exclusive with '" + exclusiveMap[propName] + "'. Use one or the other.");
          }
        }
      }
    }
  }

  // node_modules/@fluentui/utilities/lib/warn/warnDeprecations.js
  function warnDeprecations(componentName, props, deprecationMap) {
    if (true) {
      for (var propName in deprecationMap) {
        if (props && propName in props) {
          var deprecationMessage = componentName + " property '" + propName + "' was used but has been deprecated.";
          var replacementPropName = deprecationMap[propName];
          if (replacementPropName) {
            deprecationMessage += " Use '" + replacementPropName + "' instead.";
          }
          warn(deprecationMessage);
        }
      }
    }
  }

  // node_modules/@fluentui/utilities/lib/BaseComponent.js
  var BaseComponent = function(_super) {
    __extends3(BaseComponent2, _super);
    function BaseComponent2(props, context) {
      var _this = _super.call(this, props, context) || this;
      _makeAllSafe(_this, BaseComponent2.prototype, [
        "componentDidMount",
        "shouldComponentUpdate",
        "getSnapshotBeforeUpdate",
        "render",
        "componentDidUpdate",
        "componentWillUnmount"
      ]);
      return _this;
    }
    BaseComponent2.prototype.componentDidUpdate = function(prevProps, prevState) {
      this._updateComponentRef(prevProps, this.props);
    };
    BaseComponent2.prototype.componentDidMount = function() {
      this._setComponentRef(this.props.componentRef, this);
    };
    BaseComponent2.prototype.componentWillUnmount = function() {
      this._setComponentRef(this.props.componentRef, null);
      if (this.__disposables) {
        for (var i2 = 0, len = this._disposables.length; i2 < len; i2++) {
          var disposable = this.__disposables[i2];
          if (disposable.dispose) {
            disposable.dispose();
          }
        }
        this.__disposables = null;
      }
    };
    Object.defineProperty(BaseComponent2.prototype, "className", {
      get: function() {
        if (!this.__className) {
          var funcNameRegex = /function (.{1,})\(/;
          var results = funcNameRegex.exec(this.constructor.toString());
          this.__className = results && results.length > 1 ? results[1] : "";
        }
        return this.__className;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseComponent2.prototype, "_disposables", {
      get: function() {
        if (!this.__disposables) {
          this.__disposables = [];
        }
        return this.__disposables;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseComponent2.prototype, "_async", {
      get: function() {
        if (!this.__async) {
          this.__async = new Async(this);
          this._disposables.push(this.__async);
        }
        return this.__async;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseComponent2.prototype, "_events", {
      get: function() {
        if (!this.__events) {
          this.__events = new EventGroup(this);
          this._disposables.push(this.__events);
        }
        return this.__events;
      },
      enumerable: false,
      configurable: true
    });
    BaseComponent2.prototype._resolveRef = function(refName) {
      var _this = this;
      if (!this.__resolves) {
        this.__resolves = {};
      }
      if (!this.__resolves[refName]) {
        this.__resolves[refName] = function(ref) {
          return _this[refName] = ref;
        };
      }
      return this.__resolves[refName];
    };
    BaseComponent2.prototype._updateComponentRef = function(currentProps, newProps) {
      if (newProps === void 0) {
        newProps = {};
      }
      if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {
        this._setComponentRef(currentProps.componentRef, null);
        this._setComponentRef(newProps.componentRef, this);
      }
    };
    BaseComponent2.prototype._warnDeprecations = function(deprecationMap) {
      warnDeprecations(this.className, this.props, deprecationMap);
    };
    BaseComponent2.prototype._warnMutuallyExclusive = function(mutuallyExclusiveMap) {
      warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);
    };
    BaseComponent2.prototype._warnConditionallyRequiredProps = function(requiredProps, conditionalPropName, condition) {
      warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);
    };
    BaseComponent2.prototype._setComponentRef = function(ref, value) {
      if (!this._skipComponentRefResolution && ref) {
        if (typeof ref === "function") {
          ref(value);
        }
        if (typeof ref === "object") {
          ref.current = value;
        }
      }
    };
    return BaseComponent2;
  }(React2.Component);
  function _makeAllSafe(obj, prototype, methodNames) {
    for (var i2 = 0, len = methodNames.length; i2 < len; i2++) {
      _makeSafe(obj, prototype, methodNames[i2]);
    }
  }
  function _makeSafe(obj, prototype, methodName) {
    var classMethod = obj[methodName];
    var prototypeMethod = prototype[methodName];
    if (classMethod || prototypeMethod) {
      obj[methodName] = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var retVal2;
        if (prototypeMethod) {
          retVal2 = prototypeMethod.apply(this, args);
        }
        if (classMethod !== prototypeMethod) {
          retVal2 = classMethod.apply(this, args);
        }
        return retVal2;
      };
    }
  }
  function nullRender() {
    return null;
  }

  // node_modules/@fluentui/utilities/lib/GlobalSettings.js
  var GLOBAL_SETTINGS_PROP_NAME = "__globalSettings__";
  var CALLBACK_STATE_PROP_NAME = "__callbacks__";
  var _counter = 0;
  var GlobalSettings = function() {
    function GlobalSettings2() {
    }
    GlobalSettings2.getValue = function(key, defaultValue) {
      var globalSettings = _getGlobalSettings();
      if (globalSettings[key] === void 0) {
        globalSettings[key] = typeof defaultValue === "function" ? defaultValue() : defaultValue;
      }
      return globalSettings[key];
    };
    GlobalSettings2.setValue = function(key, value) {
      var globalSettings = _getGlobalSettings();
      var callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];
      var oldValue = globalSettings[key];
      if (value !== oldValue) {
        globalSettings[key] = value;
        var changeDescription = {
          oldValue,
          value,
          key
        };
        for (var id in callbacks) {
          if (callbacks.hasOwnProperty(id)) {
            callbacks[id](changeDescription);
          }
        }
      }
      return value;
    };
    GlobalSettings2.addChangeListener = function(cb) {
      var id = cb.__id__;
      var callbacks = _getCallbacks();
      if (!id) {
        id = cb.__id__ = String(_counter++);
      }
      callbacks[id] = cb;
    };
    GlobalSettings2.removeChangeListener = function(cb) {
      var callbacks = _getCallbacks();
      delete callbacks[cb.__id__];
    };
    return GlobalSettings2;
  }();
  function _getGlobalSettings() {
    var _a6;
    var win = getWindow();
    var globalObj = win || {};
    if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {
      globalObj[GLOBAL_SETTINGS_PROP_NAME] = (_a6 = {}, _a6[CALLBACK_STATE_PROP_NAME] = {}, _a6);
    }
    return globalObj[GLOBAL_SETTINGS_PROP_NAME];
  }
  function _getCallbacks() {
    var globalSettings = _getGlobalSettings();
    return globalSettings[CALLBACK_STATE_PROP_NAME];
  }

  // node_modules/@fluentui/utilities/lib/KeyCodes.js
  var KeyCodes = {
    backspace: 8,
    tab: 9,
    enter: 13,
    shift: 16,
    ctrl: 17,
    alt: 18,
    pauseBreak: 19,
    capslock: 20,
    escape: 27,
    space: 32,
    pageUp: 33,
    pageDown: 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    insert: 45,
    del: 46,
    zero: 48,
    one: 49,
    two: 50,
    three: 51,
    four: 52,
    five: 53,
    six: 54,
    seven: 55,
    eight: 56,
    nine: 57,
    colon: 58,
    a: 65,
    b: 66,
    c: 67,
    d: 68,
    e: 69,
    f: 70,
    g: 71,
    h: 72,
    i: 73,
    j: 74,
    k: 75,
    l: 76,
    m: 77,
    n: 78,
    o: 79,
    p: 80,
    q: 81,
    r: 82,
    s: 83,
    t: 84,
    u: 85,
    v: 86,
    w: 87,
    x: 88,
    y: 89,
    z: 90,
    leftWindow: 91,
    rightWindow: 92,
    select: 93,
    zero_numpad: 96,
    one_numpad: 97,
    two_numpad: 98,
    three_numpad: 99,
    four_numpad: 100,
    five_numpad: 101,
    six_numpad: 102,
    seven_numpad: 103,
    eight_numpad: 104,
    nine_numpad: 105,
    multiply: 106,
    add: 107,
    subtract: 109,
    decimalPoint: 110,
    divide: 111,
    f1: 112,
    f2: 113,
    f3: 114,
    f4: 115,
    f5: 116,
    f6: 117,
    f7: 118,
    f8: 119,
    f9: 120,
    f10: 121,
    f11: 122,
    f12: 123,
    numlock: 144,
    scrollLock: 145,
    semicolon: 186,
    equalSign: 187,
    comma: 188,
    dash: 189,
    period: 190,
    forwardSlash: 191,
    graveAccent: 192,
    openBracket: 219,
    backSlash: 220,
    closeBracket: 221,
    singleQuote: 222
  };

  // node_modules/@fluentui/utilities/lib/Rectangle.js
  var Rectangle = function() {
    function Rectangle2(left, right, top, bottom) {
      if (left === void 0) {
        left = 0;
      }
      if (right === void 0) {
        right = 0;
      }
      if (top === void 0) {
        top = 0;
      }
      if (bottom === void 0) {
        bottom = 0;
      }
      this.top = top;
      this.bottom = bottom;
      this.left = left;
      this.right = right;
    }
    Object.defineProperty(Rectangle2.prototype, "width", {
      get: function() {
        return this.right - this.left;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Rectangle2.prototype, "height", {
      get: function() {
        return this.bottom - this.top;
      },
      enumerable: false,
      configurable: true
    });
    Rectangle2.prototype.equals = function(rect) {
      return parseFloat(this.top.toFixed(4)) === parseFloat(rect.top.toFixed(4)) && parseFloat(this.bottom.toFixed(4)) === parseFloat(rect.bottom.toFixed(4)) && parseFloat(this.left.toFixed(4)) === parseFloat(rect.left.toFixed(4)) && parseFloat(this.right.toFixed(4)) === parseFloat(rect.right.toFixed(4));
    };
    return Rectangle2;
  }();

  // node_modules/@fluentui/utilities/lib/appendFunction.js
  function appendFunction(parent) {
    var functions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      functions[_i - 1] = arguments[_i];
    }
    if (functions.length < 2) {
      return functions[0];
    }
    return function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      functions.forEach(function(f2) {
        return f2 && f2.apply(parent, args);
      });
    };
  }

  // node_modules/@fluentui/utilities/lib/aria.js
  function mergeAriaAttributeValues() {
    var ariaAttributes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      ariaAttributes[_i] = arguments[_i];
    }
    var mergedAttribute = ariaAttributes.filter(function(arg) {
      return arg;
    }).join(" ").trim();
    return mergedAttribute === "" ? void 0 : mergedAttribute;
  }

  // node_modules/@fluentui/utilities/lib/array.js
  function addElementAtIndex(array2, index, itemToAdd) {
    var copy = array2.slice();
    copy.splice(index, 0, itemToAdd);
    return copy;
  }
  function arraysEqual(array1, array2) {
    if (array1.length !== array2.length) {
      return false;
    }
    for (var i2 = 0; i2 < array1.length; i2++) {
      if (array1[i2] !== array2[i2]) {
        return false;
      }
    }
    return true;
  }

  // node_modules/@fluentui/utilities/lib/sessionStorage.js
  function getItem(key) {
    var result = null;
    try {
      var win = getWindow();
      result = win ? win.sessionStorage.getItem(key) : null;
    } catch (e2) {
    }
    return result;
  }
  function setItem(key, data) {
    var _a6;
    try {
      (_a6 = getWindow()) === null || _a6 === void 0 ? void 0 : _a6.sessionStorage.setItem(key, data);
    } catch (e2) {
    }
  }

  // node_modules/@fluentui/utilities/lib/rtl.js
  var RTL_LOCAL_STORAGE_KEY = "isRTL";
  var _isRTL;
  function getRTL2(theme) {
    if (theme === void 0) {
      theme = {};
    }
    if (theme.rtl !== void 0) {
      return theme.rtl;
    }
    if (_isRTL === void 0) {
      var savedRTL = getItem(RTL_LOCAL_STORAGE_KEY);
      if (savedRTL !== null) {
        _isRTL = savedRTL === "1";
        setRTL2(_isRTL);
      }
      var doc = getDocument();
      if (_isRTL === void 0 && doc) {
        _isRTL = (doc.body && doc.body.getAttribute("dir") || doc.documentElement.getAttribute("dir")) === "rtl";
        setRTL(_isRTL);
      }
    }
    return !!_isRTL;
  }
  function setRTL2(isRTL, persistSetting) {
    if (persistSetting === void 0) {
      persistSetting = false;
    }
    var doc = getDocument();
    if (doc) {
      doc.documentElement.setAttribute("dir", isRTL ? "rtl" : "ltr");
    }
    if (persistSetting) {
      setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? "1" : "0");
    }
    _isRTL = isRTL;
    setRTL(_isRTL);
  }

  // node_modules/@fluentui/dom-utilities/lib/isVirtualElement.js
  function isVirtualElement(element) {
    return element && !!element._virtual;
  }

  // node_modules/@fluentui/dom-utilities/lib/getVirtualParent.js
  function getVirtualParent(child) {
    var parent;
    if (child && isVirtualElement(child)) {
      parent = child._virtual.parent;
    }
    return parent;
  }

  // node_modules/@fluentui/dom-utilities/lib/getParent.js
  function getParent(child, allowVirtualParents) {
    if (allowVirtualParents === void 0) {
      allowVirtualParents = true;
    }
    return child && (allowVirtualParents && getVirtualParent(child) || child.parentNode && child.parentNode);
  }

  // node_modules/@fluentui/dom-utilities/lib/elementContains.js
  function elementContains(parent, child, allowVirtualParents) {
    if (allowVirtualParents === void 0) {
      allowVirtualParents = true;
    }
    var isContained = false;
    if (parent && child) {
      if (allowVirtualParents) {
        if (parent === child) {
          isContained = true;
        } else {
          isContained = false;
          while (child) {
            var nextParent = getParent(child);
            if (nextParent === parent) {
              isContained = true;
              break;
            }
            child = nextParent;
          }
        }
      } else if (parent.contains) {
        isContained = parent.contains(child);
      }
    }
    return isContained;
  }

  // node_modules/@fluentui/dom-utilities/lib/findElementRecursive.js
  function findElementRecursive(element, matchFunction) {
    if (!element || element === document.body) {
      return null;
    }
    return matchFunction(element) ? element : findElementRecursive(getParent(element), matchFunction);
  }

  // node_modules/@fluentui/dom-utilities/lib/elementContainsAttribute.js
  function elementContainsAttribute(element, attribute) {
    var elementMatch = findElementRecursive(element, function(testElement) {
      return testElement.hasAttribute(attribute);
    });
    return elementMatch && elementMatch.getAttribute(attribute);
  }

  // node_modules/@fluentui/dom-utilities/lib/setPortalAttribute.js
  var DATA_PORTAL_ATTRIBUTE = "data-portal-element";
  function setPortalAttribute(element) {
    element.setAttribute(DATA_PORTAL_ATTRIBUTE, "true");
  }

  // node_modules/@fluentui/dom-utilities/lib/portalContainsElement.js
  function portalContainsElement(target, parent) {
    var elementMatch = findElementRecursive(target, function(testElement) {
      return parent === testElement || testElement.hasAttribute(DATA_PORTAL_ATTRIBUTE);
    });
    return elementMatch !== null && elementMatch.hasAttribute(DATA_PORTAL_ATTRIBUTE);
  }

  // node_modules/@fluentui/dom-utilities/lib/setVirtualParent.js
  function setVirtualParent(child, parent) {
    var virtualChild = child;
    var virtualParent = parent;
    if (!virtualChild._virtual) {
      virtualChild._virtual = {
        children: []
      };
    }
    var oldParent = virtualChild._virtual.parent;
    if (oldParent && oldParent !== parent) {
      var index = oldParent._virtual.children.indexOf(virtualChild);
      if (index > -1) {
        oldParent._virtual.children.splice(index, 1);
      }
    }
    virtualChild._virtual.parent = virtualParent || void 0;
    if (virtualParent) {
      if (!virtualParent._virtual) {
        virtualParent._virtual = {
          children: []
        };
      }
      virtualParent._virtual.children.push(virtualChild);
    }
  }

  // node_modules/@fluentui/utilities/lib/focus.js
  var IS_FOCUSABLE_ATTRIBUTE = "data-is-focusable";
  var IS_VISIBLE_ATTRIBUTE = "data-is-visible";
  var FOCUSZONE_ID_ATTRIBUTE = "data-focuszone-id";
  var FOCUSZONE_SUB_ATTRIBUTE = "data-is-sub-focuszone";
  function getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones) {
    return getNextElement(rootElement, currentElement, true, false, false, includeElementsInFocusZones);
  }
  function getLastFocusable(rootElement, currentElement, includeElementsInFocusZones) {
    return getPreviousElement(rootElement, currentElement, true, false, true, includeElementsInFocusZones);
  }
  function focusFirstChild(rootElement, bypassHiddenElements) {
    var element = getNextElement(rootElement, rootElement, true, false, false, true, void 0, void 0, bypassHiddenElements);
    if (element) {
      focusAsync(element);
      return true;
    }
    return false;
  }
  function getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren, includeElementsInFocusZones, allowFocusRoot, tabbable) {
    if (!currentElement || !allowFocusRoot && currentElement === rootElement) {
      return null;
    }
    var isCurrentElementVisible = isElementVisible(currentElement);
    if (traverseChildren && isCurrentElementVisible && (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {
      var childMatch = getPreviousElement(rootElement, currentElement.lastElementChild, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
      if (childMatch) {
        if (tabbable && isElementTabbable(childMatch, true) || !tabbable) {
          return childMatch;
        }
        var childMatchSiblingMatch = getPreviousElement(rootElement, childMatch.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
        if (childMatchSiblingMatch) {
          return childMatchSiblingMatch;
        }
        var childMatchParent = childMatch.parentElement;
        while (childMatchParent && childMatchParent !== currentElement) {
          var childMatchParentMatch = getPreviousElement(rootElement, childMatchParent.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
          if (childMatchParentMatch) {
            return childMatchParentMatch;
          }
          childMatchParent = childMatchParent.parentElement;
        }
      }
    }
    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {
      return currentElement;
    }
    var siblingMatch = getPreviousElement(rootElement, currentElement.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
    if (siblingMatch) {
      return siblingMatch;
    }
    if (!suppressParentTraversal) {
      return getPreviousElement(rootElement, currentElement.parentElement, true, false, false, includeElementsInFocusZones, allowFocusRoot, tabbable);
    }
    return null;
  }
  function getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements) {
    if (!currentElement || currentElement === rootElement && suppressChildTraversal && !allowFocusRoot) {
      return null;
    }
    var checkElementVisibility = bypassHiddenElements ? isElementVisibleAndNotHidden : isElementVisible;
    var isCurrentElementVisible = checkElementVisibility(currentElement);
    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {
      return currentElement;
    }
    if (!suppressChildTraversal && isCurrentElementVisible && (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {
      var childMatch = getNextElement(rootElement, currentElement.firstElementChild, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);
      if (childMatch) {
        return childMatch;
      }
    }
    if (currentElement === rootElement) {
      return null;
    }
    var siblingMatch = getNextElement(rootElement, currentElement.nextElementSibling, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);
    if (siblingMatch) {
      return siblingMatch;
    }
    if (!suppressParentTraversal) {
      return getNextElement(rootElement, currentElement.parentElement, false, false, true, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);
    }
    return null;
  }
  function isElementVisible(element) {
    if (!element || !element.getAttribute) {
      return false;
    }
    var visibilityAttribute = element.getAttribute(IS_VISIBLE_ATTRIBUTE);
    if (visibilityAttribute !== null && visibilityAttribute !== void 0) {
      return visibilityAttribute === "true";
    }
    return element.offsetHeight !== 0 || element.offsetParent !== null || element.isVisible === true;
  }
  function isElementVisibleAndNotHidden(element) {
    return !!element && isElementVisible(element) && !element.hidden && window.getComputedStyle(element).visibility !== "hidden";
  }
  function isElementTabbable(element, checkTabIndex) {
    if (!element || element.disabled) {
      return false;
    }
    var tabIndex = 0;
    var tabIndexAttributeValue = null;
    if (element && element.getAttribute) {
      tabIndexAttributeValue = element.getAttribute("tabIndex");
      if (tabIndexAttributeValue) {
        tabIndex = parseInt(tabIndexAttributeValue, 10);
      }
    }
    var isFocusableAttribute = element.getAttribute ? element.getAttribute(IS_FOCUSABLE_ATTRIBUTE) : null;
    var isTabIndexSet = tabIndexAttributeValue !== null && tabIndex >= 0;
    var result = !!element && isFocusableAttribute !== "false" && (element.tagName === "A" || element.tagName === "BUTTON" || element.tagName === "INPUT" || element.tagName === "TEXTAREA" || element.tagName === "SELECT" || isFocusableAttribute === "true" || isTabIndexSet);
    return checkTabIndex ? tabIndex !== -1 && result : result;
  }
  function isElementFocusZone(element) {
    return !!(element && element.getAttribute && !!element.getAttribute(FOCUSZONE_ID_ATTRIBUTE));
  }
  function isElementFocusSubZone(element) {
    return !!(element && element.getAttribute && element.getAttribute(FOCUSZONE_SUB_ATTRIBUTE) === "true");
  }
  function doesElementContainFocus(element) {
    var document2 = getDocument(element);
    var currentActiveElement = document2 && document2.activeElement;
    if (currentActiveElement && elementContains(element, currentActiveElement)) {
      return true;
    }
    return false;
  }
  function shouldWrapFocus(element, noWrapDataAttribute) {
    return elementContainsAttribute(element, noWrapDataAttribute) === "true" ? false : true;
  }
  var targetToFocusOnNextRepaint = void 0;
  function focusAsync(element) {
    if (element) {
      if (targetToFocusOnNextRepaint) {
        targetToFocusOnNextRepaint = element;
        return;
      }
      targetToFocusOnNextRepaint = element;
      var win = getWindow(element);
      if (win) {
        win.requestAnimationFrame(function() {
          targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus();
          targetToFocusOnNextRepaint = void 0;
        });
      }
    }
  }
  function getFocusableByIndexPath(parent, path) {
    var element = parent;
    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
      var index = path_1[_i];
      var nextChild = element.children[Math.min(index, element.children.length - 1)];
      if (!nextChild) {
        break;
      }
      element = nextChild;
    }
    element = isElementTabbable(element) && isElementVisible(element) ? element : getNextElement(parent, element, true) || getPreviousElement(parent, element);
    return element;
  }
  function getElementIndexPath(fromElement, toElement) {
    var path = [];
    while (toElement && fromElement && toElement !== fromElement) {
      var parent_1 = getParent(toElement, true);
      if (parent_1 === null) {
        return [];
      }
      path.unshift(Array.prototype.indexOf.call(parent_1.children, toElement));
      toElement = parent_1;
    }
    return path;
  }

  // node_modules/@fluentui/utilities/lib/dom/on.js
  function on(element, eventName, callback, options) {
    element.addEventListener(eventName, callback, options);
    return function() {
      return element.removeEventListener(eventName, callback, options);
    };
  }

  // node_modules/@fluentui/utilities/lib/classNamesFunction.js
  var MAX_CACHE_COUNT = 50;
  var DEFAULT_SPECIFICITY_MULTIPLIER = 5;
  var _memoizedClassNames = 0;
  var stylesheet = Stylesheet.getInstance();
  if (stylesheet && stylesheet.onReset) {
    stylesheet.onReset(function() {
      return _memoizedClassNames++;
    });
  }
  var retVal = "__retval__";
  function classNamesFunction(options) {
    if (options === void 0) {
      options = {};
    }
    var map2 = /* @__PURE__ */ new Map();
    var styleCalcCount = 0;
    var getClassNamesCount = 0;
    var currentMemoizedClassNames = _memoizedClassNames;
    var getClassNames9 = function(styleFunctionOrObject, styleProps) {
      var _a6;
      if (styleProps === void 0) {
        styleProps = {};
      }
      if (options.useStaticStyles && typeof styleFunctionOrObject === "function" && styleFunctionOrObject.__noStyleOverride__) {
        return styleFunctionOrObject(styleProps);
      }
      getClassNamesCount++;
      var current = map2;
      var theme = styleProps.theme;
      var rtl = theme && theme.rtl !== void 0 ? theme.rtl : getRTL2();
      var disableCaching = options.disableCaching;
      if (currentMemoizedClassNames !== _memoizedClassNames) {
        currentMemoizedClassNames = _memoizedClassNames;
        map2 = /* @__PURE__ */ new Map();
        styleCalcCount = 0;
      }
      if (!options.disableCaching) {
        current = _traverseMap(map2, styleFunctionOrObject);
        current = _traverseMap(current, styleProps);
      }
      if (disableCaching || !current[retVal]) {
        if (styleFunctionOrObject === void 0) {
          current[retVal] = {};
        } else {
          current[retVal] = mergeCssSets([
            typeof styleFunctionOrObject === "function" ? styleFunctionOrObject(styleProps) : styleFunctionOrObject
          ], { rtl: !!rtl, specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : void 0 });
        }
        if (!disableCaching) {
          styleCalcCount++;
        }
      }
      if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {
        var win = getWindow();
        if ((_a6 = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _a6 === void 0 ? void 0 : _a6.enableClassNameCacheFullWarning) {
          console.warn("Styles are being recalculated too frequently. Cache miss rate is " + styleCalcCount + "/" + getClassNamesCount + ".");
          console.trace();
        }
        map2.clear();
        styleCalcCount = 0;
        options.disableCaching = true;
      }
      return current[retVal];
    };
    return getClassNames9;
  }
  function _traverseEdge(current, value) {
    value = _normalizeValue(value);
    if (!current.has(value)) {
      current.set(value, /* @__PURE__ */ new Map());
    }
    return current.get(value);
  }
  function _traverseMap(current, inputs) {
    if (typeof inputs === "function") {
      var cachedInputsFromStyled = inputs.__cachedInputs__;
      if (cachedInputsFromStyled) {
        for (var _i = 0, _a6 = inputs.__cachedInputs__; _i < _a6.length; _i++) {
          var input = _a6[_i];
          current = _traverseEdge(current, input);
        }
      } else {
        current = _traverseEdge(current, inputs);
      }
    } else if (typeof inputs === "object") {
      for (var propName in inputs) {
        if (inputs.hasOwnProperty(propName)) {
          current = _traverseEdge(current, inputs[propName]);
        }
      }
    }
    return current;
  }
  function _normalizeValue(value) {
    switch (value) {
      case void 0:
        return "__undefined__";
      case null:
        return "__null__";
      default:
        return value;
    }
  }

  // node_modules/@fluentui/utilities/lib/componentAs/composeComponentAs.js
  var React3 = __toESM(require_react());

  // node_modules/@fluentui/utilities/lib/memoize.js
  var _initializedStylesheetResets = false;
  var _resetCounter = 0;
  var _emptyObject = { empty: true };
  var _dictionary = {};
  var _weakMap = typeof WeakMap === "undefined" ? null : WeakMap;
  function resetMemoizations() {
    _resetCounter++;
  }
  function memoizeFunction(cb, maxCacheSize, ignoreNullOrUndefinedResult) {
    if (maxCacheSize === void 0) {
      maxCacheSize = 100;
    }
    if (ignoreNullOrUndefinedResult === void 0) {
      ignoreNullOrUndefinedResult = false;
    }
    if (!_weakMap) {
      return cb;
    }
    if (!_initializedStylesheetResets) {
      var stylesheet3 = Stylesheet.getInstance();
      if (stylesheet3 && stylesheet3.onReset) {
        Stylesheet.getInstance().onReset(resetMemoizations);
      }
      _initializedStylesheetResets = true;
    }
    var rootNode;
    var cacheSize = 0;
    var localResetCounter = _resetCounter;
    return function memoizedFunction() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var currentNode = rootNode;
      if (rootNode === void 0 || localResetCounter !== _resetCounter || maxCacheSize > 0 && cacheSize > maxCacheSize) {
        rootNode = _createNode();
        cacheSize = 0;
        localResetCounter = _resetCounter;
      }
      currentNode = rootNode;
      for (var i2 = 0; i2 < args.length; i2++) {
        var arg = _normalizeArg(args[i2]);
        if (!currentNode.map.has(arg)) {
          currentNode.map.set(arg, _createNode());
        }
        currentNode = currentNode.map.get(arg);
      }
      if (!currentNode.hasOwnProperty("value")) {
        currentNode.value = cb.apply(void 0, args);
        cacheSize++;
      }
      if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === void 0)) {
        currentNode.value = cb.apply(void 0, args);
      }
      return currentNode.value;
    };
  }
  function createMemoizer(getValue) {
    if (!_weakMap) {
      return getValue;
    }
    var cache = new _weakMap();
    function memoizedGetValue(input) {
      if (!input || typeof input !== "function" && typeof input !== "object") {
        return getValue(input);
      }
      if (cache.has(input)) {
        return cache.get(input);
      }
      var value = getValue(input);
      cache.set(input, value);
      return value;
    }
    return memoizedGetValue;
  }
  function _normalizeArg(val) {
    if (!val) {
      return _emptyObject;
    } else if (typeof val === "object" || typeof val === "function") {
      return val;
    } else if (!_dictionary[val]) {
      _dictionary[val] = { val };
    }
    return _dictionary[val];
  }
  function _createNode() {
    return {
      map: _weakMap ? new _weakMap() : null
    };
  }

  // node_modules/@fluentui/utilities/lib/componentAs/composeComponentAs.js
  function createComposedComponent(outer) {
    var Outer = outer;
    var outerMemoizer = createMemoizer(function(inner) {
      if (outer === inner) {
        throw new Error("Attempted to compose a component with itself.");
      }
      var Inner = inner;
      var innerMemoizer = createMemoizer(function(defaultRender) {
        var InnerWithDefaultRender = function(innerProps) {
          return React3.createElement(Inner, __assign3({}, innerProps, { defaultRender }));
        };
        return InnerWithDefaultRender;
      });
      var OuterWithDefaultRender = function(outerProps) {
        var defaultRender = outerProps.defaultRender;
        return React3.createElement(Outer, __assign3({}, outerProps, { defaultRender: defaultRender ? innerMemoizer(defaultRender) : Inner }));
      };
      return OuterWithDefaultRender;
    });
    return outerMemoizer;
  }
  var componentAsMemoizer = createMemoizer(createComposedComponent);
  function composeComponentAs(outer, inner) {
    return componentAsMemoizer(outer)(inner);
  }

  // node_modules/@fluentui/utilities/lib/controlled.js
  function isControlled(props, valueProp) {
    return props[valueProp] !== void 0 && props[valueProp] !== null;
  }

  // node_modules/@fluentui/utilities/lib/css.js
  function css() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var classes = [];
    for (var _a6 = 0, args_1 = args; _a6 < args_1.length; _a6++) {
      var arg = args_1[_a6];
      if (arg) {
        if (typeof arg === "string") {
          classes.push(arg);
        } else if (arg.hasOwnProperty("toString") && typeof arg.toString === "function") {
          classes.push(arg.toString());
        } else {
          for (var key in arg) {
            if (arg[key]) {
              classes.push(key);
            }
          }
        }
      }
    }
    return classes.join(" ");
  }

  // node_modules/@fluentui/utilities/lib/customizations/Customizations.js
  var CustomizationsGlobalKey = "customizations";
  var NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };
  var _allSettings = GlobalSettings.getValue(CustomizationsGlobalKey, {
    settings: {},
    scopedSettings: {},
    inCustomizerContext: false
  });
  var _events = [];
  var Customizations = function() {
    function Customizations2() {
    }
    Customizations2.reset = function() {
      _allSettings.settings = {};
      _allSettings.scopedSettings = {};
    };
    Customizations2.applySettings = function(settings) {
      _allSettings.settings = __assign3(__assign3({}, _allSettings.settings), settings);
      Customizations2._raiseChange();
    };
    Customizations2.applyScopedSettings = function(scopeName, settings) {
      _allSettings.scopedSettings[scopeName] = __assign3(__assign3({}, _allSettings.scopedSettings[scopeName]), settings);
      Customizations2._raiseChange();
    };
    Customizations2.getSettings = function(properties, scopeName, localSettings) {
      if (localSettings === void 0) {
        localSettings = NO_CUSTOMIZATIONS;
      }
      var settings = {};
      var localScopedSettings = scopeName && localSettings.scopedSettings[scopeName] || {};
      var globalScopedSettings = scopeName && _allSettings.scopedSettings[scopeName] || {};
      for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
        var property = properties_1[_i];
        settings[property] = localScopedSettings[property] || localSettings.settings[property] || globalScopedSettings[property] || _allSettings.settings[property];
      }
      return settings;
    };
    Customizations2.applyBatchedUpdates = function(code, suppressUpdate) {
      Customizations2._suppressUpdates = true;
      try {
        code();
      } catch (_a6) {
      }
      Customizations2._suppressUpdates = false;
      if (!suppressUpdate) {
        Customizations2._raiseChange();
      }
    };
    Customizations2.observe = function(onChange) {
      _events.push(onChange);
    };
    Customizations2.unobserve = function(onChange) {
      _events = _events.filter(function(cb) {
        return cb !== onChange;
      });
    };
    Customizations2._raiseChange = function() {
      if (!Customizations2._suppressUpdates) {
        _events.forEach(function(cb) {
          return cb();
        });
      }
    };
    return Customizations2;
  }();

  // node_modules/@fluentui/utilities/lib/customizations/Customizer.js
  var React5 = __toESM(require_react());

  // node_modules/@fluentui/utilities/lib/customizations/CustomizerContext.js
  var React4 = __toESM(require_react());
  var CustomizerContext = React4.createContext({
    customizations: {
      inCustomizerContext: false,
      settings: {},
      scopedSettings: {}
    }
  });

  // node_modules/@fluentui/utilities/lib/customizations/mergeSettings.js
  function mergeSettings(oldSettings, newSettings) {
    if (oldSettings === void 0) {
      oldSettings = {};
    }
    var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);
    return mergeSettingsWith(oldSettings);
  }
  function mergeScopedSettings(oldSettings, newSettings) {
    if (oldSettings === void 0) {
      oldSettings = {};
    }
    var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);
    return mergeSettingsWith(oldSettings);
  }
  function _isSettingsFunction(settings) {
    return typeof settings === "function";
  }
  function _settingsMergeWith(newSettings) {
    return function(settings) {
      return newSettings ? __assign3(__assign3({}, settings), newSettings) : settings;
    };
  }
  function _scopedSettingsMergeWith(scopedSettingsFromProps) {
    if (scopedSettingsFromProps === void 0) {
      scopedSettingsFromProps = {};
    }
    return function(oldScopedSettings) {
      var newScopedSettings = __assign3({}, oldScopedSettings);
      for (var scopeName in scopedSettingsFromProps) {
        if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {
          newScopedSettings[scopeName] = __assign3(__assign3({}, oldScopedSettings[scopeName]), scopedSettingsFromProps[scopeName]);
        }
      }
      return newScopedSettings;
    };
  }

  // node_modules/@fluentui/utilities/lib/customizations/mergeCustomizations.js
  function mergeCustomizations(props, parentContext) {
    var _a6 = (parentContext || {}).customizations, customizations = _a6 === void 0 ? { settings: {}, scopedSettings: {} } : _a6;
    return {
      customizations: {
        settings: mergeSettings(customizations.settings, props.settings),
        scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),
        inCustomizerContext: true
      }
    };
  }

  // node_modules/@fluentui/utilities/lib/customizations/Customizer.js
  var Customizer = function(_super) {
    __extends3(Customizer2, _super);
    function Customizer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this._onCustomizationChange = function() {
        return _this.forceUpdate();
      };
      return _this;
    }
    Customizer2.prototype.componentDidMount = function() {
      Customizations.observe(this._onCustomizationChange);
    };
    Customizer2.prototype.componentWillUnmount = function() {
      Customizations.unobserve(this._onCustomizationChange);
    };
    Customizer2.prototype.render = function() {
      var _this = this;
      var contextTransform = this.props.contextTransform;
      return React5.createElement(CustomizerContext.Consumer, null, function(parentContext) {
        var newContext = mergeCustomizations(_this.props, parentContext);
        if (contextTransform) {
          newContext = contextTransform(newContext);
        }
        return React5.createElement(CustomizerContext.Provider, { value: newContext }, _this.props.children);
      });
    };
    return Customizer2;
  }(React5.Component);

  // node_modules/@fluentui/utilities/lib/customizations/customizable.js
  var React6 = __toESM(require_react());

  // node_modules/@fluentui/utilities/lib/hoistStatics.js
  function hoistStatics(source, dest) {
    for (var name_1 in source) {
      if (source.hasOwnProperty(name_1)) {
        dest[name_1] = source[name_1];
      }
    }
    return dest;
  }

  // node_modules/@fluentui/utilities/lib/customizations/customizable.js
  function customizable(scope, fields, concatStyles) {
    return function customizableFactory(ComposedComponent) {
      var _a6;
      var resultClass = (_a6 = function(_super) {
        __extends3(ComponentWithInjectedProps, _super);
        function ComponentWithInjectedProps(props) {
          var _this = _super.call(this, props) || this;
          _this._styleCache = {};
          _this._onSettingChanged = _this._onSettingChanged.bind(_this);
          return _this;
        }
        ComponentWithInjectedProps.prototype.componentDidMount = function() {
          Customizations.observe(this._onSettingChanged);
        };
        ComponentWithInjectedProps.prototype.componentWillUnmount = function() {
          Customizations.unobserve(this._onSettingChanged);
        };
        ComponentWithInjectedProps.prototype.render = function() {
          var _this = this;
          return React6.createElement(CustomizerContext.Consumer, null, function(context) {
            var defaultProps = Customizations.getSettings(fields, scope, context.customizations);
            var componentProps = _this.props;
            if (defaultProps.styles && typeof defaultProps.styles === "function") {
              defaultProps.styles = defaultProps.styles(__assign3(__assign3({}, defaultProps), componentProps));
            }
            if (concatStyles && defaultProps.styles) {
              if (_this._styleCache.default !== defaultProps.styles || _this._styleCache.component !== componentProps.styles) {
                var mergedStyles = concatStyleSets(defaultProps.styles, componentProps.styles);
                _this._styleCache.default = defaultProps.styles;
                _this._styleCache.component = componentProps.styles;
                _this._styleCache.merged = mergedStyles;
              }
              return React6.createElement(ComposedComponent, __assign3({}, defaultProps, componentProps, { styles: _this._styleCache.merged }));
            }
            return React6.createElement(ComposedComponent, __assign3({}, defaultProps, componentProps));
          });
        };
        ComponentWithInjectedProps.prototype._onSettingChanged = function() {
          this.forceUpdate();
        };
        return ComponentWithInjectedProps;
      }(React6.Component), _a6.displayName = "Customized" + scope, _a6);
      return hoistStatics(ComposedComponent, resultClass);
    };
  }

  // node_modules/@fluentui/utilities/lib/customizations/useCustomizationSettings.js
  var React7 = __toESM(require_react());
  function useCustomizationSettings(properties, scopeName) {
    var forceUpdate = useForceUpdate();
    var customizations = React7.useContext(CustomizerContext).customizations;
    var inCustomizerContext = customizations.inCustomizerContext;
    React7.useEffect(function() {
      if (!inCustomizerContext) {
        Customizations.observe(forceUpdate);
      }
      return function() {
        if (!inCustomizerContext) {
          Customizations.unobserve(forceUpdate);
        }
      };
    }, [inCustomizerContext]);
    return Customizations.getSettings(properties, scopeName, customizations);
  }
  function useForceUpdate() {
    var _a6 = React7.useState(0), setValue = _a6[1];
    return function() {
      return setValue(function(value) {
        return ++value;
      });
    };
  }

  // node_modules/@fluentui/utilities/lib/extendComponent.js
  function extendComponent(parent, methods) {
    for (var name_1 in methods) {
      if (methods.hasOwnProperty(name_1)) {
        parent[name_1] = appendFunction(parent, parent[name_1], methods[name_1]);
      }
    }
  }

  // node_modules/@fluentui/utilities/lib/getId.js
  var CURRENT_ID_PROPERTY = "__currentId__";
  var DEFAULT_ID_STRING = "id__";
  var _global2 = getWindow() || {};
  if (_global2[CURRENT_ID_PROPERTY] === void 0) {
    _global2[CURRENT_ID_PROPERTY] = 0;
  }
  var _initializedStylesheetResets2 = false;
  function getId(prefix) {
    if (!_initializedStylesheetResets2) {
      var stylesheet3 = Stylesheet.getInstance();
      if (stylesheet3 && stylesheet3.onReset) {
        stylesheet3.onReset(resetIds);
      }
      _initializedStylesheetResets2 = true;
    }
    var index = _global2[CURRENT_ID_PROPERTY]++;
    return (prefix === void 0 ? DEFAULT_ID_STRING : prefix) + index;
  }
  function resetIds(counter) {
    if (counter === void 0) {
      counter = 0;
    }
    _global2[CURRENT_ID_PROPERTY] = counter;
  }

  // node_modules/@fluentui/utilities/lib/properties.js
  var toObjectMap = function() {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      items[_i] = arguments[_i];
    }
    var result = {};
    for (var _a6 = 0, items_1 = items; _a6 < items_1.length; _a6++) {
      var item = items_1[_a6];
      var keys = Array.isArray(item) ? item : Object.keys(item);
      for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {
        var key = keys_1[_b];
        result[key] = 1;
      }
    }
    return result;
  };
  var baseElementEvents = toObjectMap([
    "onCopy",
    "onCut",
    "onPaste",
    "onCompositionEnd",
    "onCompositionStart",
    "onCompositionUpdate",
    "onFocus",
    "onFocusCapture",
    "onBlur",
    "onBlurCapture",
    "onChange",
    "onInput",
    "onSubmit",
    "onLoad",
    "onError",
    "onKeyDown",
    "onKeyDownCapture",
    "onKeyPress",
    "onKeyUp",
    "onAbort",
    "onCanPlay",
    "onCanPlayThrough",
    "onDurationChange",
    "onEmptied",
    "onEncrypted",
    "onEnded",
    "onLoadedData",
    "onLoadedMetadata",
    "onLoadStart",
    "onPause",
    "onPlay",
    "onPlaying",
    "onProgress",
    "onRateChange",
    "onSeeked",
    "onSeeking",
    "onStalled",
    "onSuspend",
    "onTimeUpdate",
    "onVolumeChange",
    "onWaiting",
    "onClick",
    "onClickCapture",
    "onContextMenu",
    "onDoubleClick",
    "onDrag",
    "onDragEnd",
    "onDragEnter",
    "onDragExit",
    "onDragLeave",
    "onDragOver",
    "onDragStart",
    "onDrop",
    "onMouseDown",
    "onMouseDownCapture",
    "onMouseEnter",
    "onMouseLeave",
    "onMouseMove",
    "onMouseOut",
    "onMouseOver",
    "onMouseUp",
    "onMouseUpCapture",
    "onSelect",
    "onTouchCancel",
    "onTouchEnd",
    "onTouchMove",
    "onTouchStart",
    "onScroll",
    "onWheel",
    "onPointerCancel",
    "onPointerDown",
    "onPointerEnter",
    "onPointerLeave",
    "onPointerMove",
    "onPointerOut",
    "onPointerOver",
    "onPointerUp",
    "onGotPointerCapture",
    "onLostPointerCapture"
  ]);
  var baseElementProperties = toObjectMap([
    "accessKey",
    "children",
    "className",
    "contentEditable",
    "dir",
    "draggable",
    "hidden",
    "htmlFor",
    "id",
    "lang",
    "ref",
    "role",
    "style",
    "tabIndex",
    "title",
    "translate",
    "spellCheck",
    "name"
  ]);
  var htmlElementProperties = toObjectMap(baseElementProperties, baseElementEvents);
  var labelProperties = toObjectMap(htmlElementProperties, [
    "form"
  ]);
  var audioProperties = toObjectMap(htmlElementProperties, [
    "height",
    "loop",
    "muted",
    "preload",
    "src",
    "width"
  ]);
  var videoProperties = toObjectMap(audioProperties, [
    "poster"
  ]);
  var olProperties = toObjectMap(htmlElementProperties, [
    "start"
  ]);
  var liProperties = toObjectMap(htmlElementProperties, [
    "value"
  ]);
  var anchorProperties = toObjectMap(htmlElementProperties, [
    "download",
    "href",
    "hrefLang",
    "media",
    "rel",
    "target",
    "type"
  ]);
  var buttonProperties = toObjectMap(htmlElementProperties, [
    "autoFocus",
    "disabled",
    "form",
    "formAction",
    "formEncType",
    "formMethod",
    "formNoValidate",
    "formTarget",
    "type",
    "value"
  ]);
  var inputProperties = toObjectMap(buttonProperties, [
    "accept",
    "alt",
    "autoCapitalize",
    "autoComplete",
    "checked",
    "dirname",
    "form",
    "height",
    "inputMode",
    "list",
    "max",
    "maxLength",
    "min",
    "minLength",
    "multiple",
    "pattern",
    "placeholder",
    "readOnly",
    "required",
    "src",
    "step",
    "size",
    "type",
    "value",
    "width"
  ]);
  var textAreaProperties = toObjectMap(buttonProperties, [
    "autoCapitalize",
    "cols",
    "dirname",
    "form",
    "maxLength",
    "minLength",
    "placeholder",
    "readOnly",
    "required",
    "rows",
    "wrap"
  ]);
  var selectProperties = toObjectMap(buttonProperties, [
    "form",
    "multiple",
    "required"
  ]);
  var optionProperties = toObjectMap(htmlElementProperties, [
    "selected",
    "value"
  ]);
  var tableProperties = toObjectMap(htmlElementProperties, [
    "cellPadding",
    "cellSpacing"
  ]);
  var thProperties = toObjectMap(htmlElementProperties, [
    "rowSpan",
    "scope"
  ]);
  var tdProperties = toObjectMap(htmlElementProperties, [
    "colSpan",
    "headers",
    "rowSpan",
    "scope"
  ]);
  var colGroupProperties = toObjectMap(htmlElementProperties, [
    "span"
  ]);
  var colProperties = toObjectMap(htmlElementProperties, [
    "span"
  ]);
  var formProperties = toObjectMap(htmlElementProperties, [
    "acceptCharset",
    "action",
    "encType",
    "encType",
    "method",
    "noValidate",
    "target"
  ]);
  var iframeProperties = toObjectMap(htmlElementProperties, [
    "allow",
    "allowFullScreen",
    "allowPaymentRequest",
    "allowTransparency",
    "csp",
    "height",
    "importance",
    "referrerPolicy",
    "sandbox",
    "src",
    "srcDoc",
    "width"
  ]);
  var imgProperties = toObjectMap(htmlElementProperties, [
    "alt",
    "crossOrigin",
    "height",
    "src",
    "srcSet",
    "useMap",
    "width"
  ]);
  var divProperties = htmlElementProperties;
  function getNativeProps(props, allowedPropNames, excludedPropNames) {
    var isArray = Array.isArray(allowedPropNames);
    var result = {};
    var keys = Object.keys(props);
    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
      var key = keys_2[_i];
      var isNativeProp = !isArray && allowedPropNames[key] || isArray && allowedPropNames.indexOf(key) >= 0 || key.indexOf("data-") === 0 || key.indexOf("aria-") === 0;
      if (isNativeProp && (!excludedPropNames || (excludedPropNames === null || excludedPropNames === void 0 ? void 0 : excludedPropNames.indexOf(key)) === -1)) {
        result[key] = props[key];
      }
    }
    return result;
  }

  // node_modules/@fluentui/utilities/lib/initializeComponentRef.js
  function initializeComponentRef(obj) {
    extendComponent(obj, {
      componentDidMount: _onMount,
      componentDidUpdate: _onUpdate,
      componentWillUnmount: _onUnmount
    });
  }
  function _onMount() {
    _setComponentRef(this.props.componentRef, this);
  }
  function _onUpdate(prevProps) {
    if (prevProps.componentRef !== this.props.componentRef) {
      _setComponentRef(prevProps.componentRef, null);
      _setComponentRef(this.props.componentRef, this);
    }
  }
  function _onUnmount() {
    _setComponentRef(this.props.componentRef, null);
  }
  function _setComponentRef(componentRef, value) {
    if (componentRef) {
      if (typeof componentRef === "object") {
        componentRef.current = value;
      } else if (typeof componentRef === "function") {
        componentRef(value);
      }
    }
  }

  // node_modules/@fluentui/utilities/lib/keyboard.js
  var _a3;
  var DirectionalKeyCodes = (_a3 = {}, _a3[KeyCodes.up] = 1, _a3[KeyCodes.down] = 1, _a3[KeyCodes.left] = 1, _a3[KeyCodes.right] = 1, _a3[KeyCodes.home] = 1, _a3[KeyCodes.end] = 1, _a3[KeyCodes.tab] = 1, _a3[KeyCodes.pageUp] = 1, _a3[KeyCodes.pageDown] = 1, _a3);
  function isDirectionalKeyCode(which) {
    return !!DirectionalKeyCodes[which];
  }

  // node_modules/@fluentui/utilities/lib/setFocusVisibility.js
  var IsFocusVisibleClassName = "ms-Fabric--isFocusVisible";
  var IsFocusHiddenClassName = "ms-Fabric--isFocusHidden";
  function updateClassList(el, enabled) {
    if (el) {
      el.classList.add(enabled ? IsFocusVisibleClassName : IsFocusHiddenClassName);
      el.classList.remove(enabled ? IsFocusHiddenClassName : IsFocusVisibleClassName);
    }
  }
  function setFocusVisibility(enabled, target, registeredProviders) {
    var _a6;
    if (registeredProviders) {
      registeredProviders.forEach(function(ref) {
        return updateClassList(ref.current, enabled);
      });
    } else {
      updateClassList((_a6 = getWindow(target)) === null || _a6 === void 0 ? void 0 : _a6.document.body, enabled);
    }
  }

  // node_modules/@fluentui/utilities/lib/FocusRectsProvider.js
  var React9 = __toESM(require_react());

  // node_modules/@fluentui/utilities/lib/useFocusRects.js
  var React8 = __toESM(require_react());
  var mountCounters = /* @__PURE__ */ new WeakMap();
  var callbackMap = /* @__PURE__ */ new WeakMap();
  function setMountCounters(key, delta) {
    var newValue;
    var currValue = mountCounters.get(key);
    if (currValue) {
      newValue = currValue + delta;
    } else {
      newValue = 1;
    }
    mountCounters.set(key, newValue);
    return newValue;
  }
  function setCallbackMap(context) {
    var callbacks = callbackMap.get(context);
    if (callbacks) {
      return callbacks;
    }
    var onMouseDown = function(ev) {
      return _onMouseDown(ev, context.registeredProviders);
    };
    var onPointerDown = function(ev) {
      return _onPointerDown(ev, context.registeredProviders);
    };
    var onKeyDown = function(ev) {
      return _onKeyDown(ev, context.registeredProviders);
    };
    var onKeyUp = function(ev) {
      return _onKeyUp(ev, context.registeredProviders);
    };
    callbacks = { onMouseDown, onPointerDown, onKeyDown, onKeyUp };
    callbackMap.set(context, callbacks);
    return callbacks;
  }
  var FocusRectsContext = React8.createContext(void 0);
  function useFocusRects(rootRef) {
    var context = React8.useContext(FocusRectsContext);
    React8.useEffect(function() {
      var _a6, _b;
      var win = getWindow(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current);
      if (!win || ((_a6 = win.FabricConfig) === null || _a6 === void 0 ? void 0 : _a6.disableFocusRects) === true) {
        return void 0;
      }
      var el = win;
      var onMouseDown;
      var onPointerDown;
      var onKeyDown;
      var onKeyUp;
      if ((_b = context === null || context === void 0 ? void 0 : context.providerRef) === null || _b === void 0 ? void 0 : _b.current) {
        el = context.providerRef.current;
        var callbacks = setCallbackMap(context);
        onMouseDown = callbacks.onMouseDown;
        onPointerDown = callbacks.onPointerDown;
        onKeyDown = callbacks.onKeyDown;
        onKeyUp = callbacks.onKeyUp;
      } else {
        onMouseDown = _onMouseDown;
        onPointerDown = _onPointerDown;
        onKeyDown = _onKeyDown;
        onKeyUp = _onKeyUp;
      }
      var count = setMountCounters(el, 1);
      if (count <= 1) {
        el.addEventListener("mousedown", onMouseDown, true);
        el.addEventListener("pointerdown", onPointerDown, true);
        el.addEventListener("keydown", onKeyDown, true);
        el.addEventListener("keyup", onKeyUp, true);
      }
      return function() {
        var _a7;
        if (!win || ((_a7 = win.FabricConfig) === null || _a7 === void 0 ? void 0 : _a7.disableFocusRects) === true) {
          return;
        }
        count = setMountCounters(el, -1);
        if (count === 0) {
          el.removeEventListener("mousedown", onMouseDown, true);
          el.removeEventListener("pointerdown", onPointerDown, true);
          el.removeEventListener("keydown", onKeyDown, true);
          el.removeEventListener("keyup", onKeyUp, true);
        }
      };
    }, [context, rootRef]);
  }
  var FocusRects = function(props) {
    useFocusRects(props.rootRef);
    return null;
  };
  function _onMouseDown(ev, registeredProviders) {
    setFocusVisibility(false, ev.target, registeredProviders);
  }
  function _onPointerDown(ev, registeredProviders) {
    if (ev.pointerType !== "mouse") {
      setFocusVisibility(false, ev.target, registeredProviders);
    }
  }
  function _onKeyDown(ev, registeredProviders) {
    if (isDirectionalKeyCode(ev.which)) {
      setFocusVisibility(true, ev.target, registeredProviders);
    }
  }
  function _onKeyUp(ev, registeredProviders) {
    if (isDirectionalKeyCode(ev.which)) {
      setFocusVisibility(true, ev.target, registeredProviders);
    }
  }

  // node_modules/@fluentui/utilities/lib/FocusRectsProvider.js
  var FocusRectsProvider = function(props) {
    var providerRef = props.providerRef, layerRoot = props.layerRoot;
    var registeredProviders = React9.useState([])[0];
    var parentContext = React9.useContext(FocusRectsContext);
    var inheritParentContext = parentContext !== void 0 && !layerRoot;
    var context = React9.useMemo(function() {
      return inheritParentContext ? void 0 : {
        providerRef,
        registeredProviders,
        registerProvider: function(ref) {
          registeredProviders.push(ref);
          parentContext === null || parentContext === void 0 ? void 0 : parentContext.registerProvider(ref);
        },
        unregisterProvider: function(ref) {
          parentContext === null || parentContext === void 0 ? void 0 : parentContext.unregisterProvider(ref);
          var i2 = registeredProviders.indexOf(ref);
          if (i2 >= 0) {
            registeredProviders.splice(i2, 1);
          }
        }
      };
    }, [providerRef, registeredProviders, parentContext, inheritParentContext]);
    React9.useEffect(function() {
      if (context) {
        context.registerProvider(context.providerRef);
        return function() {
          return context.unregisterProvider(context.providerRef);
        };
      }
    }, [context]);
    if (context) {
      return React9.createElement(FocusRectsContext.Provider, { value: context }, props.children);
    } else {
      return React9.createElement(React9.Fragment, null, props.children);
    }
  };

  // node_modules/@fluentui/utilities/lib/localStorage.js
  function getItem2(key) {
    var result = null;
    try {
      var win = getWindow();
      result = win ? win.localStorage.getItem(key) : null;
    } catch (e2) {
    }
    return result;
  }

  // node_modules/@fluentui/utilities/lib/language.js
  var _language;
  var STORAGE_KEY = "language";
  function getLanguage(persistenceType) {
    if (persistenceType === void 0) {
      persistenceType = "sessionStorage";
    }
    if (_language === void 0) {
      var doc = getDocument();
      var savedLanguage = persistenceType === "localStorage" ? getItem2(STORAGE_KEY) : persistenceType === "sessionStorage" ? getItem(STORAGE_KEY) : void 0;
      if (savedLanguage) {
        _language = savedLanguage;
      }
      if (_language === void 0 && doc) {
        _language = doc.documentElement.getAttribute("lang");
      }
      if (_language === void 0) {
        _language = "en";
      }
    }
    return _language;
  }

  // node_modules/@fluentui/utilities/lib/merge.js
  function merge(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    for (var _a6 = 0, args_1 = args; _a6 < args_1.length; _a6++) {
      var arg = args_1[_a6];
      _merge(target || {}, arg);
    }
    return target;
  }
  function _merge(target, source, circularReferences) {
    if (circularReferences === void 0) {
      circularReferences = [];
    }
    circularReferences.push(source);
    for (var name_1 in source) {
      if (source.hasOwnProperty(name_1)) {
        if (name_1 !== "__proto__" && name_1 !== "constructor" && name_1 !== "prototype") {
          var value = source[name_1];
          if (typeof value === "object" && value !== null && !Array.isArray(value)) {
            var isCircularReference = circularReferences.indexOf(value) > -1;
            target[name_1] = isCircularReference ? value : _merge(target[name_1] || {}, value, circularReferences);
          } else {
            target[name_1] = value;
          }
        }
      }
    }
    circularReferences.pop();
    return target;
  }

  // node_modules/@fluentui/utilities/lib/mobileDetector.js
  var isIOS = function() {
    if (!window || !window.navigator || !window.navigator.userAgent) {
      return false;
    }
    return /iPad|iPhone|iPod/i.test(window.navigator.userAgent);
  };

  // node_modules/@fluentui/utilities/lib/modalize.js
  var tagsToIgnore = ["TEMPLATE", "STYLE", "SCRIPT"];
  function modalize(target) {
    var targetDocument = getDocument(target);
    if (!targetDocument) {
      return function() {
        return void 0;
      };
    }
    var affectedNodes = [];
    while (target !== targetDocument.body && target.parentElement) {
      for (var _i = 0, _a6 = target.parentElement.children; _i < _a6.length; _i++) {
        var sibling = _a6[_i];
        var ariaHidden = sibling.getAttribute("aria-hidden");
        if (sibling !== target && (ariaHidden === null || ariaHidden === void 0 ? void 0 : ariaHidden.toLowerCase()) !== "true" && tagsToIgnore.indexOf(sibling.tagName) === -1) {
          affectedNodes.push([sibling, ariaHidden]);
        }
      }
      target = target.parentElement;
    }
    affectedNodes.forEach(function(_a7) {
      var node = _a7[0];
      node.setAttribute("aria-hidden", "true");
    });
    return function() {
      unmodalize(affectedNodes);
      affectedNodes = [];
    };
  }
  function unmodalize(affectedNodes) {
    affectedNodes.forEach(function(_a6) {
      var node = _a6[0], originalValue = _a6[1];
      if (originalValue) {
        node.setAttribute("aria-hidden", originalValue);
      } else {
        node.removeAttribute("aria-hidden");
      }
    });
  }

  // node_modules/@fluentui/utilities/lib/osDetector.js
  var isMacResult;
  function isMac(reset) {
    var _a6;
    if (typeof isMacResult === "undefined" || reset) {
      var win = getWindow();
      var userAgent = (_a6 = win === null || win === void 0 ? void 0 : win.navigator) === null || _a6 === void 0 ? void 0 : _a6.userAgent;
      isMacResult = !!userAgent && userAgent.indexOf("Macintosh") !== -1;
    }
    return !!isMacResult;
  }

  // node_modules/@fluentui/utilities/lib/renderFunction/composeRenderFunction.js
  function createComposedRenderFunction(outer) {
    var outerMemoizer = createMemoizer(function(inner) {
      var innerMemoizer = createMemoizer(function(defaultRender) {
        return function(innerProps) {
          return inner(innerProps, defaultRender);
        };
      });
      return function(outerProps, defaultRender) {
        return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);
      };
    });
    return outerMemoizer;
  }
  var memoizer = createMemoizer(createComposedRenderFunction);
  function composeRenderFunction(outer, inner) {
    return memoizer(outer)(inner);
  }

  // node_modules/@fluentui/utilities/lib/styled.js
  var React10 = __toESM(require_react());
  var DefaultFields = ["theme", "styles"];
  function styled(Component13, baseStyles, getProps, customizable2, pure) {
    customizable2 = customizable2 || { scope: "", fields: void 0 };
    var scope = customizable2.scope, _a6 = customizable2.fields, fields = _a6 === void 0 ? DefaultFields : _a6;
    var Wrapped = React10.forwardRef(function(props, forwardedRef) {
      var styles2 = React10.useRef();
      var settings = useCustomizationSettings(fields, scope);
      var customizedStyles = settings.styles, dir = settings.dir, rest = __rest3(settings, ["styles", "dir"]);
      var additionalProps = getProps ? getProps(props) : void 0;
      var cache = styles2.current && styles2.current.__cachedInputs__ || [];
      var propStyles = props.styles;
      if (!styles2.current || customizedStyles !== cache[1] || propStyles !== cache[2]) {
        var concatenatedStyles = function(styleProps) {
          return concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, propStyles);
        };
        concatenatedStyles.__cachedInputs__ = [
          baseStyles,
          customizedStyles,
          propStyles
        ];
        concatenatedStyles.__noStyleOverride__ = !customizedStyles && !propStyles;
        styles2.current = concatenatedStyles;
      }
      return React10.createElement(Component13, __assign3({ ref: forwardedRef }, rest, additionalProps, props, { styles: styles2.current }));
    });
    Wrapped.displayName = "Styled" + (Component13.displayName || Component13.name);
    var pureComponent = pure ? React10.memo(Wrapped) : Wrapped;
    if (Wrapped.displayName) {
      pureComponent.displayName = Wrapped.displayName;
    }
    return pureComponent;
  }

  // node_modules/@fluentui/utilities/lib/warn/warnControlledUsage.js
  var warningsMap;
  if (true) {
    warningsMap = {
      valueOnChange: {},
      valueDefaultValue: {},
      controlledToUncontrolled: {},
      uncontrolledToControlled: {}
    };
  }
  function warnControlledUsage(params) {
    if (true) {
      var componentId = params.componentId, componentName = params.componentName, defaultValueProp = params.defaultValueProp, props = params.props, oldProps = params.oldProps, onChangeProp = params.onChangeProp, readOnlyProp = params.readOnlyProp, valueProp = params.valueProp;
      var oldIsControlled = oldProps ? isControlled(oldProps, valueProp) : void 0;
      var newIsControlled = isControlled(props, valueProp);
      if (newIsControlled) {
        var hasOnChange = !!props[onChangeProp];
        var isReadOnly = !!(readOnlyProp && props[readOnlyProp]);
        if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {
          warningsMap.valueOnChange[componentId] = true;
          warn("Warning: You provided a '" + valueProp + "' prop to a " + componentName + " without an '" + onChangeProp + "' handler. " + ("This will render a read-only field. If the field should be mutable use '" + defaultValueProp + "'. ") + ("Otherwise, set '" + onChangeProp + "'" + (readOnlyProp ? " or '" + readOnlyProp + "'" : "") + "."));
        }
        var defaultValue = props[defaultValueProp];
        if (defaultValue !== void 0 && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {
          warningsMap.valueDefaultValue[componentId] = true;
          warn("Warning: You provided both '" + valueProp + "' and '" + defaultValueProp + "' to a " + componentName + ". " + ("Form fields must be either controlled or uncontrolled (specify either the '" + valueProp + "' prop, ") + ("or the '" + defaultValueProp + "' prop, but not both). Decide between using a controlled or uncontrolled ") + (componentName + " and remove one of these props. More info: https://fb.me/react-controlled-components"));
        }
      }
      if (oldProps && newIsControlled !== oldIsControlled) {
        var oldType = oldIsControlled ? "a controlled" : "an uncontrolled";
        var newType = oldIsControlled ? "uncontrolled" : "controlled";
        var warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;
        if (!warnMap[componentId]) {
          warnMap[componentId] = true;
          warn("Warning: A component is changing " + oldType + " " + componentName + " to be " + newType + ". " + (componentName + "s should not switch from controlled to uncontrolled (or vice versa). ") + "Decide between using controlled or uncontrolled for the lifetime of the component. More info: https://fb.me/react-controlled-components");
        }
      }
    }
  }

  // node_modules/@fluentui/utilities/lib/getPropsWithDefaults.js
  function getPropsWithDefaults(defaultProps, propsWithoutDefaults) {
    var props = __assign3({}, propsWithoutDefaults);
    for (var _i = 0, _a6 = Object.keys(defaultProps); _i < _a6.length; _i++) {
      var key = _a6[_i];
      if (props[key] === void 0) {
        props[key] = defaultProps[key];
      }
    }
    return props;
  }

  // node_modules/@fluentui/utilities/lib/createMergedRef.js
  var createResolver = function(local) {
    return function(newValue) {
      for (var _i = 0, _a6 = local.refs; _i < _a6.length; _i++) {
        var ref = _a6[_i];
        if (typeof ref === "function") {
          ref(newValue);
        } else if (ref) {
          ref.current = newValue;
        }
      }
    };
  };
  var createMergedRef = function(value) {
    var local = {
      refs: []
    };
    return function() {
      var newRefs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newRefs[_i] = arguments[_i];
      }
      if (!local.resolver || !arraysEqual(local.refs, newRefs)) {
        local.resolver = createResolver(local);
      }
      local.refs = newRefs;
      return local.resolver;
    };
  };

  // node_modules/@fluentui/utilities/lib/useIsomorphicLayoutEffect.js
  var React11 = __toESM(require_react());
  var useIsomorphicLayoutEffect = canUseDOM() ? React11.useLayoutEffect : React11.useEffect;

  // node_modules/@fluentui/utilities/lib/version.js
  setVersion("@fluentui/utilities", "8.13.2");

  // node_modules/@fluentui/style-utilities/lib/utilities/icons.js
  var ICON_SETTING_NAME = "icons";
  var _iconSettings = GlobalSettings.getValue(ICON_SETTING_NAME, {
    __options: {
      disableWarnings: false,
      warnOnMissingIcons: true
    },
    __remapped: {}
  });
  var stylesheet2 = Stylesheet.getInstance();
  if (stylesheet2 && stylesheet2.onReset) {
    stylesheet2.onReset(function() {
      for (var name_1 in _iconSettings) {
        if (_iconSettings.hasOwnProperty(name_1) && !!_iconSettings[name_1].subset) {
          _iconSettings[name_1].subset.className = void 0;
        }
      }
    });
  }
  var normalizeIconName = function(name) {
    return name.toLowerCase();
  };
  function registerIcons(iconSubset, options) {
    var subset = __assign2(__assign2({}, iconSubset), { isRegistered: false, className: void 0 });
    var icons = iconSubset.icons;
    options = options ? __assign2(__assign2({}, _iconSettings.__options), options) : _iconSettings.__options;
    for (var iconName in icons) {
      if (icons.hasOwnProperty(iconName)) {
        var code = icons[iconName];
        var normalizedIconName = normalizeIconName(iconName);
        if (_iconSettings[normalizedIconName]) {
          _warnDuplicateIcon(iconName);
        } else {
          _iconSettings[normalizedIconName] = {
            code,
            subset
          };
        }
      }
    }
  }
  function getIcon(name) {
    var icon = void 0;
    var options = _iconSettings.__options;
    name = name ? normalizeIconName(name) : "";
    name = _iconSettings.__remapped[name] || name;
    if (name) {
      icon = _iconSettings[name];
      if (icon) {
        var subset = icon.subset;
        if (subset && subset.fontFace) {
          if (!subset.isRegistered) {
            fontFace(subset.fontFace);
            subset.isRegistered = true;
          }
          if (!subset.className) {
            subset.className = mergeStyles(subset.style, {
              fontFamily: subset.fontFace.fontFamily,
              fontWeight: subset.fontFace.fontWeight || "normal",
              fontStyle: subset.fontFace.fontStyle || "normal"
            });
          }
        }
      } else {
        if (!options.disableWarnings && options.warnOnMissingIcons) {
          warn('The icon "' + name + '" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.');
        }
      }
    }
    return icon;
  }
  var _missingIcons = [];
  var _missingIconsTimer = void 0;
  function _warnDuplicateIcon(iconName) {
    var options = _iconSettings.__options;
    var warningDelay = 2e3;
    var maxIconsInMessage = 10;
    if (!options.disableWarnings) {
      _missingIcons.push(iconName);
      if (_missingIconsTimer === void 0) {
        _missingIconsTimer = setTimeout(function() {
          warn("Some icons were re-registered. Applications should only call registerIcons for any given icon once. Redefining what an icon is may have unintended consequences. Duplicates include: \n" + _missingIcons.slice(0, maxIconsInMessage).join(", ") + (_missingIcons.length > maxIconsInMessage ? " (+ " + (_missingIcons.length - maxIconsInMessage) + " more)" : ""));
          _missingIconsTimer = void 0;
          _missingIcons = [];
        }, warningDelay);
      }
    }
  }

  // node_modules/@fluentui/theme/node_modules/tslib/modules/index.js
  var import_tslib16 = __toESM(require_tslib4(), 1);
  var {
    __extends: __extends4,
    __assign: __assign4,
    __rest: __rest4,
    __decorate: __decorate4,
    __param: __param4,
    __metadata: __metadata4,
    __awaiter: __awaiter4,
    __generator: __generator4,
    __exportStar: __exportStar4,
    __createBinding: __createBinding4,
    __values: __values5,
    __read: __read5,
    __spread: __spread4,
    __spreadArrays: __spreadArrays4,
    __spreadArray: __spreadArray4,
    __await: __await4,
    __asyncGenerator: __asyncGenerator4,
    __asyncDelegator: __asyncDelegator4,
    __asyncValues: __asyncValues4,
    __makeTemplateObject: __makeTemplateObject4,
    __importStar: __importStar4,
    __importDefault: __importDefault4,
    __classPrivateFieldGet: __classPrivateFieldGet4,
    __classPrivateFieldSet: __classPrivateFieldSet4,
    __classPrivateFieldIn: __classPrivateFieldIn4
  } = import_tslib16.default;

  // node_modules/@fluentui/theme/lib/utilities/makeSemanticColors.js
  function makeSemanticColors(p2, e2, s2, isInverted, depComments) {
    if (depComments === void 0) {
      depComments = false;
    }
    var semanticColors = __assign4({
      primaryButtonBorder: "transparent",
      errorText: !isInverted ? "#a4262c" : "#F1707B",
      messageText: !isInverted ? "#323130" : "#F3F2F1",
      messageLink: !isInverted ? "#005A9E" : "#6CB8F6",
      messageLinkHovered: !isInverted ? "#004578" : "#82C7FF",
      infoIcon: !isInverted ? "#605e5c" : "#C8C6C4",
      errorIcon: !isInverted ? "#A80000" : "#F1707B",
      blockingIcon: !isInverted ? "#FDE7E9" : "#442726",
      warningIcon: !isInverted ? "#797775" : "#C8C6C4",
      severeWarningIcon: !isInverted ? "#D83B01" : "#FCE100",
      successIcon: !isInverted ? "#107C10" : "#92C353",
      infoBackground: !isInverted ? "#f3f2f1" : "#323130",
      errorBackground: !isInverted ? "#FDE7E9" : "#442726",
      blockingBackground: !isInverted ? "#FDE7E9" : "#442726",
      warningBackground: !isInverted ? "#FFF4CE" : "#433519",
      severeWarningBackground: !isInverted ? "#FED9CC" : "#4F2A0F",
      successBackground: !isInverted ? "#DFF6DD" : "#393D1B",
      warningHighlight: !isInverted ? "#ffb900" : "#fff100",
      successText: !isInverted ? "#107C10" : "#92c353"
    }, s2);
    var fullSemanticColors = getSemanticColors(p2, e2, semanticColors, isInverted);
    return _fixDeprecatedSlots(fullSemanticColors, depComments);
  }
  function getSemanticColors(p2, e2, s2, isInverted, depComments) {
    if (depComments === void 0) {
      depComments = false;
    }
    var result = {};
    var _a6 = p2 || {}, white = _a6.white, black = _a6.black, themePrimary = _a6.themePrimary, themeDark = _a6.themeDark, themeDarker = _a6.themeDarker, themeDarkAlt = _a6.themeDarkAlt, themeLighter = _a6.themeLighter, neutralLight = _a6.neutralLight, neutralLighter = _a6.neutralLighter, neutralDark = _a6.neutralDark, neutralQuaternary = _a6.neutralQuaternary, neutralQuaternaryAlt = _a6.neutralQuaternaryAlt, neutralPrimary = _a6.neutralPrimary, neutralSecondary = _a6.neutralSecondary, neutralSecondaryAlt = _a6.neutralSecondaryAlt, neutralTertiary = _a6.neutralTertiary, neutralTertiaryAlt = _a6.neutralTertiaryAlt, neutralLighterAlt = _a6.neutralLighterAlt, accent = _a6.accent;
    if (white) {
      result.bodyBackground = white;
      result.bodyFrameBackground = white;
      result.accentButtonText = white;
      result.buttonBackground = white;
      result.primaryButtonText = white;
      result.primaryButtonTextHovered = white;
      result.primaryButtonTextPressed = white;
      result.inputBackground = white;
      result.inputForegroundChecked = white;
      result.listBackground = white;
      result.menuBackground = white;
      result.cardStandoutBackground = white;
    }
    if (black) {
      result.bodyTextChecked = black;
      result.buttonTextCheckedHovered = black;
    }
    if (themePrimary) {
      result.link = themePrimary;
      result.primaryButtonBackground = themePrimary;
      result.inputBackgroundChecked = themePrimary;
      result.inputIcon = themePrimary;
      result.inputFocusBorderAlt = themePrimary;
      result.menuIcon = themePrimary;
      result.menuHeader = themePrimary;
      result.accentButtonBackground = themePrimary;
    }
    if (themeDark) {
      result.primaryButtonBackgroundPressed = themeDark;
      result.inputBackgroundCheckedHovered = themeDark;
      result.inputIconHovered = themeDark;
    }
    if (themeDarker) {
      result.linkHovered = themeDarker;
    }
    if (themeDarkAlt) {
      result.primaryButtonBackgroundHovered = themeDarkAlt;
    }
    if (themeLighter) {
      result.inputPlaceholderBackgroundChecked = themeLighter;
    }
    if (neutralLight) {
      result.bodyBackgroundChecked = neutralLight;
      result.bodyFrameDivider = neutralLight;
      result.bodyDivider = neutralLight;
      result.variantBorder = neutralLight;
      result.buttonBackgroundCheckedHovered = neutralLight;
      result.buttonBackgroundPressed = neutralLight;
      result.listItemBackgroundChecked = neutralLight;
      result.listHeaderBackgroundPressed = neutralLight;
      result.menuItemBackgroundPressed = neutralLight;
      result.menuItemBackgroundChecked = neutralLight;
    }
    if (neutralLighter) {
      result.bodyBackgroundHovered = neutralLighter;
      result.buttonBackgroundHovered = neutralLighter;
      result.buttonBackgroundDisabled = neutralLighter;
      result.buttonBorderDisabled = neutralLighter;
      result.primaryButtonBackgroundDisabled = neutralLighter;
      result.disabledBackground = neutralLighter;
      result.listItemBackgroundHovered = neutralLighter;
      result.listHeaderBackgroundHovered = neutralLighter;
      result.menuItemBackgroundHovered = neutralLighter;
    }
    if (neutralQuaternary) {
      result.primaryButtonTextDisabled = neutralQuaternary;
      result.disabledSubtext = neutralQuaternary;
    }
    if (neutralQuaternaryAlt) {
      result.listItemBackgroundCheckedHovered = neutralQuaternaryAlt;
    }
    if (neutralTertiary) {
      result.disabledBodyText = neutralTertiary;
      result.variantBorderHovered = (s2 === null || s2 === void 0 ? void 0 : s2.variantBorderHovered) || neutralTertiary;
      result.buttonTextDisabled = neutralTertiary;
      result.inputIconDisabled = neutralTertiary;
      result.disabledText = neutralTertiary;
    }
    if (neutralPrimary) {
      result.bodyText = neutralPrimary;
      result.actionLink = neutralPrimary;
      result.buttonText = neutralPrimary;
      result.inputBorderHovered = neutralPrimary;
      result.inputText = neutralPrimary;
      result.listText = neutralPrimary;
      result.menuItemText = neutralPrimary;
    }
    if (neutralLighterAlt) {
      result.bodyStandoutBackground = neutralLighterAlt;
      result.defaultStateBackground = neutralLighterAlt;
    }
    if (neutralDark) {
      result.actionLinkHovered = neutralDark;
      result.buttonTextHovered = neutralDark;
      result.buttonTextChecked = neutralDark;
      result.buttonTextPressed = neutralDark;
      result.inputTextHovered = neutralDark;
      result.menuItemTextHovered = neutralDark;
    }
    if (neutralSecondary) {
      result.bodySubtext = neutralSecondary;
      result.focusBorder = neutralSecondary;
      result.inputBorder = neutralSecondary;
      result.smallInputBorder = neutralSecondary;
      result.inputPlaceholderText = neutralSecondary;
    }
    if (neutralSecondaryAlt) {
      result.buttonBorder = neutralSecondaryAlt;
    }
    if (neutralTertiaryAlt) {
      result.disabledBodySubtext = neutralTertiaryAlt;
      result.disabledBorder = neutralTertiaryAlt;
      result.buttonBackgroundChecked = neutralTertiaryAlt;
      result.menuDivider = neutralTertiaryAlt;
    }
    if (accent) {
      result.accentButtonBackground = accent;
    }
    if (e2 === null || e2 === void 0 ? void 0 : e2.elevation4) {
      result.cardShadow = e2.elevation4;
    }
    if (!isInverted && (e2 === null || e2 === void 0 ? void 0 : e2.elevation8)) {
      result.cardShadowHovered = e2.elevation8;
    } else if (result.variantBorderHovered) {
      result.cardShadowHovered = "0 0 1px " + result.variantBorderHovered;
    }
    result = __assign4(__assign4({}, result), s2);
    return result;
  }
  function _fixDeprecatedSlots(s2, depComments) {
    var dep = "";
    if (depComments === true) {
      dep = " /* @deprecated */";
    }
    s2.listTextColor = s2.listText + dep;
    s2.menuItemBackgroundChecked += dep;
    s2.warningHighlight += dep;
    s2.warningText = s2.messageText + dep;
    s2.successText += dep;
    return s2;
  }

  // node_modules/@fluentui/theme/lib/mergeThemes.js
  function mergeThemes(theme, partialTheme) {
    var _a6, _b, _c;
    if (partialTheme === void 0) {
      partialTheme = {};
    }
    var mergedTheme = merge({}, theme, partialTheme, {
      semanticColors: getSemanticColors(partialTheme.palette, partialTheme.effects, partialTheme.semanticColors, partialTheme.isInverted === void 0 ? theme.isInverted : partialTheme.isInverted)
    });
    if (((_a6 = partialTheme.palette) === null || _a6 === void 0 ? void 0 : _a6.themePrimary) && !((_b = partialTheme.palette) === null || _b === void 0 ? void 0 : _b.accent)) {
      mergedTheme.palette.accent = partialTheme.palette.themePrimary;
    }
    if (partialTheme.defaultFontStyle) {
      for (var _i = 0, _d = Object.keys(mergedTheme.fonts); _i < _d.length; _i++) {
        var fontStyle = _d[_i];
        mergedTheme.fonts[fontStyle] = merge(mergedTheme.fonts[fontStyle], partialTheme.defaultFontStyle, (_c = partialTheme === null || partialTheme === void 0 ? void 0 : partialTheme.fonts) === null || _c === void 0 ? void 0 : _c[fontStyle]);
      }
    }
    return mergedTheme;
  }

  // node_modules/@fluentui/theme/lib/colors/DefaultPalette.js
  var DefaultPalette = {
    themeDarker: "#004578",
    themeDark: "#005a9e",
    themeDarkAlt: "#106ebe",
    themePrimary: "#0078d4",
    themeSecondary: "#2b88d8",
    themeTertiary: "#71afe5",
    themeLight: "#c7e0f4",
    themeLighter: "#deecf9",
    themeLighterAlt: "#eff6fc",
    black: "#000000",
    blackTranslucent40: "rgba(0,0,0,.4)",
    neutralDark: "#201f1e",
    neutralPrimary: "#323130",
    neutralPrimaryAlt: "#3b3a39",
    neutralSecondary: "#605e5c",
    neutralSecondaryAlt: "#8a8886",
    neutralTertiary: "#a19f9d",
    neutralTertiaryAlt: "#c8c6c4",
    neutralQuaternary: "#d2d0ce",
    neutralQuaternaryAlt: "#e1dfdd",
    neutralLight: "#edebe9",
    neutralLighter: "#f3f2f1",
    neutralLighterAlt: "#faf9f8",
    accent: "#0078d4",
    white: "#ffffff",
    whiteTranslucent40: "rgba(255,255,255,.4)",
    yellowDark: "#d29200",
    yellow: "#ffb900",
    yellowLight: "#fff100",
    orange: "#d83b01",
    orangeLight: "#ea4300",
    orangeLighter: "#ff8c00",
    redDark: "#a4262c",
    red: "#e81123",
    magentaDark: "#5c005c",
    magenta: "#b4009e",
    magentaLight: "#e3008c",
    purpleDark: "#32145a",
    purple: "#5c2d91",
    purpleLight: "#b4a0ff",
    blueDark: "#002050",
    blueMid: "#00188f",
    blue: "#0078d4",
    blueLight: "#00bcf2",
    tealDark: "#004b50",
    teal: "#008272",
    tealLight: "#00b294",
    greenDark: "#004b1c",
    green: "#107c10",
    greenLight: "#bad80a"
  };

  // node_modules/@fluentui/theme/lib/effects/FluentDepths.js
  var Depths;
  (function(Depths2) {
    Depths2.depth0 = "0 0 0 0 transparent";
    Depths2.depth4 = "0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)";
    Depths2.depth8 = "0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)";
    Depths2.depth16 = "0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)";
    Depths2.depth64 = "0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)";
  })(Depths || (Depths = {}));

  // node_modules/@fluentui/theme/lib/effects/DefaultEffects.js
  var DefaultEffects = {
    elevation4: Depths.depth4,
    elevation8: Depths.depth8,
    elevation16: Depths.depth16,
    elevation64: Depths.depth64,
    roundedCorner2: "2px",
    roundedCorner4: "4px",
    roundedCorner6: "6px"
  };

  // node_modules/@fluentui/theme/lib/spacing/DefaultSpacing.js
  var DefaultSpacing = {
    s2: "4px",
    s1: "8px",
    m: "16px",
    l1: "20px",
    l2: "32px"
  };

  // node_modules/@fluentui/theme/lib/motion/AnimationStyles.js
  var EASING_FUNCTION_1 = "cubic-bezier(.1,.9,.2,1)";
  var EASING_FUNCTION_2 = "cubic-bezier(.1,.25,.75,.9)";
  var DURATION_1 = "0.167s";
  var DURATION_2 = "0.267s";
  var DURATION_3 = "0.367s";
  var DURATION_4 = "0.467s";
  var FADE_IN = keyframes({
    from: { opacity: 0 },
    to: { opacity: 1 }
  });
  var FADE_OUT = keyframes({
    from: { opacity: 1 },
    to: { opacity: 0, visibility: "hidden" }
  });
  var SLIDE_RIGHT_IN10 = _createSlideInX(-10);
  var SLIDE_RIGHT_IN20 = _createSlideInX(-20);
  var SLIDE_RIGHT_IN40 = _createSlideInX(-40);
  var SLIDE_RIGHT_IN400 = _createSlideInX(-400);
  var SLIDE_LEFT_IN10 = _createSlideInX(10);
  var SLIDE_LEFT_IN20 = _createSlideInX(20);
  var SLIDE_LEFT_IN40 = _createSlideInX(40);
  var SLIDE_LEFT_IN400 = _createSlideInX(400);
  var SLIDE_UP_IN10 = _createSlideInY(10);
  var SLIDE_UP_IN20 = _createSlideInY(20);
  var SLIDE_DOWN_IN10 = _createSlideInY(-10);
  var SLIDE_DOWN_IN20 = _createSlideInY(-20);
  var SLIDE_RIGHT_OUT10 = _createSlideOutX(10);
  var SLIDE_RIGHT_OUT20 = _createSlideOutX(20);
  var SLIDE_RIGHT_OUT40 = _createSlideOutX(40);
  var SLIDE_RIGHT_OUT400 = _createSlideOutX(400);
  var SLIDE_LEFT_OUT10 = _createSlideOutX(-10);
  var SLIDE_LEFT_OUT20 = _createSlideOutX(-20);
  var SLIDE_LEFT_OUT40 = _createSlideOutX(-40);
  var SLIDE_LEFT_OUT400 = _createSlideOutX(-400);
  var SLIDE_UP_OUT10 = _createSlideOutY(-10);
  var SLIDE_UP_OUT20 = _createSlideOutY(-20);
  var SLIDE_DOWN_OUT10 = _createSlideOutY(10);
  var SLIDE_DOWN_OUT20 = _createSlideOutY(20);
  var SCALE_UP100 = keyframes({
    from: { transform: "scale3d(.98,.98,1)" },
    to: { transform: "scale3d(1,1,1)" }
  });
  var SCALE_DOWN98 = keyframes({
    from: { transform: "scale3d(1,1,1)" },
    to: { transform: "scale3d(.98,.98,1)" }
  });
  var SCALE_DOWN100 = keyframes({
    from: { transform: "scale3d(1.03,1.03,1)" },
    to: { transform: "scale3d(1,1,1)" }
  });
  var SCALE_UP103 = keyframes({
    from: { transform: "scale3d(1,1,1)" },
    to: { transform: "scale3d(1.03,1.03,1)" }
  });
  var ROTATE90 = keyframes({
    from: { transform: "rotateZ(0deg)" },
    to: { transform: "rotateZ(90deg)" }
  });
  var ROTATE_N90 = keyframes({
    from: { transform: "rotateZ(0deg)" },
    to: { transform: "rotateZ(-90deg)" }
  });
  var AnimationStyles = {
    slideRightIn10: _createAnimation(FADE_IN + "," + SLIDE_RIGHT_IN10, DURATION_3, EASING_FUNCTION_1),
    slideRightIn20: _createAnimation(FADE_IN + "," + SLIDE_RIGHT_IN20, DURATION_3, EASING_FUNCTION_1),
    slideRightIn40: _createAnimation(FADE_IN + "," + SLIDE_RIGHT_IN40, DURATION_3, EASING_FUNCTION_1),
    slideRightIn400: _createAnimation(FADE_IN + "," + SLIDE_RIGHT_IN400, DURATION_3, EASING_FUNCTION_1),
    slideLeftIn10: _createAnimation(FADE_IN + "," + SLIDE_LEFT_IN10, DURATION_3, EASING_FUNCTION_1),
    slideLeftIn20: _createAnimation(FADE_IN + "," + SLIDE_LEFT_IN20, DURATION_3, EASING_FUNCTION_1),
    slideLeftIn40: _createAnimation(FADE_IN + "," + SLIDE_LEFT_IN40, DURATION_3, EASING_FUNCTION_1),
    slideLeftIn400: _createAnimation(FADE_IN + "," + SLIDE_LEFT_IN400, DURATION_3, EASING_FUNCTION_1),
    slideUpIn10: _createAnimation(FADE_IN + "," + SLIDE_UP_IN10, DURATION_3, EASING_FUNCTION_1),
    slideUpIn20: _createAnimation(FADE_IN + "," + SLIDE_UP_IN20, DURATION_3, EASING_FUNCTION_1),
    slideDownIn10: _createAnimation(FADE_IN + "," + SLIDE_DOWN_IN10, DURATION_3, EASING_FUNCTION_1),
    slideDownIn20: _createAnimation(FADE_IN + "," + SLIDE_DOWN_IN20, DURATION_3, EASING_FUNCTION_1),
    slideRightOut10: _createAnimation(FADE_OUT + "," + SLIDE_RIGHT_OUT10, DURATION_3, EASING_FUNCTION_1),
    slideRightOut20: _createAnimation(FADE_OUT + "," + SLIDE_RIGHT_OUT20, DURATION_3, EASING_FUNCTION_1),
    slideRightOut40: _createAnimation(FADE_OUT + "," + SLIDE_RIGHT_OUT40, DURATION_3, EASING_FUNCTION_1),
    slideRightOut400: _createAnimation(FADE_OUT + "," + SLIDE_RIGHT_OUT400, DURATION_3, EASING_FUNCTION_1),
    slideLeftOut10: _createAnimation(FADE_OUT + "," + SLIDE_LEFT_OUT10, DURATION_3, EASING_FUNCTION_1),
    slideLeftOut20: _createAnimation(FADE_OUT + "," + SLIDE_LEFT_OUT20, DURATION_3, EASING_FUNCTION_1),
    slideLeftOut40: _createAnimation(FADE_OUT + "," + SLIDE_LEFT_OUT40, DURATION_3, EASING_FUNCTION_1),
    slideLeftOut400: _createAnimation(FADE_OUT + "," + SLIDE_LEFT_OUT400, DURATION_3, EASING_FUNCTION_1),
    slideUpOut10: _createAnimation(FADE_OUT + "," + SLIDE_UP_OUT10, DURATION_3, EASING_FUNCTION_1),
    slideUpOut20: _createAnimation(FADE_OUT + "," + SLIDE_UP_OUT20, DURATION_3, EASING_FUNCTION_1),
    slideDownOut10: _createAnimation(FADE_OUT + "," + SLIDE_DOWN_OUT10, DURATION_3, EASING_FUNCTION_1),
    slideDownOut20: _createAnimation(FADE_OUT + "," + SLIDE_DOWN_OUT20, DURATION_3, EASING_FUNCTION_1),
    scaleUpIn100: _createAnimation(FADE_IN + "," + SCALE_UP100, DURATION_3, EASING_FUNCTION_1),
    scaleDownIn100: _createAnimation(FADE_IN + "," + SCALE_DOWN100, DURATION_3, EASING_FUNCTION_1),
    scaleUpOut103: _createAnimation(FADE_OUT + "," + SCALE_UP103, DURATION_1, EASING_FUNCTION_2),
    scaleDownOut98: _createAnimation(FADE_OUT + "," + SCALE_DOWN98, DURATION_1, EASING_FUNCTION_2),
    fadeIn100: _createAnimation(FADE_IN, DURATION_1, EASING_FUNCTION_2),
    fadeIn200: _createAnimation(FADE_IN, DURATION_2, EASING_FUNCTION_2),
    fadeIn400: _createAnimation(FADE_IN, DURATION_3, EASING_FUNCTION_2),
    fadeIn500: _createAnimation(FADE_IN, DURATION_4, EASING_FUNCTION_2),
    fadeOut100: _createAnimation(FADE_OUT, DURATION_1, EASING_FUNCTION_2),
    fadeOut200: _createAnimation(FADE_OUT, DURATION_2, EASING_FUNCTION_2),
    fadeOut400: _createAnimation(FADE_OUT, DURATION_3, EASING_FUNCTION_2),
    fadeOut500: _createAnimation(FADE_OUT, DURATION_4, EASING_FUNCTION_2),
    rotate90deg: _createAnimation(ROTATE90, "0.1s", EASING_FUNCTION_2),
    rotateN90deg: _createAnimation(ROTATE_N90, "0.1s", EASING_FUNCTION_2)
  };
  function _createAnimation(animationName, animationDuration, animationTimingFunction) {
    return {
      animationName,
      animationDuration,
      animationTimingFunction,
      animationFillMode: "both"
    };
  }
  function _createSlideInX(fromX) {
    return keyframes({
      from: { transform: "translate3d(" + fromX + "px,0,0)", pointerEvents: "none" },
      to: { transform: "translate3d(0,0,0)", pointerEvents: "auto" }
    });
  }
  function _createSlideInY(fromY) {
    return keyframes({
      from: { transform: "translate3d(0," + fromY + "px,0)", pointerEvents: "none" },
      to: { transform: "translate3d(0,0,0)", pointerEvents: "auto" }
    });
  }
  function _createSlideOutX(toX) {
    return keyframes({
      from: { transform: "translate3d(0,0,0)" },
      to: { transform: "translate3d(" + toX + "px,0,0)" }
    });
  }
  function _createSlideOutY(toY) {
    return keyframes({
      from: { transform: "translate3d(0,0,0)" },
      to: { transform: "translate3d(0," + toY + "px,0)" }
    });
  }

  // node_modules/@fluentui/theme/lib/fonts/FluentFonts.js
  var LocalizedFontNames;
  (function(LocalizedFontNames2) {
    LocalizedFontNames2.Arabic = "Segoe UI Web (Arabic)";
    LocalizedFontNames2.Cyrillic = "Segoe UI Web (Cyrillic)";
    LocalizedFontNames2.EastEuropean = "Segoe UI Web (East European)";
    LocalizedFontNames2.Greek = "Segoe UI Web (Greek)";
    LocalizedFontNames2.Hebrew = "Segoe UI Web (Hebrew)";
    LocalizedFontNames2.Thai = "Leelawadee UI Web";
    LocalizedFontNames2.Vietnamese = "Segoe UI Web (Vietnamese)";
    LocalizedFontNames2.WestEuropean = "Segoe UI Web (West European)";
    LocalizedFontNames2.Selawik = "Selawik Web";
    LocalizedFontNames2.Armenian = "Segoe UI Web (Armenian)";
    LocalizedFontNames2.Georgian = "Segoe UI Web (Georgian)";
  })(LocalizedFontNames || (LocalizedFontNames = {}));
  var LocalizedFontFamilies;
  (function(LocalizedFontFamilies2) {
    LocalizedFontFamilies2.Arabic = "'" + LocalizedFontNames.Arabic + "'";
    LocalizedFontFamilies2.ChineseSimplified = "'Microsoft Yahei UI', Verdana, Simsun";
    LocalizedFontFamilies2.ChineseTraditional = "'Microsoft Jhenghei UI', Pmingliu";
    LocalizedFontFamilies2.Cyrillic = "'" + LocalizedFontNames.Cyrillic + "'";
    LocalizedFontFamilies2.EastEuropean = "'" + LocalizedFontNames.EastEuropean + "'";
    LocalizedFontFamilies2.Greek = "'" + LocalizedFontNames.Greek + "'";
    LocalizedFontFamilies2.Hebrew = "'" + LocalizedFontNames.Hebrew + "'";
    LocalizedFontFamilies2.Hindi = "'Nirmala UI'";
    LocalizedFontFamilies2.Japanese = "'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka";
    LocalizedFontFamilies2.Korean = "'Malgun Gothic', Gulim";
    LocalizedFontFamilies2.Selawik = "'" + LocalizedFontNames.Selawik + "'";
    LocalizedFontFamilies2.Thai = "'Leelawadee UI Web', 'Kmer UI'";
    LocalizedFontFamilies2.Vietnamese = "'" + LocalizedFontNames.Vietnamese + "'";
    LocalizedFontFamilies2.WestEuropean = "'" + LocalizedFontNames.WestEuropean + "'";
    LocalizedFontFamilies2.Armenian = "'" + LocalizedFontNames.Armenian + "'";
    LocalizedFontFamilies2.Georgian = "'" + LocalizedFontNames.Georgian + "'";
  })(LocalizedFontFamilies || (LocalizedFontFamilies = {}));
  var FontSizes;
  (function(FontSizes2) {
    FontSizes2.size10 = "10px";
    FontSizes2.size12 = "12px";
    FontSizes2.size14 = "14px";
    FontSizes2.size16 = "16px";
    FontSizes2.size18 = "18px";
    FontSizes2.size20 = "20px";
    FontSizes2.size24 = "24px";
    FontSizes2.size28 = "28px";
    FontSizes2.size32 = "32px";
    FontSizes2.size42 = "42px";
    FontSizes2.size68 = "68px";
    FontSizes2.mini = "10px";
    FontSizes2.xSmall = "10px";
    FontSizes2.small = "12px";
    FontSizes2.smallPlus = "12px";
    FontSizes2.medium = "14px";
    FontSizes2.mediumPlus = "16px";
    FontSizes2.icon = "16px";
    FontSizes2.large = "18px";
    FontSizes2.xLarge = "20px";
    FontSizes2.xLargePlus = "24px";
    FontSizes2.xxLarge = "28px";
    FontSizes2.xxLargePlus = "32px";
    FontSizes2.superLarge = "42px";
    FontSizes2.mega = "68px";
  })(FontSizes || (FontSizes = {}));
  var FontWeights;
  (function(FontWeights2) {
    FontWeights2.light = 100;
    FontWeights2.semilight = 300;
    FontWeights2.regular = 400;
    FontWeights2.semibold = 600;
    FontWeights2.bold = 700;
  })(FontWeights || (FontWeights = {}));
  var IconFontSizes;
  (function(IconFontSizes2) {
    IconFontSizes2.xSmall = "10px";
    IconFontSizes2.small = "12px";
    IconFontSizes2.medium = "16px";
    IconFontSizes2.large = "20px";
  })(IconFontSizes || (IconFontSizes = {}));

  // node_modules/@fluentui/theme/lib/fonts/createFontStyles.js
  var FontFamilyFallbacks = "'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif";
  var defaultFontFamily = "'Segoe UI', '" + LocalizedFontNames.WestEuropean + "'";
  var LanguageToFontMap = {
    ar: LocalizedFontFamilies.Arabic,
    bg: LocalizedFontFamilies.Cyrillic,
    cs: LocalizedFontFamilies.EastEuropean,
    el: LocalizedFontFamilies.Greek,
    et: LocalizedFontFamilies.EastEuropean,
    he: LocalizedFontFamilies.Hebrew,
    hi: LocalizedFontFamilies.Hindi,
    hr: LocalizedFontFamilies.EastEuropean,
    hu: LocalizedFontFamilies.EastEuropean,
    ja: LocalizedFontFamilies.Japanese,
    kk: LocalizedFontFamilies.EastEuropean,
    ko: LocalizedFontFamilies.Korean,
    lt: LocalizedFontFamilies.EastEuropean,
    lv: LocalizedFontFamilies.EastEuropean,
    pl: LocalizedFontFamilies.EastEuropean,
    ru: LocalizedFontFamilies.Cyrillic,
    sk: LocalizedFontFamilies.EastEuropean,
    "sr-latn": LocalizedFontFamilies.EastEuropean,
    th: LocalizedFontFamilies.Thai,
    tr: LocalizedFontFamilies.EastEuropean,
    uk: LocalizedFontFamilies.Cyrillic,
    vi: LocalizedFontFamilies.Vietnamese,
    "zh-hans": LocalizedFontFamilies.ChineseSimplified,
    "zh-hant": LocalizedFontFamilies.ChineseTraditional,
    hy: LocalizedFontFamilies.Armenian,
    ka: LocalizedFontFamilies.Georgian
  };
  function _fontFamilyWithFallbacks(fontFamily) {
    return fontFamily + ", " + FontFamilyFallbacks;
  }
  function _getLocalizedFontFamily(language) {
    for (var lang in LanguageToFontMap) {
      if (LanguageToFontMap.hasOwnProperty(lang) && language && lang.indexOf(language) === 0) {
        return LanguageToFontMap[lang];
      }
    }
    return defaultFontFamily;
  }
  function _createFont(size, weight, fontFamily) {
    return {
      fontFamily,
      MozOsxFontSmoothing: "grayscale",
      WebkitFontSmoothing: "antialiased",
      fontSize: size,
      fontWeight: weight
    };
  }
  function createFontStyles(localeCode) {
    var localizedFont = _getLocalizedFontFamily(localeCode);
    var fontFamilyWithFallback = _fontFamilyWithFallbacks(localizedFont);
    var fontStyles = {
      tiny: _createFont(FontSizes.mini, FontWeights.regular, fontFamilyWithFallback),
      xSmall: _createFont(FontSizes.xSmall, FontWeights.regular, fontFamilyWithFallback),
      small: _createFont(FontSizes.small, FontWeights.regular, fontFamilyWithFallback),
      smallPlus: _createFont(FontSizes.smallPlus, FontWeights.regular, fontFamilyWithFallback),
      medium: _createFont(FontSizes.medium, FontWeights.regular, fontFamilyWithFallback),
      mediumPlus: _createFont(FontSizes.mediumPlus, FontWeights.regular, fontFamilyWithFallback),
      large: _createFont(FontSizes.large, FontWeights.regular, fontFamilyWithFallback),
      xLarge: _createFont(FontSizes.xLarge, FontWeights.semibold, fontFamilyWithFallback),
      xLargePlus: _createFont(FontSizes.xLargePlus, FontWeights.semibold, fontFamilyWithFallback),
      xxLarge: _createFont(FontSizes.xxLarge, FontWeights.semibold, fontFamilyWithFallback),
      xxLargePlus: _createFont(FontSizes.xxLargePlus, FontWeights.semibold, fontFamilyWithFallback),
      superLarge: _createFont(FontSizes.superLarge, FontWeights.semibold, fontFamilyWithFallback),
      mega: _createFont(FontSizes.mega, FontWeights.semibold, fontFamilyWithFallback)
    };
    return fontStyles;
  }

  // node_modules/@fluentui/theme/lib/fonts/DefaultFontStyles.js
  var DefaultBaseUrl = "https://static2.sharepointonline.com/files/fabric/assets";
  var DefaultFontStyles = createFontStyles(getLanguage());
  function _registerFontFace(fontFamily, url, fontWeight, localFontName) {
    fontFamily = "'" + fontFamily + "'";
    var localFontSrc = localFontName !== void 0 ? "local('" + localFontName + "')," : "";
    fontFace({
      fontFamily,
      src: localFontSrc + ("url('" + url + ".woff2') format('woff2'),") + ("url('" + url + ".woff') format('woff')"),
      fontWeight,
      fontStyle: "normal",
      fontDisplay: "swap"
    });
  }
  function _registerFontFaceSet(baseUrl, fontFamily, cdnFolder, cdnFontName, localFontName) {
    if (cdnFontName === void 0) {
      cdnFontName = "segoeui";
    }
    var urlBase = baseUrl + "/" + cdnFolder + "/" + cdnFontName;
    _registerFontFace(fontFamily, urlBase + "-light", FontWeights.light, localFontName && localFontName + " Light");
    _registerFontFace(fontFamily, urlBase + "-semilight", FontWeights.semilight, localFontName && localFontName + " SemiLight");
    _registerFontFace(fontFamily, urlBase + "-regular", FontWeights.regular, localFontName);
    _registerFontFace(fontFamily, urlBase + "-semibold", FontWeights.semibold, localFontName && localFontName + " SemiBold");
    _registerFontFace(fontFamily, urlBase + "-bold", FontWeights.bold, localFontName && localFontName + " Bold");
  }
  function registerDefaultFontFaces(baseUrl) {
    if (baseUrl) {
      var fontUrl = baseUrl + "/fonts";
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Thai, "leelawadeeui-thai", "leelawadeeui");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Arabic, "segoeui-arabic");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Cyrillic, "segoeui-cyrillic");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.EastEuropean, "segoeui-easteuropean");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Greek, "segoeui-greek");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Hebrew, "segoeui-hebrew");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Vietnamese, "segoeui-vietnamese");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.WestEuropean, "segoeui-westeuropean", "segoeui", "Segoe UI");
      _registerFontFaceSet(fontUrl, LocalizedFontFamilies.Selawik, "selawik", "selawik");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Armenian, "segoeui-armenian");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Georgian, "segoeui-georgian");
      _registerFontFace("Leelawadee UI Web", fontUrl + "/leelawadeeui-thai/leelawadeeui-semilight", FontWeights.light);
      _registerFontFace("Leelawadee UI Web", fontUrl + "/leelawadeeui-thai/leelawadeeui-bold", FontWeights.semibold);
    }
  }
  function _getFontBaseUrl() {
    var _a6, _b;
    var fabricConfig = (_a6 = getWindow()) === null || _a6 === void 0 ? void 0 : _a6.FabricConfig;
    return (_b = fabricConfig === null || fabricConfig === void 0 ? void 0 : fabricConfig.fontBaseUrl) !== null && _b !== void 0 ? _b : DefaultBaseUrl;
  }
  registerDefaultFontFaces(_getFontBaseUrl());

  // node_modules/@fluentui/theme/lib/createTheme.js
  function createTheme(theme, depComments) {
    if (theme === void 0) {
      theme = {};
    }
    if (depComments === void 0) {
      depComments = false;
    }
    var isInverted = !!theme.isInverted;
    var baseTheme = {
      palette: DefaultPalette,
      effects: DefaultEffects,
      fonts: DefaultFontStyles,
      spacing: DefaultSpacing,
      isInverted,
      disableGlobalClassNames: false,
      semanticColors: makeSemanticColors(DefaultPalette, DefaultEffects, void 0, isInverted, depComments),
      rtl: void 0
    };
    return mergeThemes(baseTheme, theme);
  }

  // node_modules/@fluentui/style-utilities/lib/styles/CommonStyles.js
  var HighContrastSelector = "@media screen and (-ms-high-contrast: active), screen and (forced-colors: active)";
  var ScreenWidthMinMedium = 480;
  var ScreenWidthMinLarge = 640;
  var ScreenWidthMinXLarge = 1024;
  var ScreenWidthMinXXLarge = 1366;
  var ScreenWidthMinXXXLarge = 1920;
  var ScreenWidthMaxSmall = ScreenWidthMinMedium - 1;
  var ScreenWidthMaxMedium = ScreenWidthMinLarge - 1;
  var ScreenWidthMaxLarge = ScreenWidthMinXLarge - 1;
  var ScreenWidthMaxXLarge = ScreenWidthMinXXLarge - 1;
  var ScreenWidthMaxXXLarge = ScreenWidthMinXXXLarge - 1;
  function getScreenSelector(min, max) {
    var minSelector = typeof min === "number" ? " and (min-width: " + min + "px)" : "";
    var maxSelector = typeof max === "number" ? " and (max-width: " + max + "px)" : "";
    return "@media only screen" + minSelector + maxSelector;
  }
  function getHighContrastNoAdjustStyle() {
    return {
      forcedColorAdjust: "none",
      MsHighContrastAdjust: "none"
    };
  }

  // node_modules/@fluentui/style-utilities/lib/styles/zIndexes.js
  var ZIndexes;
  (function(ZIndexes2) {
    ZIndexes2.Nav = 1;
    ZIndexes2.ScrollablePane = 1;
    ZIndexes2.FocusStyle = 1;
    ZIndexes2.Coachmark = 1e3;
    ZIndexes2.Layer = 1e6;
    ZIndexes2.KeytipLayer = 1000001;
  })(ZIndexes || (ZIndexes = {}));

  // node_modules/@fluentui/style-utilities/lib/styles/getFocusStyle.js
  function getFocusStyle(theme, insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly, borderRadius) {
    if (typeof insetOrOptions === "number" || !insetOrOptions) {
      return _getFocusStyleInternal(theme, {
        inset: insetOrOptions,
        position,
        highContrastStyle,
        borderColor,
        outlineColor,
        isFocusedOnly,
        borderRadius
      });
    } else {
      return _getFocusStyleInternal(theme, insetOrOptions);
    }
  }
  function _getFocusStyleInternal(theme, options) {
    var _a6, _b;
    if (options === void 0) {
      options = {};
    }
    var borderRadius = options.borderRadius, _c = options.inset, inset = _c === void 0 ? 0 : _c, _d = options.width, width = _d === void 0 ? 1 : _d, _e2 = options.position, position = _e2 === void 0 ? "relative" : _e2, highContrastStyle = options.highContrastStyle, _f = options.borderColor, borderColor = _f === void 0 ? theme.palette.white : _f, _g = options.outlineColor, outlineColor = _g === void 0 ? theme.palette.neutralSecondary : _g, _h = options.isFocusedOnly, isFocusedOnly = _h === void 0 ? true : _h;
    return {
      outline: "transparent",
      position,
      selectors: (_a6 = {
        "::-moz-focus-inner": {
          border: "0"
        }
      }, _a6["." + IsFocusVisibleClassName + " &" + (isFocusedOnly ? ":focus" : "") + ":after"] = {
        content: '""',
        position: "absolute",
        left: inset + 1,
        top: inset + 1,
        bottom: inset + 1,
        right: inset + 1,
        border: width + "px solid " + borderColor,
        outline: width + "px solid " + outlineColor,
        zIndex: ZIndexes.FocusStyle,
        borderRadius,
        selectors: (_b = {}, _b[HighContrastSelector] = highContrastStyle, _b)
      }, _a6)
    };
  }
  function focusClear() {
    return {
      selectors: {
        "&::-moz-focus-inner": {
          border: 0
        },
        "&": {
          outline: "transparent"
        }
      }
    };
  }

  // node_modules/@fluentui/style-utilities/lib/styles/hiddenContentStyle.js
  var hiddenContentStyle = {
    position: "absolute",
    width: 1,
    height: 1,
    margin: -1,
    padding: 0,
    border: 0,
    overflow: "hidden",
    whiteSpace: "nowrap"
  };

  // node_modules/@fluentui/style-utilities/lib/styles/getGlobalClassNames.js
  var _getGlobalClassNames = memoizeFunction(function(classNames2, disableGlobalClassNames) {
    var styleSheet = Stylesheet.getInstance();
    if (disableGlobalClassNames) {
      return Object.keys(classNames2).reduce(function(acc, className) {
        acc[className] = styleSheet.getClassName(classNames2[className]);
        return acc;
      }, {});
    }
    return classNames2;
  });
  function getGlobalClassNames(classNames2, theme, disableGlobalClassNames) {
    return _getGlobalClassNames(classNames2, disableGlobalClassNames !== void 0 ? disableGlobalClassNames : theme.disableGlobalClassNames);
  }

  // node_modules/@microsoft/load-themed-styles/lib-es6/index.js
  var __assign5 = function() {
    __assign5 = Object.assign || function(t2) {
      for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2))
            t2[p2] = s2[p2];
      }
      return t2;
    };
    return __assign5.apply(this, arguments);
  };
  var _root = typeof window === "undefined" ? global : window;
  var _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;
  var _themeState = initializeThemeState();
  function initializeThemeState() {
    var state = _root.__themeState__ || {
      theme: void 0,
      lastStyleElement: void 0,
      registeredStyles: []
    };
    if (!state.runState) {
      state = __assign5(__assign5({}, state), { perf: {
        count: 0,
        duration: 0
      }, runState: {
        flushTimer: 0,
        mode: 0,
        buffer: []
      } });
    }
    if (!state.registeredThemableStyles) {
      state = __assign5(__assign5({}, state), { registeredThemableStyles: [] });
    }
    _root.__themeState__ = state;
    return state;
  }
  function applyThemableStyles(stylesArray, styleRecord) {
    if (_themeState.loadStyles) {
      _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);
    } else {
      registerStyles(stylesArray);
    }
  }
  function loadTheme(theme) {
    _themeState.theme = theme;
    reloadStyles();
  }
  function clearStyles(option) {
    if (option === void 0) {
      option = 3;
    }
    if (option === 3 || option === 2) {
      clearStylesInternal(_themeState.registeredStyles);
      _themeState.registeredStyles = [];
    }
    if (option === 3 || option === 1) {
      clearStylesInternal(_themeState.registeredThemableStyles);
      _themeState.registeredThemableStyles = [];
    }
  }
  function clearStylesInternal(records) {
    records.forEach(function(styleRecord) {
      var styleElement = styleRecord && styleRecord.styleElement;
      if (styleElement && styleElement.parentElement) {
        styleElement.parentElement.removeChild(styleElement);
      }
    });
  }
  function reloadStyles() {
    if (_themeState.theme) {
      var themableStyles = [];
      for (var _i = 0, _a6 = _themeState.registeredThemableStyles; _i < _a6.length; _i++) {
        var styleRecord = _a6[_i];
        themableStyles.push(styleRecord.themableStyle);
      }
      if (themableStyles.length > 0) {
        clearStyles(1);
        applyThemableStyles([].concat.apply([], themableStyles));
      }
    }
  }
  function resolveThemableArray(splitStyleArray) {
    var theme = _themeState.theme;
    var themable = false;
    var resolvedArray = (splitStyleArray || []).map(function(currentValue) {
      var themeSlot = currentValue.theme;
      if (themeSlot) {
        themable = true;
        var themedValue = theme ? theme[themeSlot] : void 0;
        var defaultValue = currentValue.defaultValue || "inherit";
        if (theme && !themedValue && console && !(themeSlot in theme) && typeof DEBUG !== "undefined" && DEBUG) {
          console.warn('Theming value not provided for "'.concat(themeSlot, '". Falling back to "').concat(defaultValue, '".'));
        }
        return themedValue || defaultValue;
      } else {
        return currentValue.rawString;
      }
    });
    return {
      styleString: resolvedArray.join(""),
      themable
    };
  }
  function registerStyles(styleArray) {
    if (typeof document === "undefined") {
      return;
    }
    var head = document.getElementsByTagName("head")[0];
    var styleElement = document.createElement("style");
    var _a6 = resolveThemableArray(styleArray), styleString = _a6.styleString, themable = _a6.themable;
    styleElement.setAttribute("data-load-themed-styles", "true");
    if (_styleNonce) {
      styleElement.setAttribute("nonce", _styleNonce);
    }
    styleElement.appendChild(document.createTextNode(styleString));
    _themeState.perf.count++;
    head.appendChild(styleElement);
    var ev = document.createEvent("HTMLEvents");
    ev.initEvent("styleinsert", true, false);
    ev.args = {
      newStyle: styleElement
    };
    document.dispatchEvent(ev);
    var record = {
      styleElement,
      themableStyle: styleArray
    };
    if (themable) {
      _themeState.registeredThemableStyles.push(record);
    } else {
      _themeState.registeredStyles.push(record);
    }
  }

  // node_modules/@fluentui/style-utilities/lib/styles/theme.js
  var _theme = createTheme({});
  var _onThemeChangeCallbacks = [];
  var ThemeSettingName = "theme";
  function initializeThemeInCustomizations() {
    var _a6;
    var _b, _c;
    var win = getWindow();
    if ((_b = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _b === void 0 ? void 0 : _b.legacyTheme) {
      loadTheme2(win.FabricConfig.legacyTheme);
    } else if (!Customizations.getSettings([ThemeSettingName]).theme) {
      if ((_c = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _c === void 0 ? void 0 : _c.theme) {
        _theme = createTheme(win.FabricConfig.theme);
      }
      Customizations.applySettings((_a6 = {}, _a6[ThemeSettingName] = _theme, _a6));
    }
  }
  initializeThemeInCustomizations();
  function getTheme(depComments) {
    if (depComments === void 0) {
      depComments = false;
    }
    if (depComments === true) {
      _theme = createTheme({}, depComments);
    }
    return _theme;
  }
  function loadTheme2(theme, depComments) {
    var _a6;
    if (depComments === void 0) {
      depComments = false;
    }
    _theme = createTheme(theme, depComments);
    loadTheme(__assign2(__assign2(__assign2(__assign2({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));
    Customizations.applySettings((_a6 = {}, _a6[ThemeSettingName] = _theme, _a6));
    _onThemeChangeCallbacks.forEach(function(callback) {
      try {
        callback(_theme);
      } catch (e2) {
      }
    });
    return _theme;
  }
  function _loadFonts(theme) {
    var lines = {};
    for (var _i = 0, _a6 = Object.keys(theme.fonts); _i < _a6.length; _i++) {
      var fontName = _a6[_i];
      var font = theme.fonts[fontName];
      for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {
        var propName = _c[_b];
        var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);
        var value = font[propName];
        if (propName === "fontSize" && typeof value === "number") {
          value = value + "px";
        }
        lines[name_1] = value;
      }
    }
    return lines;
  }

  // node_modules/@fluentui/style-utilities/lib/classNames/AnimationClassNames.js
  var AnimationClassNames = buildClassMap(AnimationStyles);

  // node_modules/@fluentui/style-utilities/lib/version.js
  setVersion("@fluentui/style-utilities", "8.8.1");

  // node_modules/@fluentui/style-utilities/lib/index.js
  initializeThemeInCustomizations();

  // node_modules/@fluentui/react/node_modules/tslib/modules/index.js
  var import_tslib19 = __toESM(require_tslib5(), 1);
  var {
    __extends: __extends5,
    __assign: __assign6,
    __rest: __rest5,
    __decorate: __decorate5,
    __param: __param5,
    __metadata: __metadata5,
    __awaiter: __awaiter5,
    __generator: __generator5,
    __exportStar: __exportStar5,
    __createBinding: __createBinding5,
    __values: __values6,
    __read: __read6,
    __spread: __spread5,
    __spreadArrays: __spreadArrays5,
    __spreadArray: __spreadArray5,
    __await: __await5,
    __asyncGenerator: __asyncGenerator5,
    __asyncDelegator: __asyncDelegator5,
    __asyncValues: __asyncValues5,
    __makeTemplateObject: __makeTemplateObject5,
    __importStar: __importStar5,
    __importDefault: __importDefault5,
    __classPrivateFieldGet: __classPrivateFieldGet5,
    __classPrivateFieldSet: __classPrivateFieldSet5,
    __classPrivateFieldIn: __classPrivateFieldIn5
  } = import_tslib19.default;

  // node_modules/@fluentui/react/lib/components/Callout/Callout.js
  var React25 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/components/Callout/CalloutContent.base.js
  var React21 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/common/DirectionalHint.js
  var DirectionalHint = {
    topLeftEdge: 0,
    topCenter: 1,
    topRightEdge: 2,
    topAutoEdge: 3,
    bottomLeftEdge: 4,
    bottomCenter: 5,
    bottomRightEdge: 6,
    bottomAutoEdge: 7,
    leftTopEdge: 8,
    leftCenter: 9,
    leftBottomEdge: 10,
    rightTopEdge: 11,
    rightCenter: 12,
    rightBottomEdge: 13
  };

  // node_modules/@fluentui/react/lib/utilities/positioning/positioning.types.js
  var RectangleEdge;
  (function(RectangleEdge2) {
    RectangleEdge2[RectangleEdge2["top"] = 1] = "top";
    RectangleEdge2[RectangleEdge2["bottom"] = -1] = "bottom";
    RectangleEdge2[RectangleEdge2["left"] = 2] = "left";
    RectangleEdge2[RectangleEdge2["right"] = -2] = "right";
  })(RectangleEdge || (RectangleEdge = {}));
  var Position;
  (function(Position2) {
    Position2[Position2["top"] = 0] = "top";
    Position2[Position2["bottom"] = 1] = "bottom";
    Position2[Position2["start"] = 2] = "start";
    Position2[Position2["end"] = 3] = "end";
  })(Position || (Position = {}));

  // node_modules/@fluentui/react/lib/utilities/positioning/positioning.js
  var _a4;
  function _createPositionData(targetEdge, alignmentEdge, isAuto) {
    return {
      targetEdge,
      alignmentEdge,
      isAuto
    };
  }
  var DirectionalDictionary = (_a4 = {}, _a4[DirectionalHint.topLeftEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.left), _a4[DirectionalHint.topCenter] = _createPositionData(RectangleEdge.top), _a4[DirectionalHint.topRightEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.right), _a4[DirectionalHint.topAutoEdge] = _createPositionData(RectangleEdge.top, void 0, true), _a4[DirectionalHint.bottomLeftEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.left), _a4[DirectionalHint.bottomCenter] = _createPositionData(RectangleEdge.bottom), _a4[DirectionalHint.bottomRightEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.right), _a4[DirectionalHint.bottomAutoEdge] = _createPositionData(RectangleEdge.bottom, void 0, true), _a4[DirectionalHint.leftTopEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.top), _a4[DirectionalHint.leftCenter] = _createPositionData(RectangleEdge.left), _a4[DirectionalHint.leftBottomEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.bottom), _a4[DirectionalHint.rightTopEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.top), _a4[DirectionalHint.rightCenter] = _createPositionData(RectangleEdge.right), _a4[DirectionalHint.rightBottomEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.bottom), _a4);
  function _isRectangleWithinBounds(rect, boundingRect) {
    if (rect.top < boundingRect.top) {
      return false;
    }
    if (rect.bottom > boundingRect.bottom) {
      return false;
    }
    if (rect.left < boundingRect.left) {
      return false;
    }
    if (rect.right > boundingRect.right) {
      return false;
    }
    return true;
  }
  function _getOutOfBoundsEdges(rect, boundingRect) {
    var outOfBounds = [];
    if (rect.top < boundingRect.top) {
      outOfBounds.push(RectangleEdge.top);
    }
    if (rect.bottom > boundingRect.bottom) {
      outOfBounds.push(RectangleEdge.bottom);
    }
    if (rect.left < boundingRect.left) {
      outOfBounds.push(RectangleEdge.left);
    }
    if (rect.right > boundingRect.right) {
      outOfBounds.push(RectangleEdge.right);
    }
    return outOfBounds;
  }
  function _getEdgeValue(rect, edge) {
    return rect[RectangleEdge[edge]];
  }
  function _setEdgeValue(rect, edge, value) {
    rect[RectangleEdge[edge]] = value;
    return rect;
  }
  function _getCenterValue(rect, edge) {
    var edges = _getFlankingEdges(edge);
    return (_getEdgeValue(rect, edges.positiveEdge) + _getEdgeValue(rect, edges.negativeEdge)) / 2;
  }
  function _getRelativeEdgeValue(edge, value) {
    if (edge > 0) {
      return value;
    } else {
      return value * -1;
    }
  }
  function _getRelativeRectEdgeValue(edge, rect) {
    return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));
  }
  function _getRelativeEdgeDifference(rect, hostRect, edge) {
    var edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);
    return _getRelativeEdgeValue(edge, edgeDifference);
  }
  function _moveEdge(rect, edge, newValue, maintainSize) {
    if (maintainSize === void 0) {
      maintainSize = true;
    }
    var difference = _getEdgeValue(rect, edge) - newValue;
    var returnRect = _setEdgeValue(rect, edge, newValue);
    if (maintainSize) {
      returnRect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);
    }
    return returnRect;
  }
  function _alignEdges(rect, target, edge, gap) {
    if (gap === void 0) {
      gap = 0;
    }
    return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap));
  }
  function _alignOppositeEdges(rect, target, targetEdge, gap) {
    if (gap === void 0) {
      gap = 0;
    }
    var oppositeEdge = targetEdge * -1;
    var adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap);
    return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);
  }
  function _isEdgeInBounds(rect, bounds, edge) {
    var adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);
    return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);
  }
  function _getOutOfBoundsDegree(rect, bounds) {
    var breakingEdges = _getOutOfBoundsEdges(rect, bounds);
    var total = 0;
    for (var _i = 0, breakingEdges_1 = breakingEdges; _i < breakingEdges_1.length; _i++) {
      var edge = breakingEdges_1[_i];
      total += Math.pow(_getRelativeEdgeDifference(rect, bounds, edge), 2);
    }
    return total;
  }
  function _flipToFit(rect, target, bounding, positionData, gap) {
    if (gap === void 0) {
      gap = 0;
    }
    var directions = [
      RectangleEdge.left,
      RectangleEdge.right,
      RectangleEdge.bottom,
      RectangleEdge.top
    ];
    if (getRTL2()) {
      directions[0] *= -1;
      directions[1] *= -1;
    }
    var currentEstimate = rect;
    var currentEdge = positionData.targetEdge;
    var currentAlignment = positionData.alignmentEdge;
    var oobDegree;
    var bestEdge = currentEdge;
    var bestAlignment = currentAlignment;
    for (var i2 = 0; i2 < 4; i2++) {
      if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {
        var currentOOBDegree = _getOutOfBoundsDegree(currentEstimate, bounding);
        if (!oobDegree || currentOOBDegree < oobDegree) {
          oobDegree = currentOOBDegree;
          bestEdge = currentEdge;
          bestAlignment = currentAlignment;
        }
        directions.splice(directions.indexOf(currentEdge), 1);
        if (directions.length > 0) {
          if (directions.indexOf(currentEdge * -1) > -1) {
            currentEdge = currentEdge * -1;
          } else {
            currentAlignment = currentEdge;
            currentEdge = directions.slice(-1)[0];
          }
          currentEstimate = _estimatePosition(rect, target, { targetEdge: currentEdge, alignmentEdge: currentAlignment }, gap);
        }
      } else {
        return {
          elementRectangle: currentEstimate,
          targetEdge: currentEdge,
          alignmentEdge: currentAlignment
        };
      }
    }
    currentEstimate = _estimatePosition(rect, target, { targetEdge: bestEdge, alignmentEdge: bestAlignment }, gap);
    return {
      elementRectangle: currentEstimate,
      targetEdge: bestEdge,
      alignmentEdge: bestAlignment
    };
  }
  function _flipAlignmentEdge(elementEstimate, target, gap, coverTarget) {
    var alignmentEdge = elementEstimate.alignmentEdge, targetEdge = elementEstimate.targetEdge, elementRectangle = elementEstimate.elementRectangle;
    var oppositeEdge = alignmentEdge * -1;
    var newEstimate = _estimatePosition(elementRectangle, target, { targetEdge, alignmentEdge: oppositeEdge }, gap, coverTarget);
    return {
      elementRectangle: newEstimate,
      targetEdge,
      alignmentEdge: oppositeEdge
    };
  }
  function _adjustFitWithinBounds(element, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {
    if (gap === void 0) {
      gap = 0;
    }
    var alignmentEdge = positionData.alignmentEdge, alignTargetEdge = positionData.alignTargetEdge;
    var elementEstimate = {
      elementRectangle: element,
      targetEdge: positionData.targetEdge,
      alignmentEdge
    };
    if (!directionalHintFixed && !coverTarget) {
      elementEstimate = _flipToFit(element, target, bounding, positionData, gap);
    }
    var outOfBounds = _getOutOfBoundsEdges(elementEstimate.elementRectangle, bounding);
    var fixedEdge = directionalHintFixed ? -elementEstimate.targetEdge : void 0;
    if (outOfBounds.length > 0) {
      if (alignTargetEdge) {
        if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {
          var flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap, coverTarget);
          if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {
            return flippedElementEstimate;
          } else {
            elementEstimate = _alignOutOfBoundsEdges(_getOutOfBoundsEdges(flippedElementEstimate.elementRectangle, bounding), elementEstimate, bounding, fixedEdge);
          }
        } else {
          elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);
        }
      } else {
        elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);
      }
    }
    return elementEstimate;
  }
  function _alignOutOfBoundsEdges(outOfBoundsEdges, elementEstimate, bounding, preserveEdge) {
    for (var _i = 0, outOfBoundsEdges_1 = outOfBoundsEdges; _i < outOfBoundsEdges_1.length; _i++) {
      var direction = outOfBoundsEdges_1[_i];
      var edgeAttempt = void 0;
      if (preserveEdge && preserveEdge === direction * -1) {
        edgeAttempt = _moveEdge(elementEstimate.elementRectangle, direction, _getEdgeValue(bounding, direction), false);
        elementEstimate.forcedInBounds = true;
      } else {
        edgeAttempt = _alignEdges(elementEstimate.elementRectangle, bounding, direction);
        var inBounds = _isEdgeInBounds(edgeAttempt, bounding, direction * -1);
        if (!inBounds) {
          edgeAttempt = _moveEdge(edgeAttempt, direction * -1, _getEdgeValue(bounding, direction * -1), false);
          elementEstimate.forcedInBounds = true;
        }
      }
      elementEstimate.elementRectangle = edgeAttempt;
    }
    return elementEstimate;
  }
  function _centerEdgeToPoint(rect, edge, point) {
    var positiveEdge = _getFlankingEdges(edge).positiveEdge;
    var elementMiddle = _getCenterValue(rect, edge);
    var distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);
    return _moveEdge(rect, positiveEdge, point - distanceToMiddle);
  }
  function _estimatePosition(elementToPosition, target, positionData, gap, coverTarget) {
    if (gap === void 0) {
      gap = 0;
    }
    var estimatedElementPosition = new Rectangle(elementToPosition.left, elementToPosition.right, elementToPosition.top, elementToPosition.bottom);
    var alignmentEdge = positionData.alignmentEdge, targetEdge = positionData.targetEdge;
    var elementEdge = coverTarget ? targetEdge : targetEdge * -1;
    estimatedElementPosition = coverTarget ? _alignEdges(estimatedElementPosition, target, targetEdge, gap) : _alignOppositeEdges(estimatedElementPosition, target, targetEdge, gap);
    if (!alignmentEdge) {
      var targetMiddlePoint = _getCenterValue(target, targetEdge);
      estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);
    } else {
      estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);
    }
    return estimatedElementPosition;
  }
  function _getFlankingEdges(edge) {
    if (edge === RectangleEdge.top || edge === RectangleEdge.bottom) {
      return {
        positiveEdge: RectangleEdge.left,
        negativeEdge: RectangleEdge.right
      };
    } else {
      return {
        positiveEdge: RectangleEdge.top,
        negativeEdge: RectangleEdge.bottom
      };
    }
  }
  function _finalizeReturnEdge(elementRectangle, returnEdge, bounds) {
    if (bounds && Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) > Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))) {
      return returnEdge * -1;
    }
    return returnEdge;
  }
  function _isEdgeOnBounds(elementRectangle, edge, bounds) {
    return bounds !== void 0 && _getEdgeValue(elementRectangle, edge) === _getEdgeValue(bounds, edge);
  }
  function _finalizeElementPosition(elementRectangle, hostElement, targetEdge, bounds, alignmentEdge, coverTarget, doNotFinalizeReturnEdge, forceWithinBounds) {
    var returnValue = {};
    var hostRect = _getRectangleFromElement(hostElement);
    var elementEdge = coverTarget ? targetEdge : targetEdge * -1;
    var returnEdge = alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge;
    if (!doNotFinalizeReturnEdge || _isEdgeOnBounds(elementRectangle, getOppositeEdge(returnEdge), bounds)) {
      returnEdge = _finalizeReturnEdge(elementRectangle, returnEdge, bounds);
    }
    returnValue[RectangleEdge[elementEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);
    returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge);
    if (forceWithinBounds) {
      returnValue[RectangleEdge[elementEdge * -1]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge * -1);
      returnValue[RectangleEdge[returnEdge * -1]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge * -1);
    }
    return returnValue;
  }
  function _calculateActualBeakWidthInPixels(beakWidth) {
    return Math.sqrt(beakWidth * beakWidth * 2);
  }
  function _getPositionData(directionalHint, directionalHintForRTL, previousPositions) {
    if (directionalHint === void 0) {
      directionalHint = DirectionalHint.bottomAutoEdge;
    }
    if (previousPositions) {
      return {
        alignmentEdge: previousPositions.alignmentEdge,
        isAuto: previousPositions.isAuto,
        targetEdge: previousPositions.targetEdge
      };
    }
    var positionInformation = __assign6({}, DirectionalDictionary[directionalHint]);
    if (getRTL2()) {
      if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {
        positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;
      }
      return directionalHintForRTL !== void 0 ? DirectionalDictionary[directionalHintForRTL] : positionInformation;
    }
    return positionInformation;
  }
  function _getAlignmentData(positionData, target, boundingRect, coverTarget, alignTargetEdge) {
    if (positionData.isAuto) {
      positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);
    }
    positionData.alignTargetEdge = alignTargetEdge;
    return positionData;
  }
  function getClosestEdge(targetEdge, target, boundingRect) {
    var targetCenter = _getCenterValue(target, targetEdge);
    var boundingCenter = _getCenterValue(boundingRect, targetEdge);
    var _a6 = _getFlankingEdges(targetEdge), positiveEdge = _a6.positiveEdge, negativeEdge = _a6.negativeEdge;
    if (targetCenter <= boundingCenter) {
      return positiveEdge;
    } else {
      return negativeEdge;
    }
  }
  function _positionElementWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {
    var estimatedElementPosition = _estimatePosition(elementToPosition, target, positionData, gap, coverTarget);
    if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {
      return {
        elementRectangle: estimatedElementPosition,
        targetEdge: positionData.targetEdge,
        alignmentEdge: positionData.alignmentEdge
      };
    } else {
      return _adjustFitWithinBounds(estimatedElementPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget);
    }
  }
  function _finalizeBeakPosition(elementPosition, positionedBeak, bounds) {
    var targetEdge = elementPosition.targetEdge * -1;
    var actualElement = new Rectangle(0, elementPosition.elementRectangle.width, 0, elementPosition.elementRectangle.height);
    var returnValue = {};
    var returnEdge = _finalizeReturnEdge(elementPosition.elementRectangle, elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge, bounds);
    var beakEdgeDifference = _getRelativeEdgeDifference(elementPosition.elementRectangle, elementPosition.targetRectangle, targetEdge);
    var showBeak = beakEdgeDifference > Math.abs(_getEdgeValue(positionedBeak, targetEdge));
    returnValue[RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);
    returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);
    return {
      elementPosition: __assign6({}, returnValue),
      closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),
      targetEdge,
      hideBeak: !showBeak
    };
  }
  function _positionBeak(beakWidth, elementPosition) {
    var target = elementPosition.targetRectangle;
    var _a6 = _getFlankingEdges(elementPosition.targetEdge), positiveEdge = _a6.positiveEdge, negativeEdge = _a6.negativeEdge;
    var beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);
    var elementBounds = new Rectangle(beakWidth / 2, elementPosition.elementRectangle.width - beakWidth / 2, beakWidth / 2, elementPosition.elementRectangle.height - beakWidth / 2);
    var beakPosition = new Rectangle(0, beakWidth, 0, beakWidth);
    beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);
    beakPosition = _centerEdgeToPoint(beakPosition, elementPosition.targetEdge * -1, beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle));
    if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {
      beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);
    } else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {
      beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);
    }
    return beakPosition;
  }
  function _getRectangleFromElement(element) {
    var clientRect = element.getBoundingClientRect();
    return new Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);
  }
  function _getRectangleFromIRect(rect) {
    return new Rectangle(rect.left, rect.right, rect.top, rect.bottom);
  }
  function _getTargetRect(bounds, target) {
    var targetRectangle;
    if (target) {
      if (!!target.preventDefault) {
        var ev = target;
        targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);
      } else if (!!target.getBoundingClientRect) {
        targetRectangle = _getRectangleFromElement(target);
      } else {
        var rectOrPoint = target;
        var left = rectOrPoint.left || rectOrPoint.x;
        var top_1 = rectOrPoint.top || rectOrPoint.y;
        var right = rectOrPoint.right || left;
        var bottom = rectOrPoint.bottom || top_1;
        targetRectangle = new Rectangle(left, right, top_1, bottom);
      }
      if (!_isRectangleWithinBounds(targetRectangle, bounds)) {
        var outOfBounds = _getOutOfBoundsEdges(targetRectangle, bounds);
        for (var _i = 0, outOfBounds_1 = outOfBounds; _i < outOfBounds_1.length; _i++) {
          var direction = outOfBounds_1[_i];
          targetRectangle[RectangleEdge[direction]] = bounds[RectangleEdge[direction]];
        }
      }
    } else {
      targetRectangle = new Rectangle(0, 0, 0, 0);
    }
    return targetRectangle;
  }
  function _positionElementRelative(props, elementToPosition, boundingRect, previousPositions) {
    var gap = props.gapSpace ? props.gapSpace : 0;
    var targetRect = _getTargetRect(boundingRect, props.target);
    var positionData = _getAlignmentData(_getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions), targetRect, boundingRect, props.coverTarget, props.alignTargetEdge);
    var positionedElement = _positionElementWithinBounds(_getRectangleFromElement(elementToPosition), targetRect, boundingRect, positionData, gap, props.directionalHintFixed, props.coverTarget);
    return __assign6(__assign6({}, positionedElement), { targetRectangle: targetRect });
  }
  function _finalizePositionData(positionedElement, hostElement, bounds, coverTarget, doNotFinalizeReturnEdge) {
    var finalizedElement = _finalizeElementPosition(positionedElement.elementRectangle, hostElement, positionedElement.targetEdge, bounds, positionedElement.alignmentEdge, coverTarget, doNotFinalizeReturnEdge, positionedElement.forcedInBounds);
    return {
      elementPosition: finalizedElement,
      targetEdge: positionedElement.targetEdge,
      alignmentEdge: positionedElement.alignmentEdge
    };
  }
  function _positionCallout(props, hostElement, callout, previousPositions, doNotFinalizeReturnEdge) {
    var beakWidth = props.isBeakVisible ? props.beakWidth || 0 : 0;
    var gap = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);
    var positionProps = props;
    positionProps.gapSpace = gap;
    var boundingRect = props.bounds ? _getRectangleFromIRect(props.bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);
    var positionedElement = _positionElementRelative(positionProps, callout, boundingRect, previousPositions);
    var beakPositioned = _positionBeak(beakWidth, positionedElement);
    var finalizedBeakPosition = _finalizeBeakPosition(positionedElement, beakPositioned, boundingRect);
    return __assign6(__assign6({}, _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget, doNotFinalizeReturnEdge)), { beakPosition: finalizedBeakPosition });
  }
  function _positionCard(props, hostElement, callout, previousPositions) {
    return _positionCallout(props, hostElement, callout, previousPositions, true);
  }
  function positionCallout(props, hostElement, elementToPosition, previousPositions) {
    return _positionCallout(props, hostElement, elementToPosition, previousPositions);
  }
  function positionCard(props, hostElement, elementToPosition, previousPositions) {
    return _positionCard(props, hostElement, elementToPosition, previousPositions);
  }
  function getOppositeEdge(edge) {
    return edge * -1;
  }
  function _getBoundsFromTargetWindow(target, targetWindow) {
    var segments = void 0;
    if (targetWindow.getWindowSegments) {
      segments = targetWindow.getWindowSegments();
    }
    if (segments === void 0 || segments.length <= 1) {
      return {
        top: 0,
        left: 0,
        right: targetWindow.innerWidth,
        bottom: targetWindow.innerHeight,
        width: targetWindow.innerWidth,
        height: targetWindow.innerHeight
      };
    }
    var x2 = 0;
    var y2 = 0;
    if (target !== null && !!target.getBoundingClientRect) {
      var clientRect = target.getBoundingClientRect();
      x2 = (clientRect.left + clientRect.right) / 2;
      y2 = (clientRect.top + clientRect.bottom) / 2;
    } else if (target !== null) {
      x2 = target.left || target.x;
      y2 = target.top || target.y;
    }
    var bounds = { top: 0, left: 0, right: 0, bottom: 0, width: 0, height: 0 };
    for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
      var segment = segments_1[_i];
      if (x2 && segment.left <= x2 && segment.right >= x2 && y2 && segment.top <= y2 && segment.bottom >= y2) {
        bounds = {
          top: segment.top,
          left: segment.left,
          right: segment.right,
          bottom: segment.bottom,
          width: segment.width,
          height: segment.height
        };
      }
    }
    return bounds;
  }
  function getBoundsFromTargetWindow(target, targetWindow) {
    return _getBoundsFromTargetWindow(target, targetWindow);
  }

  // node_modules/@fluentui/react/lib/components/Popup/Popup.js
  var React20 = __toESM(require_react());

  // node_modules/@fluentui/react-hooks/lib/version.js
  setVersion("@fluentui/react-hooks", "8.6.12");

  // node_modules/@fluentui/react-hooks/lib/useAsync.js
  var React12 = __toESM(require_react());
  function useAsync() {
    var asyncRef = React12.useRef();
    if (!asyncRef.current) {
      asyncRef.current = new Async();
    }
    React12.useEffect(function() {
      return function() {
        var _a6;
        (_a6 = asyncRef.current) === null || _a6 === void 0 ? void 0 : _a6.dispose();
        asyncRef.current = void 0;
      };
    }, []);
    return asyncRef.current;
  }

  // node_modules/@fluentui/react-hooks/lib/useConst.js
  var React13 = __toESM(require_react());
  function useConst(initialValue) {
    var ref = React13.useRef();
    if (ref.current === void 0) {
      ref.current = {
        value: typeof initialValue === "function" ? initialValue() : initialValue
      };
    }
    return ref.current.value;
  }

  // node_modules/@fluentui/react-hooks/lib/useId.js
  var React14 = __toESM(require_react());
  function useId(prefix, providedId) {
    var ref = React14.useRef(providedId);
    if (!ref.current) {
      ref.current = getId(prefix);
    }
    return ref.current;
  }

  // node_modules/@fluentui/react-hooks/node_modules/tslib/modules/index.js
  var import_tslib21 = __toESM(require_tslib6(), 1);
  var {
    __extends: __extends6,
    __assign: __assign7,
    __rest: __rest6,
    __decorate: __decorate6,
    __param: __param6,
    __metadata: __metadata6,
    __awaiter: __awaiter6,
    __generator: __generator6,
    __exportStar: __exportStar6,
    __createBinding: __createBinding6,
    __values: __values7,
    __read: __read7,
    __spread: __spread6,
    __spreadArrays: __spreadArrays6,
    __spreadArray: __spreadArray6,
    __await: __await6,
    __asyncGenerator: __asyncGenerator6,
    __asyncDelegator: __asyncDelegator6,
    __asyncValues: __asyncValues6,
    __makeTemplateObject: __makeTemplateObject6,
    __importStar: __importStar6,
    __importDefault: __importDefault6,
    __classPrivateFieldGet: __classPrivateFieldGet6,
    __classPrivateFieldSet: __classPrivateFieldSet6,
    __classPrivateFieldIn: __classPrivateFieldIn6
  } = import_tslib21.default;

  // node_modules/@fluentui/react-hooks/lib/useMergedRefs.js
  var React15 = __toESM(require_react());
  function useMergedRefs() {
    var refs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      refs[_i] = arguments[_i];
    }
    var mergedCallback = React15.useCallback(function(value) {
      mergedCallback.current = value;
      for (var _i2 = 0, refs_1 = refs; _i2 < refs_1.length; _i2++) {
        var ref = refs_1[_i2];
        if (typeof ref === "function") {
          ref(value);
        } else if (ref) {
          ref.current = value;
        }
      }
    }, __spreadArray6([], refs));
    return mergedCallback;
  }

  // node_modules/@fluentui/react-hooks/lib/useOnEvent.js
  var React16 = __toESM(require_react());
  function useOnEvent(element, eventName, callback, useCapture) {
    var callbackRef = React16.useRef(callback);
    callbackRef.current = callback;
    React16.useEffect(function() {
      var actualElement = element && "current" in element ? element.current : element;
      if (!actualElement) {
        return;
      }
      var dispose = on(actualElement, eventName, function(ev) {
        return callbackRef.current(ev);
      }, useCapture);
      return dispose;
    }, [element, eventName, useCapture]);
  }

  // node_modules/@fluentui/react-hooks/lib/usePrevious.js
  var import_react8 = __toESM(require_react());
  function usePrevious(value) {
    var ref = (0, import_react8.useRef)();
    (0, import_react8.useEffect)(function() {
      ref.current = value;
    });
    return ref.current;
  }

  // node_modules/@fluentui/react-hooks/lib/useTarget.js
  var React18 = __toESM(require_react());

  // node_modules/@fluentui/react-window-provider/lib/WindowProvider.js
  var React17 = __toESM(require_react());
  var WindowContext = React17.createContext({
    window: typeof window === "object" ? window : void 0
  });
  var useWindow = function() {
    return React17.useContext(WindowContext).window;
  };

  // node_modules/@fluentui/react-hooks/lib/useTarget.js
  function useTarget(target, hostElement) {
    var previousTargetProp = React18.useRef();
    var targetRef = React18.useRef(null);
    var targetWindow = useWindow();
    if (!target || target !== previousTargetProp.current || typeof target === "string") {
      var currentElement = hostElement === null || hostElement === void 0 ? void 0 : hostElement.current;
      if (target) {
        if (typeof target === "string") {
          var currentDoc = getDocument(currentElement);
          targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;
        } else if ("stopPropagation" in target) {
          targetRef.current = target;
        } else if ("getBoundingClientRect" in target) {
          targetRef.current = target;
        } else if ("current" in target) {
          targetRef.current = target.current;
        } else {
          targetRef.current = target;
        }
      }
      previousTargetProp.current = target;
    }
    return [targetRef, targetWindow];
  }

  // node_modules/@fluentui/react-hooks/lib/useWarnings.js
  var React19 = __toESM(require_react());
  var warningId = 0;
  function useWarnings(options) {
    if (true) {
      var name_1 = options.name, props = options.props, _a6 = options.other, other = _a6 === void 0 ? [] : _a6, conditionallyRequired = options.conditionallyRequired, deprecations = options.deprecations, mutuallyExclusive = options.mutuallyExclusive, controlledUsage = options.controlledUsage;
      var hasWarnedRef = React19.useRef(false);
      var componentId = useConst(function() {
        return "useWarnings_" + warningId++;
      });
      var oldProps = usePrevious(props);
      if (!hasWarnedRef.current) {
        hasWarnedRef.current = true;
        for (var _i = 0, other_1 = other; _i < other_1.length; _i++) {
          var warning = other_1[_i];
          warn(warning);
        }
        if (conditionallyRequired) {
          for (var _b = 0, conditionallyRequired_1 = conditionallyRequired; _b < conditionallyRequired_1.length; _b++) {
            var req = conditionallyRequired_1[_b];
            warnConditionallyRequiredProps(name_1, props, req.requiredProps, req.conditionalPropName, req.condition);
          }
        }
        deprecations && warnDeprecations(name_1, props, deprecations);
        mutuallyExclusive && warnMutuallyExclusive(name_1, props, mutuallyExclusive);
      }
      controlledUsage && warnControlledUsage(__assign7(__assign7({}, controlledUsage), { componentId, props, componentName: name_1, oldProps }));
    }
  }

  // node_modules/@fluentui/react/lib/components/Popup/Popup.js
  function useScrollbarAsync(props, root2) {
    var async = useAsync();
    var _a6 = React20.useState(false), needsVerticalScrollBarState = _a6[0], setNeedsVerticalScrollBar = _a6[1];
    React20.useEffect(function() {
      async.requestAnimationFrame(function() {
        var _a7;
        if (props.style && props.style.overflowY) {
          return;
        }
        var needsVerticalScrollBar = false;
        if (root2 && root2.current && ((_a7 = root2.current) === null || _a7 === void 0 ? void 0 : _a7.firstElementChild)) {
          var rootHeight = root2.current.clientHeight;
          var firstChildHeight = root2.current.firstElementChild.clientHeight;
          if (rootHeight > 0 && firstChildHeight > rootHeight) {
            needsVerticalScrollBar = firstChildHeight - rootHeight > 1;
          }
        }
        if (needsVerticalScrollBarState !== needsVerticalScrollBar) {
          setNeedsVerticalScrollBar(needsVerticalScrollBar);
        }
      });
      return function() {
        return async.dispose();
      };
    });
    return needsVerticalScrollBarState;
  }
  function defaultFocusRestorer(options) {
    var originalElement = options.originalElement, containsFocus = options.containsFocus;
    if (originalElement && containsFocus && originalElement !== getWindow()) {
      setTimeout(function() {
        var _a6;
        (_a6 = originalElement.focus) === null || _a6 === void 0 ? void 0 : _a6.call(originalElement);
      }, 0);
    }
  }
  function useRestoreFocus(props, root2) {
    var _a6 = props.onRestoreFocus, onRestoreFocus = _a6 === void 0 ? defaultFocusRestorer : _a6;
    var originalFocusedElement = React20.useRef();
    var containsFocus = React20.useRef(false);
    React20.useEffect(function() {
      originalFocusedElement.current = getDocument().activeElement;
      if (doesElementContainFocus(root2.current)) {
        containsFocus.current = true;
      }
      return function() {
        var _a7;
        onRestoreFocus === null || onRestoreFocus === void 0 ? void 0 : onRestoreFocus({
          originalElement: originalFocusedElement.current,
          containsFocus: containsFocus.current,
          documentContainsFocus: ((_a7 = getDocument()) === null || _a7 === void 0 ? void 0 : _a7.hasFocus()) || false
        });
        originalFocusedElement.current = void 0;
      };
    }, []);
    useOnEvent(root2, "focus", React20.useCallback(function() {
      containsFocus.current = true;
    }, []), true);
    useOnEvent(root2, "blur", React20.useCallback(function(ev) {
      if (root2.current && ev.relatedTarget && !root2.current.contains(ev.relatedTarget)) {
        containsFocus.current = false;
      }
    }, []), true);
  }
  function useHideSiblingNodes(props, root2) {
    var shouldHideSiblings = String(props["aria-modal"]).toLowerCase() === "true" && props.enableAriaHiddenSiblings;
    React20.useEffect(function() {
      if (!(shouldHideSiblings && root2.current)) {
        return;
      }
      var unmodalize2 = modalize(root2.current);
      return unmodalize2;
    }, [root2, shouldHideSiblings]);
  }
  var Popup = React20.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var props = getPropsWithDefaults({ shouldRestoreFocus: true, enableAriaHiddenSiblings: true }, propsWithoutDefaults);
    var root2 = React20.useRef();
    var mergedRootRef = useMergedRefs(root2, forwardedRef);
    useHideSiblingNodes(props, root2);
    useRestoreFocus(props, root2);
    var role = props.role, className = props.className, ariaLabel = props.ariaLabel, ariaLabelledBy = props.ariaLabelledBy, ariaDescribedBy = props.ariaDescribedBy, style = props.style, children = props.children, onDismiss = props.onDismiss;
    var needsVerticalScrollBar = useScrollbarAsync(props, root2);
    var onKeyDown = React20.useCallback(function(ev) {
      switch (ev.which) {
        case KeyCodes.escape:
          if (onDismiss) {
            onDismiss(ev);
            ev.preventDefault();
            ev.stopPropagation();
          }
          break;
      }
    }, [onDismiss]);
    var win = useWindow();
    useOnEvent(win, "keydown", onKeyDown);
    return React20.createElement("div", __assign6({ ref: mergedRootRef }, getNativeProps(props, divProperties), { className, role, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy, onKeyDown, style: __assign6({ overflowY: needsVerticalScrollBar ? "scroll" : void 0, outline: "none" }, style) }), children);
  });
  Popup.displayName = "Popup";

  // node_modules/@fluentui/react/lib/components/Callout/CalloutContent.base.js
  var _a5;
  var COMPONENT_NAME = "CalloutContentBase";
  var ANIMATIONS = (_a5 = {}, _a5[RectangleEdge.top] = AnimationClassNames.slideUpIn10, _a5[RectangleEdge.bottom] = AnimationClassNames.slideDownIn10, _a5[RectangleEdge.left] = AnimationClassNames.slideLeftIn10, _a5[RectangleEdge.right] = AnimationClassNames.slideRightIn10, _a5);
  var BEAK_ORIGIN_POSITION = { top: 0, left: 0 };
  var OFF_SCREEN_STYLE = {
    opacity: 0,
    filter: "opacity(0)",
    pointerEvents: "none"
  };
  var ARIA_ROLE_ATTRIBUTES = ["role", "aria-roledescription"];
  var DEFAULT_PROPS = {
    preventDismissOnLostFocus: false,
    preventDismissOnScroll: false,
    preventDismissOnResize: false,
    isBeakVisible: true,
    beakWidth: 16,
    gapSpace: 0,
    minPagePadding: 8,
    directionalHint: DirectionalHint.bottomAutoEdge
  };
  var getClassNames = classNamesFunction({
    disableCaching: true
  });
  function useBounds(_a6, targetRef, targetWindow) {
    var bounds = _a6.bounds, _b = _a6.minPagePadding, minPagePadding = _b === void 0 ? DEFAULT_PROPS.minPagePadding : _b, target = _a6.target;
    var _c = React21.useState(false), targetWindowResized = _c[0], setTargetWindowResized = _c[1];
    var cachedBounds = React21.useRef();
    var getBounds = React21.useCallback(function() {
      if (!cachedBounds.current || targetWindowResized) {
        var currentBounds = typeof bounds === "function" ? targetWindow ? bounds(target, targetWindow) : void 0 : bounds;
        if (!currentBounds && targetWindow) {
          currentBounds = getBoundsFromTargetWindow(targetRef.current, targetWindow);
          currentBounds = {
            top: currentBounds.top + minPagePadding,
            left: currentBounds.left + minPagePadding,
            right: currentBounds.right - minPagePadding,
            bottom: currentBounds.bottom - minPagePadding,
            width: currentBounds.width - minPagePadding * 2,
            height: currentBounds.height - minPagePadding * 2
          };
        }
        cachedBounds.current = currentBounds;
        targetWindowResized && setTargetWindowResized(false);
      }
      return cachedBounds.current;
    }, [bounds, minPagePadding, target, targetRef, targetWindow, targetWindowResized]);
    var async = useAsync();
    useOnEvent(targetWindow, "resize", async.debounce(function() {
      setTargetWindowResized(true);
    }, 500, { leading: true }));
    return getBounds;
  }
  function useMaxHeight(_a6, getBounds, positions) {
    var _b;
    var calloutMaxHeight = _a6.calloutMaxHeight, finalHeight = _a6.finalHeight, directionalHint = _a6.directionalHint, directionalHintFixed = _a6.directionalHintFixed, hidden = _a6.hidden;
    var _c = React21.useState(), maxHeight = _c[0], setMaxHeight = _c[1];
    var _d = (_b = positions === null || positions === void 0 ? void 0 : positions.elementPosition) !== null && _b !== void 0 ? _b : {}, top = _d.top, bottom = _d.bottom;
    React21.useEffect(function() {
      var _a7;
      var _b2 = (_a7 = getBounds()) !== null && _a7 !== void 0 ? _a7 : {}, topBounds = _b2.top, bottomBounds = _b2.bottom;
      if (!calloutMaxHeight && !hidden) {
        if (typeof top === "number" && bottomBounds) {
          setMaxHeight(bottomBounds - top);
        } else if (typeof bottom === "number" && typeof topBounds === "number" && bottomBounds) {
          setMaxHeight(bottomBounds - topBounds - bottom);
        }
      } else if (calloutMaxHeight) {
        setMaxHeight(calloutMaxHeight);
      } else {
        setMaxHeight(void 0);
      }
    }, [bottom, calloutMaxHeight, finalHeight, directionalHint, directionalHintFixed, getBounds, hidden, positions, top]);
    return maxHeight;
  }
  function usePositions(props, hostElement, calloutElement, targetRef, getBounds) {
    var _a6 = React21.useState(), positions = _a6[0], setPositions = _a6[1];
    var positionAttempts = React21.useRef(0);
    var previousTarget = React21.useRef();
    var async = useAsync();
    var hidden = props.hidden, target = props.target, finalHeight = props.finalHeight, calloutMaxHeight = props.calloutMaxHeight, onPositioned = props.onPositioned, directionalHint = props.directionalHint;
    React21.useEffect(function() {
      if (!hidden) {
        var timerId_1 = async.requestAnimationFrame(function() {
          var _a7, _b;
          if (hostElement.current && calloutElement) {
            var currentProps = __assign6(__assign6({}, props), { target: targetRef.current, bounds: getBounds() });
            var dupeCalloutElement = calloutElement.cloneNode(true);
            dupeCalloutElement.style.maxHeight = calloutMaxHeight ? "" + calloutMaxHeight : "";
            dupeCalloutElement.style.visibility = "hidden";
            (_a7 = calloutElement.parentElement) === null || _a7 === void 0 ? void 0 : _a7.appendChild(dupeCalloutElement);
            var previousPositions = previousTarget.current === target ? positions : void 0;
            var newPositions = finalHeight ? positionCard(currentProps, hostElement.current, dupeCalloutElement, previousPositions) : positionCallout(currentProps, hostElement.current, dupeCalloutElement, previousPositions);
            (_b = calloutElement.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(dupeCalloutElement);
            if (!positions && newPositions || positions && newPositions && !arePositionsEqual(positions, newPositions) && positionAttempts.current < 5) {
              positionAttempts.current++;
              setPositions(newPositions);
            } else if (positionAttempts.current > 0) {
              positionAttempts.current = 0;
              onPositioned === null || onPositioned === void 0 ? void 0 : onPositioned(positions);
            }
          }
        }, calloutElement);
        previousTarget.current = target;
        return function() {
          async.cancelAnimationFrame(timerId_1);
          previousTarget.current = void 0;
        };
      } else {
        setPositions(void 0);
        positionAttempts.current = 0;
      }
    }, [
      hidden,
      directionalHint,
      async,
      calloutElement,
      calloutMaxHeight,
      hostElement,
      targetRef,
      finalHeight,
      getBounds,
      onPositioned,
      positions,
      props,
      target
    ]);
    return positions;
  }
  function useAutoFocus(_a6, positions, calloutElement) {
    var hidden = _a6.hidden, setInitialFocus = _a6.setInitialFocus;
    var async = useAsync();
    var hasPositions = !!positions;
    React21.useEffect(function() {
      if (!hidden && setInitialFocus && hasPositions && calloutElement) {
        var timerId_2 = async.requestAnimationFrame(function() {
          return focusFirstChild(calloutElement);
        }, calloutElement);
        return function() {
          return async.cancelAnimationFrame(timerId_2);
        };
      }
    }, [hidden, hasPositions, async, calloutElement, setInitialFocus]);
  }
  function useDismissHandlers(_a6, positions, hostElement, targetRef, targetWindow) {
    var hidden = _a6.hidden, onDismiss = _a6.onDismiss, preventDismissOnScroll = _a6.preventDismissOnScroll, preventDismissOnResize = _a6.preventDismissOnResize, preventDismissOnLostFocus = _a6.preventDismissOnLostFocus, dismissOnTargetClick = _a6.dismissOnTargetClick, shouldDismissOnWindowFocus = _a6.shouldDismissOnWindowFocus, preventDismissOnEvent = _a6.preventDismissOnEvent;
    var isMouseDownOnPopup = React21.useRef(false);
    var async = useAsync();
    var mouseDownHandlers = useConst([
      function() {
        isMouseDownOnPopup.current = true;
      },
      function() {
        isMouseDownOnPopup.current = false;
      }
    ]);
    var positionsExists = !!positions;
    React21.useEffect(function() {
      var dismissOnScroll = function(ev) {
        if (positionsExists && !preventDismissOnScroll) {
          dismissOnClickOrScroll(ev);
        }
      };
      var dismissOnResize = function(ev) {
        if (!preventDismissOnResize && !(preventDismissOnEvent && preventDismissOnEvent(ev))) {
          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
        }
      };
      var dismissOnLostFocus = function(ev) {
        if (!preventDismissOnLostFocus) {
          dismissOnClickOrScroll(ev);
        }
      };
      var dismissOnClickOrScroll = function(ev) {
        var eventPaths = ev.composedPath ? ev.composedPath() : [];
        var target = eventPaths.length > 0 ? eventPaths[0] : ev.target;
        var isEventTargetOutsideCallout = hostElement.current && !elementContains(hostElement.current, target);
        if (isEventTargetOutsideCallout && isMouseDownOnPopup.current) {
          isMouseDownOnPopup.current = false;
          return;
        }
        if (!targetRef.current && isEventTargetOutsideCallout || ev.target !== targetWindow && isEventTargetOutsideCallout && (!targetRef.current || "stopPropagation" in targetRef.current || dismissOnTargetClick || target !== targetRef.current && !elementContains(targetRef.current, target))) {
          if (preventDismissOnEvent && preventDismissOnEvent(ev)) {
            return;
          }
          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
        }
      };
      var dismissOnTargetWindowBlur = function(ev) {
        if (!shouldDismissOnWindowFocus) {
          return;
        }
        if ((preventDismissOnEvent && !preventDismissOnEvent(ev) || !preventDismissOnEvent && !preventDismissOnLostFocus) && !(targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.hasFocus()) && ev.relatedTarget === null) {
          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
        }
      };
      var disposablesPromise = new Promise(function(resolve) {
        async.setTimeout(function() {
          if (!hidden && targetWindow) {
            var disposables_1 = [
              on(targetWindow, "scroll", dismissOnScroll, true),
              on(targetWindow, "resize", dismissOnResize, true),
              on(targetWindow.document.documentElement, "focus", dismissOnLostFocus, true),
              on(targetWindow.document.documentElement, "click", dismissOnLostFocus, true),
              on(targetWindow, "blur", dismissOnTargetWindowBlur, true)
            ];
            resolve(function() {
              disposables_1.forEach(function(dispose) {
                return dispose();
              });
            });
          }
        }, 0);
      });
      return function() {
        disposablesPromise.then(function(dispose) {
          return dispose();
        });
      };
    }, [
      hidden,
      async,
      hostElement,
      targetRef,
      targetWindow,
      onDismiss,
      shouldDismissOnWindowFocus,
      dismissOnTargetClick,
      preventDismissOnLostFocus,
      preventDismissOnResize,
      preventDismissOnScroll,
      positionsExists,
      preventDismissOnEvent
    ]);
    return mouseDownHandlers;
  }
  var CalloutContentBase = React21.memo(React21.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);
    var styles2 = props.styles, style = props.style, ariaLabel = props.ariaLabel, ariaDescribedBy = props.ariaDescribedBy, ariaLabelledBy = props.ariaLabelledBy, className = props.className, isBeakVisible = props.isBeakVisible, children = props.children, beakWidth = props.beakWidth, calloutWidth = props.calloutWidth, calloutMaxWidth = props.calloutMaxWidth, calloutMinWidth = props.calloutMinWidth, doNotLayer = props.doNotLayer, finalHeight = props.finalHeight, _a6 = props.hideOverflow, hideOverflow = _a6 === void 0 ? !!finalHeight : _a6, backgroundColor = props.backgroundColor, calloutMaxHeight = props.calloutMaxHeight, onScroll = props.onScroll, _b = props.shouldRestoreFocus, shouldRestoreFocus = _b === void 0 ? true : _b, target = props.target, hidden = props.hidden, onLayerMounted = props.onLayerMounted, popupProps = props.popupProps;
    var hostElement = React21.useRef(null);
    var _c = React21.useState(null), calloutElement = _c[0], setCalloutElement = _c[1];
    var calloutCallback = React21.useCallback(function(calloutEl) {
      setCalloutElement(calloutEl);
    }, []);
    var rootRef = useMergedRefs(hostElement, forwardedRef);
    var _d = useTarget(props.target, {
      current: calloutElement
    }), targetRef = _d[0], targetWindow = _d[1];
    var getBounds = useBounds(props, targetRef, targetWindow);
    var positions = usePositions(props, hostElement, calloutElement, targetRef, getBounds);
    var maxHeight = useMaxHeight(props, getBounds, positions);
    var _e2 = useDismissHandlers(props, positions, hostElement, targetRef, targetWindow), mouseDownOnPopup = _e2[0], mouseUpOnPopup = _e2[1];
    var isForcedInBounds = (positions === null || positions === void 0 ? void 0 : positions.elementPosition.top) && (positions === null || positions === void 0 ? void 0 : positions.elementPosition.bottom);
    var cssPositions = __assign6(__assign6({}, positions === null || positions === void 0 ? void 0 : positions.elementPosition), { maxHeight });
    if (isForcedInBounds) {
      cssPositions.bottom = void 0;
    }
    useAutoFocus(props, positions, calloutElement);
    React21.useEffect(function() {
      if (!hidden) {
        onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
      }
    }, [hidden]);
    if (!targetWindow) {
      return null;
    }
    var overflowYHidden = hideOverflow;
    var beakVisible = isBeakVisible && !!target;
    var classNames2 = getClassNames(styles2, {
      theme: props.theme,
      className,
      overflowYHidden,
      calloutWidth,
      positions,
      beakWidth,
      backgroundColor,
      calloutMaxWidth,
      calloutMinWidth,
      doNotLayer
    });
    var overflowStyle = __assign6(__assign6({ maxHeight: calloutMaxHeight ? calloutMaxHeight : "100%" }, style), overflowYHidden && { overflowY: "hidden" });
    var visibilityStyle = props.hidden ? { visibility: "hidden" } : void 0;
    return React21.createElement(
      "div",
      { ref: rootRef, className: classNames2.container, style: visibilityStyle },
      React21.createElement(
        "div",
        __assign6({}, getNativeProps(props, divProperties, ARIA_ROLE_ATTRIBUTES), {
          className: css(classNames2.root, positions && positions.targetEdge && ANIMATIONS[positions.targetEdge]),
          style: positions ? __assign6({}, cssPositions) : OFF_SCREEN_STYLE,
          tabIndex: -1,
          ref: calloutCallback
        }),
        beakVisible && React21.createElement("div", { className: classNames2.beak, style: getBeakPosition(positions) }),
        beakVisible && React21.createElement("div", { className: classNames2.beakCurtain }),
        React21.createElement(
          Popup,
          __assign6({
            role: props.role,
            "aria-roledescription": props["aria-roledescription"],
            ariaDescribedBy,
            ariaLabel,
            ariaLabelledBy,
            className: classNames2.calloutMain,
            onDismiss: props.onDismiss,
            onMouseDown: mouseDownOnPopup,
            onMouseUp: mouseUpOnPopup,
            onRestoreFocus: props.onRestoreFocus,
            onScroll,
            shouldRestoreFocus,
            style: overflowStyle
          }, popupProps),
          children
        )
      )
    );
  }), function(previousProps, nextProps) {
    if (!nextProps.shouldUpdateWhenHidden && previousProps.hidden && nextProps.hidden) {
      return true;
    }
    return shallowCompare(previousProps, nextProps);
  });
  function getBeakPosition(positions) {
    var _a6, _b;
    var beakPositionStyle = __assign6(__assign6({}, (_a6 = positions === null || positions === void 0 ? void 0 : positions.beakPosition) === null || _a6 === void 0 ? void 0 : _a6.elementPosition), { display: ((_b = positions === null || positions === void 0 ? void 0 : positions.beakPosition) === null || _b === void 0 ? void 0 : _b.hideBeak) ? "none" : void 0 });
    if (!beakPositionStyle.top && !beakPositionStyle.bottom && !beakPositionStyle.left && !beakPositionStyle.right) {
      beakPositionStyle.left = BEAK_ORIGIN_POSITION.left;
      beakPositionStyle.top = BEAK_ORIGIN_POSITION.top;
    }
    return beakPositionStyle;
  }
  function arePositionsEqual(prevElementPositions, newElementPosition) {
    return comparePositions(prevElementPositions.elementPosition, newElementPosition.elementPosition) && comparePositions(prevElementPositions.beakPosition.elementPosition, newElementPosition.beakPosition.elementPosition);
  }
  function comparePositions(prevElementPositions, newElementPositions) {
    for (var key in newElementPositions) {
      if (newElementPositions.hasOwnProperty(key)) {
        var oldPositionEdge = prevElementPositions[key];
        var newPositionEdge = newElementPositions[key];
        if (oldPositionEdge !== void 0 && newPositionEdge !== void 0) {
          if (oldPositionEdge.toFixed(2) !== newPositionEdge.toFixed(2)) {
            return false;
          }
        } else {
          return false;
        }
      }
    }
    return true;
  }
  CalloutContentBase.displayName = COMPONENT_NAME;

  // node_modules/@fluentui/react/lib/components/Callout/CalloutContent.styles.js
  function getBeakStyle(beakWidth) {
    return {
      height: beakWidth,
      width: beakWidth
    };
  }
  var GlobalClassNames = {
    container: "ms-Callout-container",
    root: "ms-Callout",
    beak: "ms-Callout-beak",
    beakCurtain: "ms-Callout-beakCurtain",
    calloutMain: "ms-Callout-main"
  };
  var getStyles = function(props) {
    var _a6;
    var theme = props.theme, className = props.className, overflowYHidden = props.overflowYHidden, calloutWidth = props.calloutWidth, beakWidth = props.beakWidth, backgroundColor = props.backgroundColor, calloutMaxWidth = props.calloutMaxWidth, calloutMinWidth = props.calloutMinWidth, doNotLayer = props.doNotLayer;
    var classNames2 = getGlobalClassNames(GlobalClassNames, theme);
    var semanticColors = theme.semanticColors, effects = theme.effects;
    return {
      container: [
        classNames2.container,
        {
          position: "relative"
        }
      ],
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          position: "absolute",
          display: "flex",
          zIndex: doNotLayer ? ZIndexes.Layer : void 0,
          boxSizing: "border-box",
          borderRadius: effects.roundedCorner2,
          boxShadow: effects.elevation16,
          selectors: (_a6 = {}, _a6[HighContrastSelector] = {
            borderWidth: 1,
            borderStyle: "solid",
            borderColor: "WindowText"
          }, _a6)
        },
        focusClear(),
        className,
        !!calloutWidth && { width: calloutWidth },
        !!calloutMaxWidth && { maxWidth: calloutMaxWidth },
        !!calloutMinWidth && { minWidth: calloutMinWidth }
      ],
      beak: [
        classNames2.beak,
        {
          position: "absolute",
          backgroundColor: semanticColors.menuBackground,
          boxShadow: "inherit",
          border: "inherit",
          boxSizing: "border-box",
          transform: "rotate(45deg)"
        },
        getBeakStyle(beakWidth),
        backgroundColor && {
          backgroundColor
        }
      ],
      beakCurtain: [
        classNames2.beakCurtain,
        {
          position: "absolute",
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          backgroundColor: semanticColors.menuBackground,
          borderRadius: effects.roundedCorner2
        }
      ],
      calloutMain: [
        classNames2.calloutMain,
        {
          backgroundColor: semanticColors.menuBackground,
          overflowX: "hidden",
          overflowY: "auto",
          position: "relative",
          width: "100%",
          borderRadius: effects.roundedCorner2
        },
        overflowYHidden && {
          overflowY: "hidden"
        },
        backgroundColor && {
          backgroundColor
        }
      ]
    };
  };

  // node_modules/@fluentui/react/lib/components/Callout/CalloutContent.js
  var CalloutContent = styled(CalloutContentBase, getStyles, void 0, {
    scope: "CalloutContent"
  });

  // node_modules/@fluentui/react-portal-compat-context/lib/PortalCompatContext.js
  var React22 = __toESM(require_react());
  var PortalCompatContext = /* @__PURE__ */ React22.createContext(void 0);
  var portalCompatContextDefaultValue = function() {
    return function() {
      return void 0;
    };
  };
  var PortalCompatContextProvider = PortalCompatContext.Provider;
  function usePortalCompat() {
    var _a6;
    return (_a6 = React22.useContext(PortalCompatContext)) !== null && _a6 !== void 0 ? _a6 : portalCompatContextDefaultValue;
  }

  // node_modules/@fluentui/react/lib/components/Layer/Layer.base.js
  var React24 = __toESM(require_react());
  var ReactDOM = __toESM(require_react_dom());

  // node_modules/@fluentui/react/lib/components/Fabric/Fabric.base.js
  var React23 = __toESM(require_react());
  var getClassNames2 = classNamesFunction();
  var getFabricTheme = memoizeFunction(function(theme, isRTL) {
    return createTheme(__assign6(__assign6({}, theme), { rtl: isRTL }));
  });
  var getDir = function(_a6) {
    var theme = _a6.theme, dir = _a6.dir;
    var contextDir = getRTL2(theme) ? "rtl" : "ltr";
    var pageDir = getRTL2() ? "rtl" : "ltr";
    var componentDir = dir ? dir : contextDir;
    return {
      rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,
      needsTheme: componentDir !== contextDir
    };
  };
  var FabricBase = React23.forwardRef(function(props, ref) {
    var className = props.className, theme = props.theme, applyTheme = props.applyTheme, applyThemeToBody = props.applyThemeToBody, styles2 = props.styles;
    var classNames2 = getClassNames2(styles2, {
      theme,
      applyTheme,
      className
    });
    var rootElement = React23.useRef(null);
    useApplyThemeToBody(applyThemeToBody, classNames2, rootElement);
    return React23.createElement(React23.Fragment, null, useRenderedContent(props, classNames2, rootElement, ref));
  });
  FabricBase.displayName = "FabricBase";
  function useRenderedContent(props, _a6, rootElement, ref) {
    var root2 = _a6.root;
    var _b = props.as, Root = _b === void 0 ? "div" : _b, dir = props.dir, theme = props.theme;
    var divProps = getNativeProps(props, divProperties, ["dir"]);
    var _c = getDir(props), rootDir = _c.rootDir, needsTheme = _c.needsTheme;
    var renderedContent = React23.createElement(
      FocusRectsProvider,
      { providerRef: rootElement },
      React23.createElement(Root, __assign6({ dir: rootDir }, divProps, { className: root2, ref: useMergedRefs(rootElement, ref) }))
    );
    if (needsTheme) {
      renderedContent = React23.createElement(Customizer, { settings: { theme: getFabricTheme(theme, dir === "rtl") } }, renderedContent);
    }
    return renderedContent;
  }
  function useApplyThemeToBody(applyThemeToBody, _a6, rootElement) {
    var bodyThemed = _a6.bodyThemed;
    React23.useEffect(function() {
      if (applyThemeToBody) {
        var currentDoc_1 = getDocument(rootElement.current);
        if (currentDoc_1) {
          currentDoc_1.body.classList.add(bodyThemed);
          return function() {
            currentDoc_1.body.classList.remove(bodyThemed);
          };
        }
      }
    }, [bodyThemed, applyThemeToBody, rootElement]);
    return rootElement;
  }

  // node_modules/@fluentui/react/lib/components/Fabric/Fabric.styles.js
  var inheritFont = { fontFamily: "inherit" };
  var GlobalClassNames2 = {
    root: "ms-Fabric",
    bodyThemed: "ms-Fabric-bodyThemed"
  };
  var getStyles2 = function(props) {
    var theme = props.theme, className = props.className, applyTheme = props.applyTheme;
    var classNames2 = getGlobalClassNames(GlobalClassNames2, theme);
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          color: theme.palette.neutralPrimary,
          selectors: {
            "& button": inheritFont,
            "& input": inheritFont,
            "& textarea": inheritFont
          }
        },
        applyTheme && {
          color: theme.semanticColors.bodyText,
          backgroundColor: theme.semanticColors.bodyBackground
        },
        className
      ],
      bodyThemed: [
        {
          backgroundColor: theme.semanticColors.bodyBackground
        }
      ]
    };
  };

  // node_modules/@fluentui/react/lib/components/Fabric/Fabric.js
  var Fabric = styled(FabricBase, getStyles2, void 0, {
    scope: "Fabric"
  });

  // node_modules/@fluentui/react/lib/components/Layer/Layer.notification.js
  var _layersByHostId = {};
  var _layerHostsById = {};
  var defaultHostId = "fluent-default-layer-host";
  var _defaultHostSelector = "#" + defaultHostId;
  function registerLayer(hostId, callback) {
    if (!_layersByHostId[hostId]) {
      _layersByHostId[hostId] = [];
    }
    _layersByHostId[hostId].push(callback);
    var layerHosts = _layerHostsById[hostId];
    if (layerHosts) {
      for (var _i = 0, layerHosts_1 = layerHosts; _i < layerHosts_1.length; _i++) {
        var layerHost = layerHosts_1[_i];
        layerHost.notifyLayersChanged();
      }
    }
  }
  function unregisterLayer(hostId, callback) {
    var layers = _layersByHostId[hostId];
    if (layers) {
      var idx = layers.indexOf(callback);
      if (idx >= 0) {
        layers.splice(idx, 1);
        if (layers.length === 0) {
          delete _layersByHostId[hostId];
        }
      }
    }
    var layerHosts = _layerHostsById[hostId];
    if (layerHosts) {
      for (var _i = 0, layerHosts_2 = layerHosts; _i < layerHosts_2.length; _i++) {
        var layerHost = layerHosts_2[_i];
        layerHost.notifyLayersChanged();
      }
    }
  }
  function getLayerHost(hostId) {
    var layerHosts = _layerHostsById[hostId];
    return layerHosts && layerHosts[0] || void 0;
  }
  function createDefaultLayerHost(doc) {
    var host = doc.createElement("div");
    host.setAttribute("id", defaultHostId);
    host.style.cssText = "position:fixed;z-index:1000000";
    doc === null || doc === void 0 ? void 0 : doc.body.appendChild(host);
    return host;
  }
  function getDefaultTarget() {
    return _defaultHostSelector;
  }

  // node_modules/@fluentui/react/lib/components/Layer/Layer.base.js
  var getClassNames3 = classNamesFunction();
  var LayerBase = React24.forwardRef(function(props, ref) {
    var registerPortalEl = usePortalCompat();
    var rootRef = React24.useRef(null);
    var mergedRef = useMergedRefs(rootRef, ref);
    var layerRef = React24.useRef();
    var fabricRef = React24.useRef(null);
    var _a6 = React24.useState(false), needRaiseLayerMount = _a6[0], setNeedRaiseLayerMount = _a6[1];
    var eventBubblingEnabled = props.eventBubblingEnabled, styles2 = props.styles, theme = props.theme, className = props.className, children = props.children, hostId = props.hostId, _b = props.onLayerDidMount, onLayerDidMount = _b === void 0 ? function() {
      return void 0;
    } : _b, _c = props.onLayerMounted, onLayerMounted = _c === void 0 ? function() {
      return void 0;
    } : _c, onLayerWillUnmount = props.onLayerWillUnmount, insertFirst = props.insertFirst;
    var classNames2 = getClassNames3(styles2, {
      theme,
      className,
      isNotHost: !hostId
    });
    var getHost = function(doc) {
      var _a7, _b2;
      if (hostId) {
        var layerHost = getLayerHost(hostId);
        if (layerHost) {
          return (_a7 = layerHost.rootRef.current) !== null && _a7 !== void 0 ? _a7 : null;
        }
        return (_b2 = doc.getElementById(hostId)) !== null && _b2 !== void 0 ? _b2 : null;
      } else {
        var defaultHostSelector = getDefaultTarget();
        var host = defaultHostSelector ? doc.querySelector(defaultHostSelector) : null;
        if (!host) {
          host = createDefaultLayerHost(doc);
        }
        return host;
      }
    };
    var removeLayerElement = function() {
      onLayerWillUnmount === null || onLayerWillUnmount === void 0 ? void 0 : onLayerWillUnmount();
      var elem = layerRef.current;
      layerRef.current = void 0;
      if (elem && elem.parentNode) {
        elem.parentNode.removeChild(elem);
      }
    };
    var createLayerElement = function() {
      var _a7;
      var doc = getDocument(rootRef.current);
      if (!doc) {
        return;
      }
      var host = getHost(doc);
      if (!host) {
        return;
      }
      removeLayerElement();
      var el = ((_a7 = host.ownerDocument) !== null && _a7 !== void 0 ? _a7 : doc).createElement("div");
      el.className = classNames2.root;
      setPortalAttribute(el);
      setVirtualParent(el, rootRef.current);
      insertFirst ? host.insertBefore(el, host.firstChild) : host.appendChild(el);
      layerRef.current = el;
      setNeedRaiseLayerMount(true);
    };
    useIsomorphicLayoutEffect(function() {
      createLayerElement();
      if (hostId) {
        registerLayer(hostId, createLayerElement);
      }
      var unregisterPortalEl = layerRef.current ? registerPortalEl(layerRef.current) : void 0;
      return function() {
        if (unregisterPortalEl) {
          unregisterPortalEl();
        }
        removeLayerElement();
        if (hostId) {
          unregisterLayer(hostId, createLayerElement);
        }
      };
    }, [hostId]);
    React24.useEffect(function() {
      if (layerRef.current && needRaiseLayerMount) {
        onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
        onLayerDidMount === null || onLayerDidMount === void 0 ? void 0 : onLayerDidMount();
        setNeedRaiseLayerMount(false);
      }
    }, [needRaiseLayerMount, onLayerMounted, onLayerDidMount]);
    useDebugWarnings(props);
    return React24.createElement("span", { className: "ms-layer", ref: mergedRef }, layerRef.current && ReactDOM.createPortal(React24.createElement(
      FocusRectsProvider,
      { layerRoot: true, providerRef: fabricRef },
      React24.createElement(Fabric, __assign6({}, !eventBubblingEnabled && getFilteredEvents(), { className: classNames2.content, ref: fabricRef }), children)
    ), layerRef.current));
  });
  LayerBase.displayName = "LayerBase";
  var filteredEventProps;
  var onFilterEvent = function(ev) {
    if (ev.eventPhase === Event.BUBBLING_PHASE && ev.type !== "mouseenter" && ev.type !== "mouseleave" && ev.type !== "touchstart" && ev.type !== "touchend") {
      ev.stopPropagation();
    }
  };
  function getFilteredEvents() {
    if (!filteredEventProps) {
      filteredEventProps = {};
      [
        "onClick",
        "onContextMenu",
        "onDoubleClick",
        "onDrag",
        "onDragEnd",
        "onDragEnter",
        "onDragExit",
        "onDragLeave",
        "onDragOver",
        "onDragStart",
        "onDrop",
        "onMouseDown",
        "onMouseEnter",
        "onMouseLeave",
        "onMouseMove",
        "onMouseOver",
        "onMouseOut",
        "onMouseUp",
        "onTouchMove",
        "onTouchStart",
        "onTouchCancel",
        "onTouchEnd",
        "onKeyDown",
        "onKeyPress",
        "onKeyUp",
        "onFocus",
        "onBlur",
        "onChange",
        "onInput",
        "onInvalid",
        "onSubmit"
      ].forEach(function(name) {
        return filteredEventProps[name] = onFilterEvent;
      });
    }
    return filteredEventProps;
  }
  function useDebugWarnings(props) {
    if (true) {
      useWarnings({
        name: "Layer",
        props,
        deprecations: { onLayerMounted: "onLayerDidMount" }
      });
    }
  }

  // node_modules/@fluentui/react/lib/components/Layer/Layer.styles.js
  var GlobalClassNames3 = {
    root: "ms-Layer",
    rootNoHost: "ms-Layer--fixed",
    content: "ms-Layer-content"
  };
  var getStyles3 = function(props) {
    var className = props.className, isNotHost = props.isNotHost, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames3, theme);
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        isNotHost && [
          classNames2.rootNoHost,
          {
            position: "fixed",
            zIndex: ZIndexes.Layer,
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            visibility: "hidden"
          }
        ],
        className
      ],
      content: [
        classNames2.content,
        {
          visibility: "visible"
        }
      ]
    };
  };

  // node_modules/@fluentui/react/lib/components/Layer/Layer.js
  var Layer = styled(LayerBase, getStyles3, void 0, {
    scope: "Layer",
    fields: ["hostId", "theme", "styles"]
  });

  // node_modules/@fluentui/react/lib/components/Callout/Callout.js
  var Callout = React25.forwardRef(function(_a6, forwardedRef) {
    var layerProps = _a6.layerProps, doNotLayer = _a6.doNotLayer, rest = __rest5(_a6, ["layerProps", "doNotLayer"]);
    var content = React25.createElement(CalloutContent, __assign6({}, rest, { doNotLayer, ref: forwardedRef }));
    return doNotLayer ? content : React25.createElement(Layer, __assign6({}, layerProps), content);
  });
  Callout.displayName = "Callout";

  // node_modules/@fluentui/react/lib/components/Icon/Icon.base.js
  var React28 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/components/Icon/Icon.types.js
  var IconType;
  (function(IconType2) {
    IconType2[IconType2["default"] = 0] = "default";
    IconType2[IconType2["image"] = 1] = "image";
    IconType2[IconType2["Default"] = 1e5] = "Default";
    IconType2[IconType2["Image"] = 100001] = "Image";
  })(IconType || (IconType = {}));

  // node_modules/@fluentui/react/lib/components/Image/Image.base.js
  var React26 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/components/Image/Image.types.js
  var ImageFit;
  (function(ImageFit2) {
    ImageFit2[ImageFit2["center"] = 0] = "center";
    ImageFit2[ImageFit2["contain"] = 1] = "contain";
    ImageFit2[ImageFit2["cover"] = 2] = "cover";
    ImageFit2[ImageFit2["none"] = 3] = "none";
    ImageFit2[ImageFit2["centerCover"] = 4] = "centerCover";
    ImageFit2[ImageFit2["centerContain"] = 5] = "centerContain";
  })(ImageFit || (ImageFit = {}));
  var ImageCoverStyle;
  (function(ImageCoverStyle2) {
    ImageCoverStyle2[ImageCoverStyle2["landscape"] = 0] = "landscape";
    ImageCoverStyle2[ImageCoverStyle2["portrait"] = 1] = "portrait";
  })(ImageCoverStyle || (ImageCoverStyle = {}));
  var ImageLoadState;
  (function(ImageLoadState2) {
    ImageLoadState2[ImageLoadState2["notLoaded"] = 0] = "notLoaded";
    ImageLoadState2[ImageLoadState2["loaded"] = 1] = "loaded";
    ImageLoadState2[ImageLoadState2["error"] = 2] = "error";
    ImageLoadState2[ImageLoadState2["errorLoaded"] = 3] = "errorLoaded";
  })(ImageLoadState || (ImageLoadState = {}));

  // node_modules/@fluentui/react/lib/components/Image/Image.base.js
  var getClassNames4 = classNamesFunction();
  var SVG_REGEX = /\.svg$/i;
  var KEY_PREFIX = "fabricImage";
  function useLoadState(props, imageElement) {
    var onLoadingStateChange = props.onLoadingStateChange, onLoad = props.onLoad, onError = props.onError, src = props.src;
    var _a6 = React26.useState(ImageLoadState.notLoaded), loadState = _a6[0], setLoadState = _a6[1];
    useIsomorphicLayoutEffect(function() {
      setLoadState(ImageLoadState.notLoaded);
    }, [src]);
    React26.useEffect(function() {
      if (loadState === ImageLoadState.notLoaded) {
        var isLoaded = imageElement.current ? src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0 || imageElement.current.complete && SVG_REGEX.test(src) : false;
        if (isLoaded) {
          setLoadState(ImageLoadState.loaded);
        }
      }
    });
    React26.useEffect(function() {
      onLoadingStateChange === null || onLoadingStateChange === void 0 ? void 0 : onLoadingStateChange(loadState);
    }, [loadState]);
    var onImageLoaded = React26.useCallback(function(ev) {
      onLoad === null || onLoad === void 0 ? void 0 : onLoad(ev);
      if (src) {
        setLoadState(ImageLoadState.loaded);
      }
    }, [src, onLoad]);
    var onImageError = React26.useCallback(function(ev) {
      onError === null || onError === void 0 ? void 0 : onError(ev);
      setLoadState(ImageLoadState.error);
    }, [onError]);
    return [loadState, onImageLoaded, onImageError];
  }
  var ImageBase = React26.forwardRef(function(props, forwardedRef) {
    var frameElement = React26.useRef();
    var imageElement = React26.useRef();
    var _a6 = useLoadState(props, imageElement), loadState = _a6[0], onImageLoaded = _a6[1], onImageError = _a6[2];
    var imageProps = getNativeProps(props, imgProperties, [
      "width",
      "height"
    ]);
    var src = props.src, alt = props.alt, width = props.width, height = props.height, _b = props.shouldFadeIn, shouldFadeIn = _b === void 0 ? true : _b, shouldStartVisible = props.shouldStartVisible, className = props.className, imageFit = props.imageFit, role = props.role, maximizeFrame = props.maximizeFrame, styles2 = props.styles, theme = props.theme, loading = props.loading;
    var coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);
    var classNames2 = getClassNames4(styles2, {
      theme,
      className,
      width,
      height,
      maximizeFrame,
      shouldFadeIn,
      shouldStartVisible,
      isLoaded: loadState === ImageLoadState.loaded || loadState === ImageLoadState.notLoaded && props.shouldStartVisible,
      isLandscape: coverStyle === ImageCoverStyle.landscape,
      isCenter: imageFit === ImageFit.center,
      isCenterContain: imageFit === ImageFit.centerContain,
      isCenterCover: imageFit === ImageFit.centerCover,
      isContain: imageFit === ImageFit.contain,
      isCover: imageFit === ImageFit.cover,
      isNone: imageFit === ImageFit.none,
      isError: loadState === ImageLoadState.error,
      isNotImageFit: imageFit === void 0
    });
    return React26.createElement(
      "div",
      { className: classNames2.root, style: { width, height }, ref: frameElement },
      React26.createElement("img", __assign6({}, imageProps, { onLoad: onImageLoaded, onError: onImageError, key: KEY_PREFIX + props.src || "", className: classNames2.image, ref: useMergedRefs(imageElement, forwardedRef), src, alt, role, loading }))
    );
  });
  ImageBase.displayName = "ImageBase";
  function useCoverStyle(props, loadState, imageElement, frameElement) {
    var previousLoadState = React26.useRef(loadState);
    var coverStyle = React26.useRef();
    if (coverStyle === void 0 || previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded) {
      coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);
    }
    previousLoadState.current = loadState;
    return coverStyle.current;
  }
  function computeCoverStyle(props, loadState, imageElement, frameElement) {
    var imageFit = props.imageFit, width = props.width, height = props.height;
    if (props.coverStyle !== void 0) {
      return props.coverStyle;
    } else if (loadState === ImageLoadState.loaded && (imageFit === ImageFit.cover || imageFit === ImageFit.contain || imageFit === ImageFit.centerContain || imageFit === ImageFit.centerCover) && imageElement.current && frameElement.current) {
      var desiredRatio = void 0;
      if (typeof width === "number" && typeof height === "number" && imageFit !== ImageFit.centerContain && imageFit !== ImageFit.centerCover) {
        desiredRatio = width / height;
      } else {
        desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;
      }
      var naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;
      if (naturalRatio > desiredRatio) {
        return ImageCoverStyle.landscape;
      }
    }
    return ImageCoverStyle.portrait;
  }

  // node_modules/@fluentui/react/lib/components/Image/Image.styles.js
  var GlobalClassNames4 = {
    root: "ms-Image",
    rootMaximizeFrame: "ms-Image--maximizeFrame",
    image: "ms-Image-image",
    imageCenter: "ms-Image-image--center",
    imageContain: "ms-Image-image--contain",
    imageCover: "ms-Image-image--cover",
    imageCenterContain: "ms-Image-image--centerContain",
    imageCenterCover: "ms-Image-image--centerCover",
    imageNone: "ms-Image-image--none",
    imageLandscape: "ms-Image-image--landscape",
    imagePortrait: "ms-Image-image--portrait"
  };
  var getStyles4 = function(props) {
    var className = props.className, width = props.width, height = props.height, maximizeFrame = props.maximizeFrame, isLoaded = props.isLoaded, shouldFadeIn = props.shouldFadeIn, shouldStartVisible = props.shouldStartVisible, isLandscape = props.isLandscape, isCenter = props.isCenter, isContain = props.isContain, isCover = props.isCover, isCenterContain = props.isCenterContain, isCenterCover = props.isCenterCover, isNone = props.isNone, isError = props.isError, isNotImageFit = props.isNotImageFit, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames4, theme);
    var ImageFitStyles = {
      position: "absolute",
      left: "50% /* @noflip */",
      top: "50%",
      transform: "translate(-50%,-50%)"
    };
    var window2 = getWindow();
    var supportsObjectFit = window2 !== void 0 && window2.navigator.msMaxTouchPoints === void 0;
    var fallbackObjectFitStyles = isContain && isLandscape || isCover && !isLandscape ? { width: "100%", height: "auto" } : { width: "auto", height: "100%" };
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          overflow: "hidden"
        },
        maximizeFrame && [
          classNames2.rootMaximizeFrame,
          {
            height: "100%",
            width: "100%"
          }
        ],
        isLoaded && shouldFadeIn && !shouldStartVisible && AnimationClassNames.fadeIn400,
        (isCenter || isContain || isCover || isCenterContain || isCenterCover) && {
          position: "relative"
        },
        className
      ],
      image: [
        classNames2.image,
        {
          display: "block",
          opacity: 0
        },
        isLoaded && [
          "is-loaded",
          {
            opacity: 1
          }
        ],
        isCenter && [classNames2.imageCenter, ImageFitStyles],
        isContain && [
          classNames2.imageContain,
          supportsObjectFit && {
            width: "100%",
            height: "100%",
            objectFit: "contain"
          },
          !supportsObjectFit && fallbackObjectFitStyles,
          !supportsObjectFit && ImageFitStyles
        ],
        isCover && [
          classNames2.imageCover,
          supportsObjectFit && {
            width: "100%",
            height: "100%",
            objectFit: "cover"
          },
          !supportsObjectFit && fallbackObjectFitStyles,
          !supportsObjectFit && ImageFitStyles
        ],
        isCenterContain && [
          classNames2.imageCenterContain,
          isLandscape && {
            maxWidth: "100%"
          },
          !isLandscape && {
            maxHeight: "100%"
          },
          ImageFitStyles
        ],
        isCenterCover && [
          classNames2.imageCenterCover,
          isLandscape && {
            maxHeight: "100%"
          },
          !isLandscape && {
            maxWidth: "100%"
          },
          ImageFitStyles
        ],
        isNone && [
          classNames2.imageNone,
          {
            width: "auto",
            height: "auto"
          }
        ],
        isNotImageFit && [
          !!width && !height && {
            height: "auto",
            width: "100%"
          },
          !width && !!height && {
            height: "100%",
            width: "auto"
          },
          !!width && !!height && {
            height: "100%",
            width: "100%"
          }
        ],
        isLandscape && classNames2.imageLandscape,
        !isLandscape && classNames2.imagePortrait,
        !isLoaded && "is-notLoaded",
        shouldFadeIn && "is-fadeIn",
        isError && "is-error"
      ]
    };
  };

  // node_modules/@fluentui/react/lib/components/Image/Image.js
  var Image = styled(ImageBase, getStyles4, void 0, {
    scope: "Image"
  }, true);
  Image.displayName = "Image";

  // node_modules/@fluentui/react/lib/components/Icon/FontIcon.js
  var React27 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/components/Icon/Icon.styles.js
  var classNames = mergeStyleSets({
    root: {
      display: "inline-block"
    },
    placeholder: [
      "ms-Icon-placeHolder",
      {
        width: "1em"
      }
    ],
    image: [
      "ms-Icon-imageContainer",
      {
        overflow: "hidden"
      }
    ]
  });
  var MS_ICON = "ms-Icon";
  var getStyles5 = function(props) {
    var className = props.className, iconClassName = props.iconClassName, isPlaceholder = props.isPlaceholder, isImage = props.isImage, styles2 = props.styles;
    return {
      root: [
        isPlaceholder && classNames.placeholder,
        classNames.root,
        isImage && classNames.image,
        iconClassName,
        className,
        styles2 && styles2.root,
        styles2 && styles2.imageContainer
      ]
    };
  };

  // node_modules/@fluentui/react/lib/components/Icon/FontIcon.js
  var getIconContent = memoizeFunction(function(iconName) {
    var _a6 = getIcon(iconName) || {
      subset: {},
      code: void 0
    }, code = _a6.code, subset = _a6.subset;
    if (!code) {
      return null;
    }
    return {
      children: code,
      iconClassName: subset.className,
      fontFamily: subset.fontFace && subset.fontFace.fontFamily,
      mergeImageProps: subset.mergeImageProps
    };
  }, void 0, true);
  var FontIcon = function(props) {
    var iconName = props.iconName, className = props.className, _a6 = props.style, style = _a6 === void 0 ? {} : _a6;
    var iconContent = getIconContent(iconName) || {};
    var iconClassName = iconContent.iconClassName, children = iconContent.children, fontFamily = iconContent.fontFamily, mergeImageProps = iconContent.mergeImageProps;
    var nativeProps = getNativeProps(props, htmlElementProperties);
    var accessibleName = props["aria-label"] || props.title;
    var containerProps = props["aria-label"] || props["aria-labelledby"] || props.title ? {
      role: mergeImageProps ? void 0 : "img"
    } : {
      "aria-hidden": true
    };
    var finalChildren = children;
    if (mergeImageProps) {
      if (typeof children === "object" && typeof children.props === "object" && accessibleName) {
        finalChildren = React27.cloneElement(children, { alt: accessibleName });
      }
    }
    return React27.createElement("i", __assign6({ "data-icon-name": iconName }, containerProps, nativeProps, mergeImageProps ? {
      title: void 0,
      "aria-label": void 0
    } : {}, {
      className: css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className),
      style: __assign6({ fontFamily }, style)
    }), finalChildren);
  };
  var getFontIcon = memoizeFunction(function(iconName, className, ariaLabel) {
    return FontIcon({ iconName, className, "aria-label": ariaLabel });
  });

  // node_modules/@fluentui/react/lib/components/Icon/Icon.base.js
  var getClassNames5 = classNamesFunction({
    cacheSize: 100
  });
  var IconBase = function(_super) {
    __extends5(IconBase2, _super);
    function IconBase2(props) {
      var _this = _super.call(this, props) || this;
      _this._onImageLoadingStateChange = function(state) {
        if (_this.props.imageProps && _this.props.imageProps.onLoadingStateChange) {
          _this.props.imageProps.onLoadingStateChange(state);
        }
        if (state === ImageLoadState.error) {
          _this.setState({ imageLoadError: true });
        }
      };
      _this.state = {
        imageLoadError: false
      };
      return _this;
    }
    IconBase2.prototype.render = function() {
      var _a6 = this.props, children = _a6.children, className = _a6.className, styles2 = _a6.styles, iconName = _a6.iconName, imageErrorAs = _a6.imageErrorAs, theme = _a6.theme;
      var isPlaceholder = typeof iconName === "string" && iconName.length === 0;
      var isImage = !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image;
      var iconContent = getIconContent(iconName) || {};
      var iconClassName = iconContent.iconClassName, iconContentChildren = iconContent.children, mergeImageProps = iconContent.mergeImageProps;
      var classNames2 = getClassNames5(styles2, {
        theme,
        className,
        iconClassName,
        isImage,
        isPlaceholder
      });
      var RootType = isImage ? "span" : "i";
      var nativeProps = getNativeProps(this.props, htmlElementProperties, [
        "aria-label"
      ]);
      var imageLoadError = this.state.imageLoadError;
      var imageProps = __assign6(__assign6({}, this.props.imageProps), { onLoadingStateChange: this._onImageLoadingStateChange });
      var ImageType = imageLoadError && imageErrorAs || Image;
      var ariaLabel = this.props["aria-label"] || this.props.ariaLabel;
      var accessibleName = imageProps.alt || ariaLabel || this.props.title;
      var hasName = !!(accessibleName || this.props["aria-labelledby"] || imageProps["aria-label"] || imageProps["aria-labelledby"]);
      var containerProps = hasName ? {
        role: isImage || mergeImageProps ? void 0 : "img",
        "aria-label": isImage || mergeImageProps ? void 0 : accessibleName
      } : {
        "aria-hidden": true
      };
      var finalIconContentChildren = iconContentChildren;
      if (mergeImageProps && iconContentChildren && typeof iconContentChildren === "object" && accessibleName) {
        finalIconContentChildren = React28.cloneElement(iconContentChildren, {
          alt: accessibleName
        });
      }
      return React28.createElement(RootType, __assign6({ "data-icon-name": iconName }, containerProps, nativeProps, mergeImageProps ? {
        title: void 0,
        "aria-label": void 0
      } : {}, { className: classNames2.root }), isImage ? React28.createElement(ImageType, __assign6({}, imageProps)) : children || finalIconContentChildren);
    };
    return IconBase2;
  }(React28.Component);

  // node_modules/@fluentui/react/lib/components/Icon/Icon.js
  var Icon = styled(IconBase, getStyles5, void 0, {
    scope: "Icon"
  }, true);
  Icon.displayName = "Icon";

  // node_modules/@fluentui/react/lib/components/Icon/ImageIcon.js
  var React29 = __toESM(require_react());
  var ImageIcon = function(props) {
    var className = props.className, imageProps = props.imageProps;
    var nativeProps = getNativeProps(props, htmlElementProperties, [
      "aria-label",
      "aria-labelledby",
      "title",
      "aria-describedby"
    ]);
    var altText = imageProps.alt || props["aria-label"];
    var hasName = altText || props["aria-labelledby"] || props.title || imageProps["aria-label"] || imageProps["aria-labelledby"] || imageProps.title;
    var imageNameProps = {
      "aria-labelledby": props["aria-labelledby"],
      "aria-describedby": props["aria-describedby"],
      title: props.title
    };
    var containerProps = hasName ? {} : {
      "aria-hidden": true
    };
    return React29.createElement(
      "div",
      __assign6({}, containerProps, nativeProps, { className: css(MS_ICON, classNames.root, classNames.image, className) }),
      React29.createElement(Image, __assign6({}, imageNameProps, imageProps, { alt: hasName ? altText : "" }))
    );
  };

  // node_modules/@fluentui/react-focus/node_modules/tslib/modules/index.js
  var import_tslib33 = __toESM(require_tslib7(), 1);
  var {
    __extends: __extends7,
    __assign: __assign8,
    __rest: __rest7,
    __decorate: __decorate7,
    __param: __param7,
    __metadata: __metadata7,
    __awaiter: __awaiter7,
    __generator: __generator7,
    __exportStar: __exportStar7,
    __createBinding: __createBinding7,
    __values: __values8,
    __read: __read8,
    __spread: __spread7,
    __spreadArrays: __spreadArrays7,
    __spreadArray: __spreadArray7,
    __await: __await7,
    __asyncGenerator: __asyncGenerator7,
    __asyncDelegator: __asyncDelegator7,
    __asyncValues: __asyncValues7,
    __makeTemplateObject: __makeTemplateObject7,
    __importStar: __importStar7,
    __importDefault: __importDefault7,
    __classPrivateFieldGet: __classPrivateFieldGet7,
    __classPrivateFieldSet: __classPrivateFieldSet7,
    __classPrivateFieldIn: __classPrivateFieldIn7
  } = import_tslib33.default;

  // node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.js
  var React30 = __toESM(require_react());

  // node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.types.js
  var FocusZoneTabbableElements = {
    none: 0,
    all: 1,
    inputOnly: 2
  };
  var FocusZoneDirection;
  (function(FocusZoneDirection2) {
    FocusZoneDirection2[FocusZoneDirection2["vertical"] = 0] = "vertical";
    FocusZoneDirection2[FocusZoneDirection2["horizontal"] = 1] = "horizontal";
    FocusZoneDirection2[FocusZoneDirection2["bidirectional"] = 2] = "bidirectional";
    FocusZoneDirection2[FocusZoneDirection2["domOrder"] = 3] = "domOrder";
  })(FocusZoneDirection || (FocusZoneDirection = {}));

  // node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.js
  var IS_FOCUSABLE_ATTRIBUTE2 = "data-is-focusable";
  var IS_ENTER_DISABLED_ATTRIBUTE = "data-disable-click-on-enter";
  var FOCUSZONE_ID_ATTRIBUTE2 = "data-focuszone-id";
  var TABINDEX = "tabindex";
  var NO_VERTICAL_WRAP = "data-no-vertical-wrap";
  var NO_HORIZONTAL_WRAP = "data-no-horizontal-wrap";
  var LARGE_DISTANCE_FROM_CENTER = 999999999;
  var LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;
  var focusZoneStyles;
  var focusZoneClass = "ms-FocusZone";
  function raiseClickFromKeyboardEvent(target, ev) {
    var event;
    if (typeof MouseEvent === "function") {
      event = new MouseEvent("click", {
        ctrlKey: ev === null || ev === void 0 ? void 0 : ev.ctrlKey,
        metaKey: ev === null || ev === void 0 ? void 0 : ev.metaKey,
        shiftKey: ev === null || ev === void 0 ? void 0 : ev.shiftKey,
        altKey: ev === null || ev === void 0 ? void 0 : ev.altKey,
        bubbles: ev === null || ev === void 0 ? void 0 : ev.bubbles,
        cancelable: ev === null || ev === void 0 ? void 0 : ev.cancelable
      });
    } else {
      event = document.createEvent("MouseEvents");
      event.initMouseEvent(
        "click",
        ev ? ev.bubbles : false,
        ev ? ev.cancelable : false,
        window,
        0,
        0,
        0,
        0,
        0,
        ev ? ev.ctrlKey : false,
        ev ? ev.altKey : false,
        ev ? ev.shiftKey : false,
        ev ? ev.metaKey : false,
        0,
        null
      );
    }
    target.dispatchEvent(event);
  }
  function getRootClass() {
    if (!focusZoneStyles) {
      focusZoneStyles = mergeStyles({
        selectors: {
          ":focus": {
            outline: "none"
          }
        }
      }, focusZoneClass);
    }
    return focusZoneStyles;
  }
  var _allInstances = {};
  var _outerZones = /* @__PURE__ */ new Set();
  var ALLOWED_INPUT_TYPES = ["text", "number", "password", "email", "tel", "url", "search", "textarea"];
  var ALLOW_VIRTUAL_ELEMENTS = false;
  var FocusZone = function(_super) {
    __extends7(FocusZone2, _super);
    function FocusZone2(props) {
      var _a6, _b, _c, _d;
      var _this = _super.call(this, props) || this;
      _this._root = React30.createRef();
      _this._mergedRef = createMergedRef();
      _this._onFocus = function(ev) {
        if (_this._portalContainsElement(ev.target)) {
          return;
        }
        var _a7 = _this.props, onActiveElementChanged = _a7.onActiveElementChanged, doNotAllowFocusEventToPropagate = _a7.doNotAllowFocusEventToPropagate, stopFocusPropagation = _a7.stopFocusPropagation, onFocusNotification = _a7.onFocusNotification, onFocus = _a7.onFocus, shouldFocusInnerElementWhenReceivedFocus = _a7.shouldFocusInnerElementWhenReceivedFocus, defaultTabbableElement = _a7.defaultTabbableElement;
        var isImmediateDescendant = _this._isImmediateDescendantOfZone(ev.target);
        var newActiveElement;
        if (isImmediateDescendant) {
          newActiveElement = ev.target;
        } else {
          var parentElement = ev.target;
          while (parentElement && parentElement !== _this._root.current) {
            if (isElementTabbable(parentElement) && _this._isImmediateDescendantOfZone(parentElement)) {
              newActiveElement = parentElement;
              break;
            }
            parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
          }
        }
        if (shouldFocusInnerElementWhenReceivedFocus && ev.target === _this._root.current) {
          var maybeElementToFocus = defaultTabbableElement && typeof defaultTabbableElement === "function" && _this._root.current && defaultTabbableElement(_this._root.current);
          if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {
            newActiveElement = maybeElementToFocus;
            maybeElementToFocus.focus();
          } else {
            _this.focus(true);
            if (_this._activeElement) {
              newActiveElement = null;
            }
          }
        }
        var initialElementFocused = !_this._activeElement;
        if (newActiveElement && newActiveElement !== _this._activeElement) {
          if (isImmediateDescendant || initialElementFocused) {
            _this._setFocusAlignment(newActiveElement, true, true);
          }
          _this._activeElement = newActiveElement;
          if (initialElementFocused) {
            _this._updateTabIndexes();
          }
        }
        if (onActiveElementChanged) {
          onActiveElementChanged(_this._activeElement, ev);
        }
        if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {
          ev.stopPropagation();
        }
        if (onFocus) {
          onFocus(ev);
        } else if (onFocusNotification) {
          onFocusNotification();
        }
      };
      _this._onBlur = function() {
        _this._setParkedFocus(false);
      };
      _this._onMouseDown = function(ev) {
        if (_this._portalContainsElement(ev.target)) {
          return;
        }
        var disabled = _this.props.disabled;
        if (disabled) {
          return;
        }
        var target = ev.target;
        var path = [];
        while (target && target !== _this._root.current) {
          path.push(target);
          target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);
        }
        while (path.length) {
          target = path.pop();
          if (target && isElementTabbable(target)) {
            _this._setActiveElement(target, true);
          }
          if (isElementFocusZone(target)) {
            break;
          }
        }
      };
      _this._onKeyDown = function(ev, theme) {
        if (_this._portalContainsElement(ev.target)) {
          return;
        }
        var _a7 = _this.props, direction = _a7.direction, disabled = _a7.disabled, isInnerZoneKeystroke = _a7.isInnerZoneKeystroke, pagingSupportDisabled = _a7.pagingSupportDisabled, shouldEnterInnerZone = _a7.shouldEnterInnerZone;
        if (disabled) {
          return;
        }
        if (_this.props.onKeyDown) {
          _this.props.onKeyDown(ev);
        }
        if (ev.isDefaultPrevented()) {
          return;
        }
        if (_this._getDocument().activeElement === _this._root.current && _this._isInnerZone) {
          return;
        }
        if ((shouldEnterInnerZone && shouldEnterInnerZone(ev) || isInnerZoneKeystroke && isInnerZoneKeystroke(ev)) && _this._isImmediateDescendantOfZone(ev.target)) {
          var innerZone = _this._getFirstInnerZone();
          if (innerZone) {
            if (!innerZone.focus(true)) {
              return;
            }
          } else if (isElementFocusSubZone(ev.target)) {
            if (!_this.focusElement(getNextElement(ev.target, ev.target.firstChild, true))) {
              return;
            }
          } else {
            return;
          }
        } else if (ev.altKey) {
          return;
        } else {
          switch (ev.which) {
            case KeyCodes.space:
              if (_this._shouldRaiseClicksOnSpace && _this._tryInvokeClickForFocusable(ev.target, ev)) {
                break;
              }
              return;
            case KeyCodes.left:
              if (direction !== FocusZoneDirection.vertical) {
                _this._preventDefaultWhenHandled(ev);
                if (_this._moveFocusLeft(theme)) {
                  break;
                }
              }
              return;
            case KeyCodes.right:
              if (direction !== FocusZoneDirection.vertical) {
                _this._preventDefaultWhenHandled(ev);
                if (_this._moveFocusRight(theme)) {
                  break;
                }
              }
              return;
            case KeyCodes.up:
              if (direction !== FocusZoneDirection.horizontal) {
                _this._preventDefaultWhenHandled(ev);
                if (_this._moveFocusUp()) {
                  break;
                }
              }
              return;
            case KeyCodes.down:
              if (direction !== FocusZoneDirection.horizontal) {
                _this._preventDefaultWhenHandled(ev);
                if (_this._moveFocusDown()) {
                  break;
                }
              }
              return;
            case KeyCodes.pageDown:
              if (!pagingSupportDisabled && _this._moveFocusPaging(true)) {
                break;
              }
              return;
            case KeyCodes.pageUp:
              if (!pagingSupportDisabled && _this._moveFocusPaging(false)) {
                break;
              }
              return;
            case KeyCodes.tab:
              if (_this.props.allowTabKey || _this.props.handleTabKey === FocusZoneTabbableElements.all || _this.props.handleTabKey === FocusZoneTabbableElements.inputOnly && _this._isElementInput(ev.target)) {
                var focusChanged = false;
                _this._processingTabKey = true;
                if (direction === FocusZoneDirection.vertical || !_this._shouldWrapFocus(_this._activeElement, NO_HORIZONTAL_WRAP)) {
                  focusChanged = ev.shiftKey ? _this._moveFocusUp() : _this._moveFocusDown();
                } else {
                  var tabWithDirection = getRTL2(theme) ? !ev.shiftKey : ev.shiftKey;
                  focusChanged = tabWithDirection ? _this._moveFocusLeft(theme) : _this._moveFocusRight(theme);
                }
                _this._processingTabKey = false;
                if (focusChanged) {
                  break;
                } else if (_this.props.shouldResetActiveElementWhenTabFromZone) {
                  _this._activeElement = null;
                }
              }
              return;
            case KeyCodes.home:
              if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, false)) {
                return false;
              }
              var firstChild = _this._root.current && _this._root.current.firstChild;
              if (_this._root.current && firstChild && _this.focusElement(getNextElement(_this._root.current, firstChild, true))) {
                break;
              }
              return;
            case KeyCodes.end:
              if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, true)) {
                return false;
              }
              var lastChild = _this._root.current && _this._root.current.lastChild;
              if (_this._root.current && _this.focusElement(getPreviousElement(_this._root.current, lastChild, true, true, true))) {
                break;
              }
              return;
            case KeyCodes.enter:
              if (_this._shouldRaiseClicksOnEnter && _this._tryInvokeClickForFocusable(ev.target, ev)) {
                break;
              }
              return;
            default:
              return;
          }
        }
        ev.preventDefault();
        ev.stopPropagation();
      };
      _this._getHorizontalDistanceFromCenter = function(isForward, activeRect, targetRect) {
        var leftAlignment = _this._focusAlignment.left || _this._focusAlignment.x || 0;
        var targetRectTop = Math.floor(targetRect.top);
        var activeRectBottom = Math.floor(activeRect.bottom);
        var targetRectBottom = Math.floor(targetRect.bottom);
        var activeRectTop = Math.floor(activeRect.top);
        var isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;
        var isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;
        if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {
          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
            return 0;
          }
          return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
        }
        if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
          return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
        }
        return LARGE_DISTANCE_FROM_CENTER;
      };
      initializeComponentRef(_this);
      if (true) {
        warnDeprecations("FocusZone", props, {
          rootProps: void 0,
          allowTabKey: "handleTabKey",
          elementType: "as",
          ariaDescribedBy: "aria-describedby",
          ariaLabelledBy: "aria-labelledby"
        });
      }
      _this._id = getId("FocusZone");
      _this._focusAlignment = {
        left: 0,
        top: 0
      };
      _this._processingTabKey = false;
      var shouldRaiseClicksFallback = (_b = (_a6 = props.shouldRaiseClicks) !== null && _a6 !== void 0 ? _a6 : FocusZone2.defaultProps.shouldRaiseClicks) !== null && _b !== void 0 ? _b : true;
      _this._shouldRaiseClicksOnEnter = (_c = props.shouldRaiseClicksOnEnter) !== null && _c !== void 0 ? _c : shouldRaiseClicksFallback;
      _this._shouldRaiseClicksOnSpace = (_d = props.shouldRaiseClicksOnSpace) !== null && _d !== void 0 ? _d : shouldRaiseClicksFallback;
      return _this;
    }
    FocusZone2.getOuterZones = function() {
      return _outerZones.size;
    };
    FocusZone2._onKeyDownCapture = function(ev) {
      if (ev.which === KeyCodes.tab) {
        _outerZones.forEach(function(zone) {
          return zone._updateTabIndexes();
        });
      }
    };
    FocusZone2.prototype.componentDidMount = function() {
      var root2 = this._root.current;
      _allInstances[this._id] = this;
      if (root2) {
        var parentElement = getParent(root2, ALLOW_VIRTUAL_ELEMENTS);
        while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {
          if (isElementFocusZone(parentElement)) {
            this._isInnerZone = true;
            break;
          }
          parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
        }
        if (!this._isInnerZone) {
          _outerZones.add(this);
          this._root.current && this._root.current.addEventListener("keydown", FocusZone2._onKeyDownCapture, true);
        }
        this._root.current && this._root.current.addEventListener("blur", this._onBlur, true);
        this._updateTabIndexes();
        if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === "string") {
          this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement);
        } else if (this.props.defaultActiveElement) {
          this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement);
        }
        if (this.props.shouldFocusOnMount) {
          this.focus();
        }
      }
    };
    FocusZone2.prototype.componentDidUpdate = function() {
      var root2 = this._root.current;
      var doc = this._getDocument();
      if (this._activeElement && !elementContains(this._root.current, this._activeElement, ALLOW_VIRTUAL_ELEMENTS) || this._defaultFocusElement && !elementContains(this._root.current, this._defaultFocusElement, ALLOW_VIRTUAL_ELEMENTS)) {
        this._activeElement = null;
        this._defaultFocusElement = null;
        this._updateTabIndexes();
      }
      if (!this.props.preventFocusRestoration && doc && this._lastIndexPath && (doc.activeElement === doc.body || doc.activeElement === null || doc.activeElement === root2)) {
        var elementToFocus = getFocusableByIndexPath(root2, this._lastIndexPath);
        if (elementToFocus) {
          this._setActiveElement(elementToFocus, true);
          elementToFocus.focus();
          this._setParkedFocus(false);
        } else {
          this._setParkedFocus(true);
        }
      }
    };
    FocusZone2.prototype.componentWillUnmount = function() {
      delete _allInstances[this._id];
      if (!this._isInnerZone) {
        _outerZones.delete(this);
        this._root.current && this._root.current.removeEventListener("keydown", FocusZone2._onKeyDownCapture, true);
      }
      if (this._root.current) {
        this._root.current.removeEventListener("blur", this._onBlur, true);
      }
      this._activeElement = null;
      this._defaultFocusElement = null;
    };
    FocusZone2.prototype.render = function() {
      var _this = this;
      var _a6 = this.props, tag = _a6.as, elementType = _a6.elementType, rootProps = _a6.rootProps, ariaDescribedBy = _a6.ariaDescribedBy, ariaLabelledBy = _a6.ariaLabelledBy, className = _a6.className;
      var divProps = getNativeProps(this.props, htmlElementProperties);
      var Tag = tag || elementType || "div";
      this._evaluateFocusBeforeRender();
      var theme = getTheme();
      return React30.createElement(Tag, __assign8({ "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy }, divProps, rootProps, {
        className: css(getRootClass(), className),
        ref: this._mergedRef(this.props.elementRef, this._root),
        "data-focuszone-id": this._id,
        onKeyDown: function(ev) {
          return _this._onKeyDown(ev, theme);
        },
        onFocus: this._onFocus,
        onMouseDownCapture: this._onMouseDown
      }), this.props.children);
    };
    FocusZone2.prototype.focus = function(forceIntoFirstElement, bypassHiddenElements) {
      if (forceIntoFirstElement === void 0) {
        forceIntoFirstElement = false;
      }
      if (bypassHiddenElements === void 0) {
        bypassHiddenElements = false;
      }
      if (this._root.current) {
        if (!forceIntoFirstElement && this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "true" && this._isInnerZone) {
          var ownerZoneElement = this._getOwnerZone(this._root.current);
          if (ownerZoneElement !== this._root.current) {
            var ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE2)];
            return !!ownerZone && ownerZone.focusElement(this._root.current);
          }
          return false;
        } else if (!forceIntoFirstElement && this._activeElement && elementContains(this._root.current, this._activeElement) && isElementTabbable(this._activeElement) && (!bypassHiddenElements || isElementVisibleAndNotHidden(this._activeElement))) {
          this._activeElement.focus();
          return true;
        } else {
          var firstChild = this._root.current.firstChild;
          return this.focusElement(getNextElement(this._root.current, firstChild, true, void 0, void 0, void 0, void 0, void 0, bypassHiddenElements));
        }
      }
      return false;
    };
    FocusZone2.prototype.focusLast = function() {
      if (this._root.current) {
        var lastChild = this._root.current && this._root.current.lastChild;
        return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true));
      }
      return false;
    };
    FocusZone2.prototype.focusElement = function(element, forceAlignment) {
      var _a6 = this.props, onBeforeFocus = _a6.onBeforeFocus, shouldReceiveFocus = _a6.shouldReceiveFocus;
      if (shouldReceiveFocus && !shouldReceiveFocus(element) || onBeforeFocus && !onBeforeFocus(element)) {
        return false;
      }
      if (element) {
        this._setActiveElement(element, forceAlignment);
        if (this._activeElement) {
          this._activeElement.focus();
        }
        return true;
      }
      return false;
    };
    FocusZone2.prototype.setFocusAlignment = function(point) {
      this._focusAlignment = point;
    };
    Object.defineProperty(FocusZone2.prototype, "defaultFocusElement", {
      get: function() {
        return this._defaultFocusElement;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(FocusZone2.prototype, "activeElement", {
      get: function() {
        return this._activeElement;
      },
      enumerable: false,
      configurable: true
    });
    FocusZone2.prototype._evaluateFocusBeforeRender = function() {
      var root2 = this._root.current;
      var doc = this._getDocument();
      if (doc) {
        var focusedElement = doc.activeElement;
        if (focusedElement !== root2) {
          var shouldRestoreFocus = elementContains(root2, focusedElement, false);
          this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root2, focusedElement) : void 0;
        }
      }
    };
    FocusZone2.prototype._setParkedFocus = function(isParked) {
      var root2 = this._root.current;
      if (root2 && this._isParked !== isParked) {
        this._isParked = isParked;
        if (isParked) {
          if (!this.props.allowFocusRoot) {
            this._parkedTabIndex = root2.getAttribute("tabindex");
            root2.setAttribute("tabindex", "-1");
          }
          root2.focus();
        } else if (!this.props.allowFocusRoot) {
          if (this._parkedTabIndex) {
            root2.setAttribute("tabindex", this._parkedTabIndex);
            this._parkedTabIndex = void 0;
          } else {
            root2.removeAttribute("tabindex");
          }
        }
      }
    };
    FocusZone2.prototype._setActiveElement = function(element, forceAlignment) {
      var previousActiveElement = this._activeElement;
      this._activeElement = element;
      if (previousActiveElement) {
        if (isElementFocusZone(previousActiveElement)) {
          this._updateTabIndexes(previousActiveElement);
        }
        previousActiveElement.tabIndex = -1;
      }
      if (this._activeElement) {
        if (!this._focusAlignment || forceAlignment) {
          this._setFocusAlignment(element, true, true);
        }
        this._activeElement.tabIndex = 0;
      }
    };
    FocusZone2.prototype._preventDefaultWhenHandled = function(ev) {
      this.props.preventDefaultWhenHandled && ev.preventDefault();
    };
    FocusZone2.prototype._tryInvokeClickForFocusable = function(targetElement, ev) {
      var target = targetElement;
      if (target === this._root.current) {
        return false;
      }
      do {
        if (target.tagName === "BUTTON" || target.tagName === "A" || target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.tagName === "SUMMARY") {
          return false;
        }
        if (this._isImmediateDescendantOfZone(target) && target.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "true" && target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== "true") {
          raiseClickFromKeyboardEvent(target, ev);
          return true;
        }
        target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);
      } while (target !== this._root.current);
      return false;
    };
    FocusZone2.prototype._getFirstInnerZone = function(rootElement) {
      rootElement = rootElement || this._activeElement || this._root.current;
      if (!rootElement) {
        return null;
      }
      if (isElementFocusZone(rootElement)) {
        return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE2)];
      }
      var child = rootElement.firstElementChild;
      while (child) {
        if (isElementFocusZone(child)) {
          return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE2)];
        }
        var match = this._getFirstInnerZone(child);
        if (match) {
          return match;
        }
        child = child.nextElementSibling;
      }
      return null;
    };
    FocusZone2.prototype._moveFocus = function(isForward, getDistanceFromCenter, ev, useDefaultWrap) {
      if (useDefaultWrap === void 0) {
        useDefaultWrap = true;
      }
      var element = this._activeElement;
      var candidateDistance = -1;
      var candidateElement = void 0;
      var changedFocus = false;
      var isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;
      if (!element || !this._root.current) {
        return false;
      }
      if (this._isElementInput(element)) {
        if (!this._shouldInputLoseFocus(element, isForward)) {
          return false;
        }
      }
      var activeRect = isBidirectional ? element.getBoundingClientRect() : null;
      do {
        element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);
        if (isBidirectional) {
          if (element) {
            var targetRect = element.getBoundingClientRect();
            var elementDistance = getDistanceFromCenter(activeRect, targetRect);
            if (elementDistance === -1 && candidateDistance === -1) {
              candidateElement = element;
              break;
            }
            if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {
              candidateDistance = elementDistance;
              candidateElement = element;
            }
            if (candidateDistance >= 0 && elementDistance < 0) {
              break;
            }
          }
        } else {
          candidateElement = element;
          break;
        }
      } while (element);
      if (candidateElement && candidateElement !== this._activeElement) {
        changedFocus = true;
        this.focusElement(candidateElement);
      } else if (this.props.isCircularNavigation && useDefaultWrap) {
        if (isForward) {
          return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));
        } else {
          return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));
        }
      }
      return changedFocus;
    };
    FocusZone2.prototype._moveFocusDown = function() {
      var _this = this;
      var targetTop = -1;
      var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;
      if (this._moveFocus(true, function(activeRect, targetRect) {
        var distance = -1;
        var targetRectTop = Math.floor(targetRect.top);
        var activeRectBottom = Math.floor(activeRect.bottom);
        if (targetRectTop < activeRectBottom) {
          if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
          }
          return LARGE_DISTANCE_FROM_CENTER;
        }
        if (targetTop === -1 && targetRectTop >= activeRectBottom || targetRectTop === targetTop) {
          targetTop = targetRectTop;
          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
            distance = 0;
          } else {
            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
          }
        }
        return distance;
      })) {
        this._setFocusAlignment(this._activeElement, false, true);
        return true;
      }
      return false;
    };
    FocusZone2.prototype._moveFocusUp = function() {
      var _this = this;
      var targetTop = -1;
      var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;
      if (this._moveFocus(false, function(activeRect, targetRect) {
        var distance = -1;
        var targetRectBottom = Math.floor(targetRect.bottom);
        var targetRectTop = Math.floor(targetRect.top);
        var activeRectTop = Math.floor(activeRect.top);
        if (targetRectBottom > activeRectTop) {
          if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
          }
          return LARGE_DISTANCE_FROM_CENTER;
        }
        if (targetTop === -1 && targetRectBottom <= activeRectTop || targetRectTop === targetTop) {
          targetTop = targetRectTop;
          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
            distance = 0;
          } else {
            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
          }
        }
        return distance;
      })) {
        this._setFocusAlignment(this._activeElement, false, true);
        return true;
      }
      return false;
    };
    FocusZone2.prototype._moveFocusLeft = function(theme) {
      var _this = this;
      var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);
      if (this._moveFocus(getRTL2(theme), function(activeRect, targetRect) {
        var distance = -1;
        var topBottomComparison;
        if (getRTL2(theme)) {
          topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));
        } else {
          topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));
        }
        if (topBottomComparison && targetRect.right <= activeRect.right && _this.props.direction !== FocusZoneDirection.vertical) {
          distance = activeRect.right - targetRect.right;
        } else if (!shouldWrap) {
          distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
        }
        return distance;
      }, void 0, shouldWrap)) {
        this._setFocusAlignment(this._activeElement, true, false);
        return true;
      }
      return false;
    };
    FocusZone2.prototype._moveFocusRight = function(theme) {
      var _this = this;
      var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);
      if (this._moveFocus(!getRTL2(theme), function(activeRect, targetRect) {
        var distance = -1;
        var topBottomComparison;
        if (getRTL2(theme)) {
          topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));
        } else {
          topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));
        }
        if (topBottomComparison && targetRect.left >= activeRect.left && _this.props.direction !== FocusZoneDirection.vertical) {
          distance = targetRect.left - activeRect.left;
        } else if (!shouldWrap) {
          distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
        }
        return distance;
      }, void 0, shouldWrap)) {
        this._setFocusAlignment(this._activeElement, true, false);
        return true;
      }
      return false;
    };
    FocusZone2.prototype._moveFocusPaging = function(isForward, useDefaultWrap) {
      if (useDefaultWrap === void 0) {
        useDefaultWrap = true;
      }
      var element = this._activeElement;
      if (!element || !this._root.current) {
        return false;
      }
      if (this._isElementInput(element)) {
        if (!this._shouldInputLoseFocus(element, isForward)) {
          return false;
        }
      }
      var scrollableParent = findScrollableParent(element);
      if (!scrollableParent) {
        return false;
      }
      var candidateDistance = -1;
      var candidateElement = void 0;
      var targetTop = -1;
      var targetBottom = -1;
      var pagesize = scrollableParent.clientHeight;
      var activeRect = element.getBoundingClientRect();
      do {
        element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);
        if (element) {
          var targetRect = element.getBoundingClientRect();
          var targetRectTop = Math.floor(targetRect.top);
          var activeRectBottom = Math.floor(activeRect.bottom);
          var targetRectBottom = Math.floor(targetRect.bottom);
          var activeRectTop = Math.floor(activeRect.top);
          var elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);
          var isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;
          var isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;
          if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {
            break;
          }
          if (elementDistance > -1) {
            if (isForward && targetRectTop > targetTop) {
              targetTop = targetRectTop;
              candidateDistance = elementDistance;
              candidateElement = element;
            } else if (!isForward && targetRectBottom < targetBottom) {
              targetBottom = targetRectBottom;
              candidateDistance = elementDistance;
              candidateElement = element;
            } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {
              candidateDistance = elementDistance;
              candidateElement = element;
            }
          }
        }
      } while (element);
      var changedFocus = false;
      if (candidateElement && candidateElement !== this._activeElement) {
        changedFocus = true;
        this.focusElement(candidateElement);
        this._setFocusAlignment(candidateElement, false, true);
      } else if (this.props.isCircularNavigation && useDefaultWrap) {
        if (isForward) {
          return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));
        }
        return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));
      }
      return changedFocus;
    };
    FocusZone2.prototype._setFocusAlignment = function(element, isHorizontal, isVertical) {
      if (this.props.direction === FocusZoneDirection.bidirectional && (!this._focusAlignment || isHorizontal || isVertical)) {
        var rect = element.getBoundingClientRect();
        var left = rect.left + rect.width / 2;
        var top_1 = rect.top + rect.height / 2;
        if (!this._focusAlignment) {
          this._focusAlignment = { left, top: top_1 };
        }
        if (isHorizontal) {
          this._focusAlignment.left = left;
        }
        if (isVertical) {
          this._focusAlignment.top = top_1;
        }
      }
    };
    FocusZone2.prototype._isImmediateDescendantOfZone = function(element) {
      return this._getOwnerZone(element) === this._root.current;
    };
    FocusZone2.prototype._getOwnerZone = function(element) {
      var parentElement = getParent(element, ALLOW_VIRTUAL_ELEMENTS);
      while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {
        if (isElementFocusZone(parentElement)) {
          return parentElement;
        }
        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
      }
      return parentElement;
    };
    FocusZone2.prototype._updateTabIndexes = function(element) {
      if (!this._activeElement && this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === "function") {
        this._activeElement = this.props.defaultTabbableElement(this._root.current);
      }
      if (!element && this._root.current) {
        this._defaultFocusElement = null;
        element = this._root.current;
        if (this._activeElement && !elementContains(element, this._activeElement)) {
          this._activeElement = null;
        }
      }
      if (this._activeElement && !isElementTabbable(this._activeElement)) {
        this._activeElement = null;
      }
      var childNodes = element && element.children;
      for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {
        var child = childNodes[childIndex];
        if (!isElementFocusZone(child)) {
          if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "false") {
            child.setAttribute(TABINDEX, "-1");
          }
          if (isElementTabbable(child)) {
            if (this.props.disabled) {
              child.setAttribute(TABINDEX, "-1");
            } else if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {
              this._defaultFocusElement = child;
              if (child.getAttribute(TABINDEX) !== "0") {
                child.setAttribute(TABINDEX, "0");
              }
            } else if (child.getAttribute(TABINDEX) !== "-1") {
              child.setAttribute(TABINDEX, "-1");
            }
          } else if (child.tagName === "svg" && child.getAttribute("focusable") !== "false") {
            child.setAttribute("focusable", "false");
          }
        } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "true") {
          if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {
            this._defaultFocusElement = child;
            if (child.getAttribute(TABINDEX) !== "0") {
              child.setAttribute(TABINDEX, "0");
            }
          } else if (child.getAttribute(TABINDEX) !== "-1") {
            child.setAttribute(TABINDEX, "-1");
          }
        }
        this._updateTabIndexes(child);
      }
    };
    FocusZone2.prototype._isContentEditableElement = function(element) {
      return element && element.getAttribute("contenteditable") === "true";
    };
    FocusZone2.prototype._isElementInput = function(element) {
      if (element && element.tagName && (element.tagName.toLowerCase() === "input" || element.tagName.toLowerCase() === "textarea")) {
        return true;
      }
      return false;
    };
    FocusZone2.prototype._shouldInputLoseFocus = function(element, isForward) {
      if (!this._processingTabKey && element && element.type && ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1) {
        var selectionStart = element.selectionStart;
        var selectionEnd = element.selectionEnd;
        var isRangeSelected = selectionStart !== selectionEnd;
        var inputValue = element.value;
        var isReadonly = element.readOnly;
        if (isRangeSelected || selectionStart > 0 && !isForward && !isReadonly || selectionStart !== inputValue.length && isForward && !isReadonly || !!this.props.handleTabKey && !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element))) {
          return false;
        }
      }
      return true;
    };
    FocusZone2.prototype._shouldWrapFocus = function(element, noWrapDataAttribute) {
      return this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;
    };
    FocusZone2.prototype._portalContainsElement = function(element) {
      return element && !!this._root.current && portalContainsElement(element, this._root.current);
    };
    FocusZone2.prototype._getDocument = function() {
      return getDocument(this._root.current);
    };
    FocusZone2.defaultProps = {
      isCircularNavigation: false,
      direction: FocusZoneDirection.bidirectional,
      shouldRaiseClicks: true
    };
    return FocusZone2;
  }(React30.Component);

  // node_modules/@fluentui/react/lib/components/Button/BaseButton.js
  var React43 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.js
  var React42 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.base.js
  var React41 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.types.js
  var ContextualMenuItemType;
  (function(ContextualMenuItemType2) {
    ContextualMenuItemType2[ContextualMenuItemType2["Normal"] = 0] = "Normal";
    ContextualMenuItemType2[ContextualMenuItemType2["Divider"] = 1] = "Divider";
    ContextualMenuItemType2[ContextualMenuItemType2["Header"] = 2] = "Header";
    ContextualMenuItemType2[ContextualMenuItemType2["Section"] = 3] = "Section";
  })(ContextualMenuItemType || (ContextualMenuItemType = {}));

  // node_modules/@fluentui/react/lib/utilities/contextualMenu/contextualMenuUtility.js
  function getIsChecked(item) {
    if (item.canCheck) {
      return !!(item.isChecked || item.checked);
    }
    if (typeof item.isChecked === "boolean") {
      return item.isChecked;
    }
    if (typeof item.checked === "boolean") {
      return item.checked;
    }
    return null;
  }
  function hasSubmenu(item) {
    return !!(item.subMenuProps || item.items);
  }
  function isItemDisabled(item) {
    return !!(item.isDisabled || item.disabled);
  }
  function getMenuItemAriaRole(item) {
    var isChecked = getIsChecked(item);
    var canCheck = isChecked !== null;
    return canCheck ? "menuitemcheckbox" : "menuitem";
  }

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItem.base.js
  var React31 = __toESM(require_react());
  var defaultIconRenderer = function(props) {
    var item = props.item, classNames2 = props.classNames;
    var iconProps = item.iconProps;
    return React31.createElement(Icon, __assign6({}, iconProps, { className: classNames2.icon }));
  };
  var renderItemIcon = function(props) {
    var item = props.item, hasIcons = props.hasIcons;
    if (!hasIcons) {
      return null;
    }
    if (item.onRenderIcon) {
      return item.onRenderIcon(props, defaultIconRenderer);
    }
    return defaultIconRenderer(props);
  };
  var renderCheckMarkIcon = function(_a6) {
    var onCheckmarkClick = _a6.onCheckmarkClick, item = _a6.item, classNames2 = _a6.classNames;
    var isItemChecked = getIsChecked(item);
    if (onCheckmarkClick) {
      var onClick = function(e2) {
        return onCheckmarkClick(item, e2);
      };
      return React31.createElement(Icon, {
        iconName: item.canCheck !== false && isItemChecked ? "CheckMark" : "",
        className: classNames2.checkmarkIcon,
        onClick
      });
    }
    return null;
  };
  var renderItemName = function(_a6) {
    var item = _a6.item, classNames2 = _a6.classNames;
    if (item.text || item.name) {
      return React31.createElement("span", { className: classNames2.label }, item.text || item.name);
    }
    return null;
  };
  var renderSecondaryText = function(_a6) {
    var item = _a6.item, classNames2 = _a6.classNames;
    if (item.secondaryText) {
      return React31.createElement("span", { className: classNames2.secondaryText }, item.secondaryText);
    }
    return null;
  };
  var renderSubMenuIcon = function(_a6) {
    var item = _a6.item, classNames2 = _a6.classNames, theme = _a6.theme;
    if (hasSubmenu(item)) {
      return React31.createElement(Icon, __assign6({ iconName: getRTL2(theme) ? "ChevronLeft" : "ChevronRight" }, item.submenuIconProps, { className: classNames2.subMenuIcon }));
    }
    return null;
  };
  var ContextualMenuItemBase = function(_super) {
    __extends5(ContextualMenuItemBase2, _super);
    function ContextualMenuItemBase2(props) {
      var _this = _super.call(this, props) || this;
      _this.openSubMenu = function() {
        var _a6 = _this.props, item = _a6.item, openSubMenu = _a6.openSubMenu, getSubmenuTarget = _a6.getSubmenuTarget;
        if (getSubmenuTarget) {
          var submenuTarget = getSubmenuTarget();
          if (hasSubmenu(item) && openSubMenu && submenuTarget) {
            openSubMenu(item, submenuTarget);
          }
        }
      };
      _this.dismissSubMenu = function() {
        var _a6 = _this.props, item = _a6.item, dismissSubMenu = _a6.dismissSubMenu;
        if (hasSubmenu(item) && dismissSubMenu) {
          dismissSubMenu();
        }
      };
      _this.dismissMenu = function(dismissAll) {
        var dismissMenu = _this.props.dismissMenu;
        if (dismissMenu) {
          dismissMenu(void 0, dismissAll);
        }
      };
      initializeComponentRef(_this);
      return _this;
    }
    ContextualMenuItemBase2.prototype.render = function() {
      var _a6 = this.props, item = _a6.item, classNames2 = _a6.classNames;
      var renderContent = item.onRenderContent || this._renderLayout;
      return React31.createElement("div", { className: item.split ? classNames2.linkContentMenu : classNames2.linkContent }, renderContent(this.props, {
        renderCheckMarkIcon,
        renderItemIcon,
        renderItemName,
        renderSecondaryText,
        renderSubMenuIcon
      }));
    };
    ContextualMenuItemBase2.prototype._renderLayout = function(props, defaultRenders) {
      return React31.createElement(
        React31.Fragment,
        null,
        defaultRenders.renderCheckMarkIcon(props),
        defaultRenders.renderItemIcon(props),
        defaultRenders.renderItemName(props),
        defaultRenders.renderSecondaryText(props),
        defaultRenders.renderSubMenuIcon(props)
      );
    };
    return ContextualMenuItemBase2;
  }(React31.Component);

  // node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.classNames.js
  var getDividerClassNames = memoizeFunction(
    function(theme) {
      return mergeStyleSets({
        wrapper: {
          display: "inline-flex",
          height: "100%",
          alignItems: "center"
        },
        divider: {
          width: 1,
          height: "100%",
          backgroundColor: theme.palette.neutralTertiaryAlt
        }
      });
    }
  );

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.cnstyles.js
  var CONTEXTUAL_MENU_ITEM_HEIGHT = 36;
  var MediumScreenSelector = getScreenSelector(0, ScreenWidthMaxMedium);
  var getMenuItemStyles = memoizeFunction(function(theme) {
    var _a6, _b, _c, _d, _e2;
    var semanticColors = theme.semanticColors, fonts = theme.fonts, palette = theme.palette;
    var ContextualMenuItemBackgroundHoverColor = semanticColors.menuItemBackgroundHovered;
    var ContextualMenuItemTextHoverColor = semanticColors.menuItemTextHovered;
    var ContextualMenuItemBackgroundSelectedColor = semanticColors.menuItemBackgroundPressed;
    var ContextualMenuItemDividerColor = semanticColors.bodyDivider;
    var menuItemStyles = {
      item: [
        fonts.medium,
        {
          color: semanticColors.bodyText,
          position: "relative",
          boxSizing: "border-box"
        }
      ],
      divider: {
        display: "block",
        height: "1px",
        backgroundColor: ContextualMenuItemDividerColor,
        position: "relative"
      },
      root: [
        getFocusStyle(theme),
        fonts.medium,
        {
          color: semanticColors.bodyText,
          backgroundColor: "transparent",
          border: "none",
          width: "100%",
          height: CONTEXTUAL_MENU_ITEM_HEIGHT,
          lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
          display: "block",
          cursor: "pointer",
          padding: "0px 8px 0 4px",
          textAlign: "left"
        }
      ],
      rootDisabled: {
        color: semanticColors.disabledBodyText,
        cursor: "default",
        pointerEvents: "none",
        selectors: (_a6 = {}, _a6[HighContrastSelector] = {
          color: "GrayText",
          opacity: 1
        }, _a6)
      },
      rootHovered: {
        backgroundColor: ContextualMenuItemBackgroundHoverColor,
        color: ContextualMenuItemTextHoverColor,
        selectors: {
          ".ms-ContextualMenu-icon": {
            color: palette.themeDarkAlt
          },
          ".ms-ContextualMenu-submenuIcon": {
            color: palette.neutralPrimary
          }
        }
      },
      rootFocused: {
        backgroundColor: palette.white
      },
      rootChecked: {
        selectors: {
          ".ms-ContextualMenu-checkmarkIcon": {
            color: palette.neutralPrimary
          }
        }
      },
      rootPressed: {
        backgroundColor: ContextualMenuItemBackgroundSelectedColor,
        selectors: {
          ".ms-ContextualMenu-icon": {
            color: palette.themeDark
          },
          ".ms-ContextualMenu-submenuIcon": {
            color: palette.neutralPrimary
          }
        }
      },
      rootExpanded: {
        backgroundColor: ContextualMenuItemBackgroundSelectedColor,
        color: semanticColors.bodyTextChecked,
        selectors: (_b = {
          ".ms-ContextualMenu-submenuIcon": (_c = {}, _c[HighContrastSelector] = {
            color: "inherit"
          }, _c)
        }, _b[HighContrastSelector] = __assign6({}, getHighContrastNoAdjustStyle()), _b)
      },
      linkContent: {
        whiteSpace: "nowrap",
        height: "inherit",
        display: "flex",
        alignItems: "center",
        maxWidth: "100%"
      },
      anchorLink: {
        padding: "0px 8px 0 4px",
        textRendering: "auto",
        color: "inherit",
        letterSpacing: "normal",
        wordSpacing: "normal",
        textTransform: "none",
        textIndent: "0px",
        textShadow: "none",
        textDecoration: "none",
        boxSizing: "border-box"
      },
      label: {
        margin: "0 4px",
        verticalAlign: "middle",
        display: "inline-block",
        flexGrow: "1",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      },
      secondaryText: {
        color: theme.palette.neutralSecondary,
        paddingLeft: "20px",
        textAlign: "right"
      },
      icon: {
        display: "inline-block",
        minHeight: "1px",
        maxHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
        fontSize: IconFontSizes.medium,
        width: IconFontSizes.medium,
        margin: "0 4px",
        verticalAlign: "middle",
        flexShrink: "0",
        selectors: (_d = {}, _d[MediumScreenSelector] = {
          fontSize: IconFontSizes.large,
          width: IconFontSizes.large
        }, _d)
      },
      iconColor: {
        color: semanticColors.menuIcon
      },
      iconDisabled: {
        color: semanticColors.disabledBodyText
      },
      checkmarkIcon: {
        color: semanticColors.bodySubtext
      },
      subMenuIcon: {
        height: CONTEXTUAL_MENU_ITEM_HEIGHT,
        lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
        color: palette.neutralSecondary,
        textAlign: "center",
        display: "inline-block",
        verticalAlign: "middle",
        flexShrink: "0",
        fontSize: IconFontSizes.small,
        selectors: (_e2 = {
          ":hover": {
            color: palette.neutralPrimary
          },
          ":active": {
            color: palette.neutralPrimary
          }
        }, _e2[MediumScreenSelector] = {
          fontSize: IconFontSizes.medium
        }, _e2)
      },
      splitButtonFlexContainer: [
        getFocusStyle(theme),
        {
          display: "flex",
          height: CONTEXTUAL_MENU_ITEM_HEIGHT,
          flexWrap: "nowrap",
          justifyContent: "center",
          alignItems: "flex-start"
        }
      ]
    };
    return concatStyleSets(menuItemStyles);
  });

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.classNames.js
  var CONTEXTUAL_SPLIT_MENU_MINWIDTH = "28px";
  var MediumScreenSelector2 = getScreenSelector(0, ScreenWidthMaxMedium);
  var getSplitButtonVerticalDividerClassNames = memoizeFunction(
    function(theme) {
      var _a6;
      return mergeStyleSets(getDividerClassNames(theme), {
        wrapper: {
          position: "absolute",
          right: 28,
          selectors: (_a6 = {}, _a6[MediumScreenSelector2] = {
            right: 32
          }, _a6)
        },
        divider: {
          height: 16,
          width: 1
        }
      });
    }
  );
  var GlobalClassNames5 = {
    item: "ms-ContextualMenu-item",
    divider: "ms-ContextualMenu-divider",
    root: "ms-ContextualMenu-link",
    isChecked: "is-checked",
    isExpanded: "is-expanded",
    isDisabled: "is-disabled",
    linkContent: "ms-ContextualMenu-linkContent",
    linkContentMenu: "ms-ContextualMenu-linkContent",
    icon: "ms-ContextualMenu-icon",
    iconColor: "ms-ContextualMenu-iconColor",
    checkmarkIcon: "ms-ContextualMenu-checkmarkIcon",
    subMenuIcon: "ms-ContextualMenu-submenuIcon",
    label: "ms-ContextualMenu-itemText",
    secondaryText: "ms-ContextualMenu-secondaryText",
    splitMenu: "ms-ContextualMenu-splitMenu",
    screenReaderText: "ms-ContextualMenu-screenReaderText"
  };
  var getItemClassNames = memoizeFunction(function(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className) {
    var _a6, _b, _c, _d;
    var styles2 = getMenuItemStyles(theme);
    var classNames2 = getGlobalClassNames(GlobalClassNames5, theme);
    return mergeStyleSets({
      item: [classNames2.item, styles2.item, itemClassName],
      divider: [classNames2.divider, styles2.divider, dividerClassName],
      root: [
        classNames2.root,
        styles2.root,
        checked && [classNames2.isChecked, styles2.rootChecked],
        isAnchorLink && styles2.anchorLink,
        expanded && [classNames2.isExpanded, styles2.rootExpanded],
        disabled && [classNames2.isDisabled, styles2.rootDisabled],
        !disabled && !expanded && [
          {
            selectors: (_a6 = {
              ":hover": styles2.rootHovered,
              ":active": styles2.rootPressed
            }, _a6["." + IsFocusVisibleClassName + " &:focus, ." + IsFocusVisibleClassName + " &:focus:hover"] = styles2.rootFocused, _a6["." + IsFocusVisibleClassName + " &:hover"] = { background: "inherit;" }, _a6)
          }
        ],
        className
      ],
      splitPrimary: [
        styles2.root,
        {
          width: "calc(100% - " + CONTEXTUAL_SPLIT_MENU_MINWIDTH + ")"
        },
        checked && ["is-checked", styles2.rootChecked],
        (disabled || primaryDisabled) && ["is-disabled", styles2.rootDisabled],
        !(disabled || primaryDisabled) && !checked && [
          {
            selectors: (_b = {
              ":hover": styles2.rootHovered
            }, _b[":hover ~ ." + classNames2.splitMenu] = styles2.rootHovered, _b[":active"] = styles2.rootPressed, _b["." + IsFocusVisibleClassName + " &:focus, ." + IsFocusVisibleClassName + " &:focus:hover"] = styles2.rootFocused, _b["." + IsFocusVisibleClassName + " &:hover"] = { background: "inherit;" }, _b)
          }
        ]
      ],
      splitMenu: [
        classNames2.splitMenu,
        styles2.root,
        {
          flexBasis: "0",
          padding: "0 8px",
          minWidth: CONTEXTUAL_SPLIT_MENU_MINWIDTH
        },
        expanded && ["is-expanded", styles2.rootExpanded],
        disabled && ["is-disabled", styles2.rootDisabled],
        !disabled && !expanded && [
          {
            selectors: (_c = {
              ":hover": styles2.rootHovered,
              ":active": styles2.rootPressed
            }, _c["." + IsFocusVisibleClassName + " &:focus, ." + IsFocusVisibleClassName + " &:focus:hover"] = styles2.rootFocused, _c["." + IsFocusVisibleClassName + " &:hover"] = { background: "inherit;" }, _c)
          }
        ]
      ],
      anchorLink: styles2.anchorLink,
      linkContent: [classNames2.linkContent, styles2.linkContent],
      linkContentMenu: [
        classNames2.linkContentMenu,
        styles2.linkContent,
        {
          justifyContent: "center"
        }
      ],
      icon: [
        classNames2.icon,
        knownIcon && styles2.iconColor,
        styles2.icon,
        iconClassName,
        disabled && [classNames2.isDisabled, styles2.iconDisabled]
      ],
      iconColor: styles2.iconColor,
      checkmarkIcon: [classNames2.checkmarkIcon, knownIcon && styles2.checkmarkIcon, styles2.icon, iconClassName],
      subMenuIcon: [
        classNames2.subMenuIcon,
        styles2.subMenuIcon,
        subMenuClassName,
        expanded && { color: theme.palette.neutralPrimary },
        disabled && [styles2.iconDisabled]
      ],
      label: [classNames2.label, styles2.label],
      secondaryText: [classNames2.secondaryText, styles2.secondaryText],
      splitContainer: [
        styles2.splitButtonFlexContainer,
        !disabled && !checked && [
          {
            selectors: (_d = {}, _d["." + IsFocusVisibleClassName + " &:focus, ." + IsFocusVisibleClassName + " &:focus:hover"] = styles2.rootFocused, _d)
          }
        ]
      ],
      screenReaderText: [
        classNames2.screenReaderText,
        styles2.screenReaderText,
        hiddenContentStyle,
        { visibility: "hidden" }
      ]
    });
  });
  var getItemStyles = function(props) {
    var theme = props.theme, disabled = props.disabled, expanded = props.expanded, checked = props.checked, isAnchorLink = props.isAnchorLink, knownIcon = props.knownIcon, itemClassName = props.itemClassName, dividerClassName = props.dividerClassName, iconClassName = props.iconClassName, subMenuClassName = props.subMenuClassName, primaryDisabled = props.primaryDisabled, className = props.className;
    return getItemClassNames(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className);
  };

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItem.js
  var ContextualMenuItem = styled(ContextualMenuItemBase, getItemStyles, void 0, { scope: "ContextualMenuItem" });

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuAnchor.js
  var React34 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuItemWrapper.js
  var React32 = __toESM(require_react());
  var ContextualMenuItemWrapper = function(_super) {
    __extends5(ContextualMenuItemWrapper2, _super);
    function ContextualMenuItemWrapper2(props) {
      var _this = _super.call(this, props) || this;
      _this._onItemMouseEnter = function(ev) {
        var _a6 = _this.props, item = _a6.item, onItemMouseEnter = _a6.onItemMouseEnter;
        if (onItemMouseEnter) {
          onItemMouseEnter(item, ev, ev.currentTarget);
        }
      };
      _this._onItemClick = function(ev) {
        var _a6 = _this.props, item = _a6.item, onItemClickBase = _a6.onItemClickBase;
        if (onItemClickBase) {
          onItemClickBase(item, ev, ev.currentTarget);
        }
      };
      _this._onItemMouseLeave = function(ev) {
        var _a6 = _this.props, item = _a6.item, onItemMouseLeave = _a6.onItemMouseLeave;
        if (onItemMouseLeave) {
          onItemMouseLeave(item, ev);
        }
      };
      _this._onItemKeyDown = function(ev) {
        var _a6 = _this.props, item = _a6.item, onItemKeyDown = _a6.onItemKeyDown;
        if (onItemKeyDown) {
          onItemKeyDown(item, ev);
        }
      };
      _this._onItemMouseMove = function(ev) {
        var _a6 = _this.props, item = _a6.item, onItemMouseMove = _a6.onItemMouseMove;
        if (onItemMouseMove) {
          onItemMouseMove(item, ev, ev.currentTarget);
        }
      };
      _this._getSubmenuTarget = function() {
        return void 0;
      };
      initializeComponentRef(_this);
      return _this;
    }
    ContextualMenuItemWrapper2.prototype.shouldComponentUpdate = function(newProps) {
      return !shallowCompare(newProps, this.props);
    };
    return ContextualMenuItemWrapper2;
  }(React32.Component);

  // node_modules/@fluentui/react/lib/utilities/keytips/KeytipConstants.js
  var KTP_PREFIX = "ktp";
  var KTP_SEPARATOR = "-";
  var KTP_FULL_PREFIX = KTP_PREFIX + KTP_SEPARATOR;
  var DATAKTP_TARGET = "data-ktp-target";
  var DATAKTP_EXECUTE_TARGET = "data-ktp-execute-target";
  var KTP_LAYER_ID = "ktp-layer-id";
  var KeytipEvents;
  (function(KeytipEvents2) {
    KeytipEvents2.KEYTIP_ADDED = "keytipAdded";
    KeytipEvents2.KEYTIP_REMOVED = "keytipRemoved";
    KeytipEvents2.KEYTIP_UPDATED = "keytipUpdated";
    KeytipEvents2.PERSISTED_KEYTIP_ADDED = "persistedKeytipAdded";
    KeytipEvents2.PERSISTED_KEYTIP_REMOVED = "persistedKeytipRemoved";
    KeytipEvents2.PERSISTED_KEYTIP_EXECUTE = "persistedKeytipExecute";
    KeytipEvents2.ENTER_KEYTIP_MODE = "enterKeytipMode";
    KeytipEvents2.EXIT_KEYTIP_MODE = "exitKeytipMode";
  })(KeytipEvents || (KeytipEvents = {}));

  // node_modules/@fluentui/react/lib/utilities/keytips/KeytipManager.js
  var KeytipManager = function() {
    function KeytipManager2() {
      this.keytips = {};
      this.persistedKeytips = {};
      this.sequenceMapping = {};
      this.inKeytipMode = false;
      this.shouldEnterKeytipMode = true;
      this.delayUpdatingKeytipChange = false;
    }
    KeytipManager2.getInstance = function() {
      return this._instance;
    };
    KeytipManager2.prototype.init = function(delayUpdatingKeytipChange) {
      this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;
    };
    KeytipManager2.prototype.register = function(keytipProps, persisted) {
      if (persisted === void 0) {
        persisted = false;
      }
      var props = keytipProps;
      if (!persisted) {
        props = this.addParentOverflow(keytipProps);
        this.sequenceMapping[props.keySequences.toString()] = props;
      }
      var uniqueKeytip = this._getUniqueKtp(props);
      persisted ? this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip : this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip;
      if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
        var event_1 = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;
        EventGroup.raise(this, event_1, {
          keytip: props,
          uniqueID: uniqueKeytip.uniqueID
        });
      }
      return uniqueKeytip.uniqueID;
    };
    KeytipManager2.prototype.update = function(keytipProps, uniqueID) {
      var newKeytipProps = this.addParentOverflow(keytipProps);
      var uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);
      var oldKeyTip = this.keytips[uniqueID];
      if (oldKeyTip) {
        uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;
        this.keytips[uniqueID] = uniqueKeytip;
        delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];
        this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;
        if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
          EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {
            keytip: uniqueKeytip.keytip,
            uniqueID: uniqueKeytip.uniqueID
          });
        }
      }
    };
    KeytipManager2.prototype.unregister = function(keytipToRemove, uniqueID, persisted) {
      if (persisted === void 0) {
        persisted = false;
      }
      persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];
      !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];
      var event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;
      if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
        EventGroup.raise(this, event, {
          keytip: keytipToRemove,
          uniqueID
        });
      }
    };
    KeytipManager2.prototype.enterKeytipMode = function() {
      EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);
    };
    KeytipManager2.prototype.exitKeytipMode = function() {
      EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);
    };
    KeytipManager2.prototype.getKeytips = function() {
      var _this = this;
      return Object.keys(this.keytips).map(function(key) {
        return _this.keytips[key].keytip;
      });
    };
    KeytipManager2.prototype.addParentOverflow = function(keytipProps) {
      var fullSequence = __spreadArray5([], keytipProps.keySequences);
      fullSequence.pop();
      if (fullSequence.length !== 0) {
        var parentKeytip = this.sequenceMapping[fullSequence.toString()];
        if (parentKeytip && parentKeytip.overflowSetSequence) {
          return __assign6(__assign6({}, keytipProps), { overflowSetSequence: parentKeytip.overflowSetSequence });
        }
      }
      return keytipProps;
    };
    KeytipManager2.prototype.menuExecute = function(overflowButtonSequences, keytipSequences) {
      EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {
        overflowButtonSequences,
        keytipSequences
      });
    };
    KeytipManager2.prototype._getUniqueKtp = function(keytipProps, uniqueID) {
      if (uniqueID === void 0) {
        uniqueID = getId();
      }
      return { keytip: __assign6({}, keytipProps), uniqueID };
    };
    KeytipManager2._instance = new KeytipManager2();
    return KeytipManager2;
  }();

  // node_modules/@fluentui/react/lib/utilities/keytips/KeytipUtils.js
  function sequencesToID(keySequences) {
    return keySequences.reduce(function(prevValue, keySequence) {
      return prevValue + KTP_SEPARATOR + keySequence.split("").join(KTP_SEPARATOR);
    }, KTP_PREFIX);
  }
  function mergeOverflows(keySequences, overflowKeySequences) {
    var overflowSequenceLen = overflowKeySequences.length;
    var overflowSequence = __spreadArray5([], overflowKeySequences).pop();
    var newKeySequences = __spreadArray5([], keySequences);
    return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence);
  }
  function getAriaDescribedBy(keySequences) {
    var describedby = " " + KTP_LAYER_ID;
    if (!keySequences.length) {
      return describedby;
    }
    return describedby + " " + sequencesToID(keySequences);
  }

  // node_modules/@fluentui/react/lib/components/KeytipData/useKeytipData.js
  var React33 = __toESM(require_react());
  function useKeytipData(options) {
    var uniqueId = React33.useRef();
    var keytipProps = options.keytipProps ? __assign6({ disabled: options.disabled }, options.keytipProps) : void 0;
    var keytipManager = useConst(KeytipManager.getInstance());
    var prevOptions = usePrevious(options);
    useIsomorphicLayoutEffect(function() {
      if (uniqueId.current && keytipProps && ((prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.keytipProps) !== options.keytipProps || (prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.disabled) !== options.disabled)) {
        keytipManager.update(keytipProps, uniqueId.current);
      }
    });
    useIsomorphicLayoutEffect(function() {
      if (keytipProps) {
        uniqueId.current = keytipManager.register(keytipProps);
      }
      return function() {
        keytipProps && keytipManager.unregister(keytipProps, uniqueId.current);
      };
    }, []);
    var nativeKeytipProps = {
      ariaDescribedBy: void 0,
      keytipId: void 0
    };
    if (keytipProps) {
      nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);
    }
    return nativeKeytipProps;
  }
  function getKeytipData(keytipManager, keytipProps, describedByPrepend) {
    var newKeytipProps = keytipManager.addParentOverflow(keytipProps);
    var ariaDescribedBy = mergeAriaAttributeValues(describedByPrepend, getAriaDescribedBy(newKeytipProps.keySequences));
    var keySequences = __spreadArray5([], newKeytipProps.keySequences);
    if (newKeytipProps.overflowSetSequence) {
      keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);
    }
    var keytipId = sequencesToID(keySequences);
    return {
      ariaDescribedBy,
      keytipId
    };
  }

  // node_modules/@fluentui/react/lib/components/KeytipData/KeytipData.js
  var KeytipData = function(props) {
    var _a6;
    var children = props.children, keytipDataProps = __rest5(props, ["children"]);
    var _b = useKeytipData(keytipDataProps), keytipId = _b.keytipId, ariaDescribedBy = _b.ariaDescribedBy;
    return children((_a6 = {}, _a6[DATAKTP_TARGET] = keytipId, _a6[DATAKTP_EXECUTE_TARGET] = keytipId, _a6["aria-describedby"] = ariaDescribedBy, _a6));
  };

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuAnchor.js
  var ContextualMenuAnchor = function(_super) {
    __extends5(ContextualMenuAnchor2, _super);
    function ContextualMenuAnchor2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this._anchor = React34.createRef();
      _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
        return __assign6(__assign6({}, keytipProps), { hasMenu: true });
      });
      _this._getSubmenuTarget = function() {
        return _this._anchor.current ? _this._anchor.current : void 0;
      };
      _this._onItemClick = function(ev) {
        var _a6 = _this.props, item = _a6.item, onItemClick = _a6.onItemClick;
        if (onItemClick) {
          onItemClick(item, ev);
        }
      };
      _this._renderAriaDescription = function(ariaDescription, className) {
        return ariaDescription ? React34.createElement("span", { id: _this._ariaDescriptionId, className }, ariaDescription) : null;
      };
      return _this;
    }
    ContextualMenuAnchor2.prototype.render = function() {
      var _this = this;
      var _a6 = this.props, item = _a6.item, classNames2 = _a6.classNames, index = _a6.index, focusableElementIndex = _a6.focusableElementIndex, totalItemCount = _a6.totalItemCount, hasCheckmarks = _a6.hasCheckmarks, hasIcons = _a6.hasIcons, _b = _a6.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, expandedMenuItemKey = _a6.expandedMenuItemKey, onItemClick = _a6.onItemClick, openSubMenu = _a6.openSubMenu, dismissSubMenu = _a6.dismissSubMenu, dismissMenu = _a6.dismissMenu;
      var anchorRel = item.rel;
      if (item.target && item.target.toLowerCase() === "_blank") {
        anchorRel = anchorRel ? anchorRel : "nofollow noopener noreferrer";
      }
      var itemHasSubmenu = hasSubmenu(item);
      var nativeProps = getNativeProps(item, anchorProperties);
      var disabled = isItemDisabled(item);
      var itemProps = item.itemProps, ariaDescription = item.ariaDescription;
      var keytipProps = item.keytipProps;
      if (keytipProps && itemHasSubmenu) {
        keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
      }
      if (ariaDescription) {
        this._ariaDescriptionId = getId();
      }
      var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : void 0, nativeProps["aria-describedby"]);
      var additionalItemProperties = {
        "aria-describedby": ariaDescribedByIds
      };
      return React34.createElement(
        "div",
        null,
        React34.createElement(KeytipData, { keytipProps: item.keytipProps, ariaDescribedBy: ariaDescribedByIds, disabled }, function(keytipAttributes) {
          return React34.createElement(
            "a",
            __assign6({}, additionalItemProperties, nativeProps, keytipAttributes, {
              ref: _this._anchor,
              href: item.href,
              target: item.target,
              rel: anchorRel,
              className: classNames2.root,
              role: "menuitem",
              "aria-haspopup": itemHasSubmenu || void 0,
              "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : void 0,
              "aria-posinset": focusableElementIndex + 1,
              "aria-setsize": totalItemCount,
              "aria-disabled": isItemDisabled(item),
              style: item.style,
              onClick: _this._onItemClick,
              onMouseEnter: _this._onItemMouseEnter,
              onMouseLeave: _this._onItemMouseLeave,
              onMouseMove: _this._onItemMouseMove,
              onKeyDown: itemHasSubmenu ? _this._onItemKeyDown : void 0
            }),
            React34.createElement(ChildrenRenderer, __assign6({ componentRef: item.componentRef, item, classNames: classNames2, index, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : void 0, hasIcons, openSubMenu, dismissSubMenu, dismissMenu, getSubmenuTarget: _this._getSubmenuTarget }, itemProps)),
            _this._renderAriaDescription(ariaDescription, classNames2.screenReaderText)
          );
        })
      );
    };
    return ContextualMenuAnchor2;
  }(ContextualMenuItemWrapper);

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuButton.js
  var React35 = __toESM(require_react());
  var ContextualMenuButton = function(_super) {
    __extends5(ContextualMenuButton2, _super);
    function ContextualMenuButton2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this._btn = React35.createRef();
      _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
        return __assign6(__assign6({}, keytipProps), { hasMenu: true });
      });
      _this._renderAriaDescription = function(ariaDescription, className) {
        return ariaDescription ? React35.createElement("span", { id: _this._ariaDescriptionId, className }, ariaDescription) : null;
      };
      _this._getSubmenuTarget = function() {
        return _this._btn.current ? _this._btn.current : void 0;
      };
      return _this;
    }
    ContextualMenuButton2.prototype.render = function() {
      var _this = this;
      var _a6 = this.props, item = _a6.item, classNames2 = _a6.classNames, index = _a6.index, focusableElementIndex = _a6.focusableElementIndex, totalItemCount = _a6.totalItemCount, hasCheckmarks = _a6.hasCheckmarks, hasIcons = _a6.hasIcons, _b = _a6.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, expandedMenuItemKey = _a6.expandedMenuItemKey, onItemMouseDown2 = _a6.onItemMouseDown, onItemClick = _a6.onItemClick, openSubMenu = _a6.openSubMenu, dismissSubMenu = _a6.dismissSubMenu, dismissMenu = _a6.dismissMenu;
      var isChecked = getIsChecked(item);
      var canCheck = isChecked !== null;
      var defaultRole = getMenuItemAriaRole(item);
      var itemHasSubmenu = hasSubmenu(item);
      var itemProps = item.itemProps, ariaLabel = item.ariaLabel, ariaDescription = item.ariaDescription;
      var buttonNativeProperties = getNativeProps(item, buttonProperties);
      delete buttonNativeProperties.disabled;
      var itemRole = item.role || defaultRole;
      if (ariaDescription) {
        this._ariaDescriptionId = getId();
      }
      var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : void 0, buttonNativeProperties["aria-describedby"]);
      var itemButtonProperties = {
        className: classNames2.root,
        onClick: this._onItemClick,
        onKeyDown: itemHasSubmenu ? this._onItemKeyDown : void 0,
        onMouseEnter: this._onItemMouseEnter,
        onMouseLeave: this._onItemMouseLeave,
        onMouseDown: function(ev) {
          return onItemMouseDown2 ? onItemMouseDown2(item, ev) : void 0;
        },
        onMouseMove: this._onItemMouseMove,
        href: item.href,
        title: item.title,
        "aria-label": ariaLabel,
        "aria-describedby": ariaDescribedByIds,
        "aria-haspopup": itemHasSubmenu || void 0,
        "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : void 0,
        "aria-posinset": focusableElementIndex + 1,
        "aria-setsize": totalItemCount,
        "aria-disabled": isItemDisabled(item),
        "aria-checked": (itemRole === "menuitemcheckbox" || itemRole === "menuitemradio") && canCheck ? !!isChecked : void 0,
        "aria-selected": itemRole === "menuitem" && canCheck ? !!isChecked : void 0,
        role: itemRole,
        style: item.style
      };
      var keytipProps = item.keytipProps;
      if (keytipProps && itemHasSubmenu) {
        keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
      }
      return React35.createElement(KeytipData, { keytipProps, ariaDescribedBy: ariaDescribedByIds, disabled: isItemDisabled(item) }, function(keytipAttributes) {
        return React35.createElement(
          "button",
          __assign6({ ref: _this._btn }, buttonNativeProperties, itemButtonProperties, keytipAttributes),
          React35.createElement(ChildrenRenderer, __assign6({ componentRef: item.componentRef, item, classNames: classNames2, index, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : void 0, hasIcons, openSubMenu, dismissSubMenu, dismissMenu, getSubmenuTarget: _this._getSubmenuTarget }, itemProps)),
          _this._renderAriaDescription(ariaDescription, classNames2.screenReaderText)
        );
      });
    };
    return ContextualMenuButton2;
  }(ContextualMenuItemWrapper);

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.js
  var React37 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.styles.js
  var getStyles6 = function(props) {
    var theme = props.theme, getClassNames9 = props.getClassNames, className = props.className;
    if (!theme) {
      throw new Error("Theme is undefined or null.");
    }
    if (getClassNames9) {
      var names = getClassNames9(theme);
      return {
        wrapper: [names.wrapper],
        divider: [names.divider]
      };
    }
    return {
      wrapper: [
        {
          display: "inline-flex",
          height: "100%",
          alignItems: "center"
        },
        className
      ],
      divider: [
        {
          width: 1,
          height: "100%",
          backgroundColor: theme.palette.neutralTertiaryAlt
        }
      ]
    };
  };

  // node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.base.js
  var React36 = __toESM(require_react());
  var getClassNames6 = classNamesFunction();
  var VerticalDividerBase = React36.forwardRef(function(props, ref) {
    var styles2 = props.styles, theme = props.theme, deprecatedGetClassNames = props.getClassNames, className = props.className;
    var classNames2 = getClassNames6(styles2, { theme, getClassNames: deprecatedGetClassNames, className });
    return React36.createElement(
      "span",
      { className: classNames2.wrapper, ref },
      React36.createElement("span", { className: classNames2.divider })
    );
  });
  VerticalDividerBase.displayName = "VerticalDividerBase";

  // node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.js
  var VerticalDivider = styled(VerticalDividerBase, getStyles6, void 0, {
    scope: "VerticalDivider"
  });

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.js
  var TouchIdleDelay = 500;
  var ContextualMenuSplitButton = function(_super) {
    __extends5(ContextualMenuSplitButton2, _super);
    function ContextualMenuSplitButton2(props) {
      var _this = _super.call(this, props) || this;
      _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
        return __assign6(__assign6({}, keytipProps), { hasMenu: true });
      });
      _this._onItemKeyDown = function(ev) {
        var _a6 = _this.props, item = _a6.item, onItemKeyDown = _a6.onItemKeyDown;
        if (ev.which === KeyCodes.enter) {
          _this._executeItemClick(ev);
          ev.preventDefault();
          ev.stopPropagation();
        } else if (onItemKeyDown) {
          onItemKeyDown(item, ev);
        }
      };
      _this._getSubmenuTarget = function() {
        return _this._splitButton;
      };
      _this._renderAriaDescription = function(ariaDescription, className) {
        return ariaDescription ? React37.createElement("span", { id: _this._ariaDescriptionId, className }, ariaDescription) : null;
      };
      _this._onItemMouseEnterPrimary = function(ev) {
        var _a6 = _this.props, item = _a6.item, onItemMouseEnter = _a6.onItemMouseEnter;
        if (onItemMouseEnter) {
          onItemMouseEnter(__assign6(__assign6({}, item), { subMenuProps: void 0, items: void 0 }), ev, _this._splitButton);
        }
      };
      _this._onItemMouseEnterIcon = function(ev) {
        var _a6 = _this.props, item = _a6.item, onItemMouseEnter = _a6.onItemMouseEnter;
        if (onItemMouseEnter) {
          onItemMouseEnter(item, ev, _this._splitButton);
        }
      };
      _this._onItemMouseMovePrimary = function(ev) {
        var _a6 = _this.props, item = _a6.item, onItemMouseMove = _a6.onItemMouseMove;
        if (onItemMouseMove) {
          onItemMouseMove(__assign6(__assign6({}, item), { subMenuProps: void 0, items: void 0 }), ev, _this._splitButton);
        }
      };
      _this._onItemMouseMoveIcon = function(ev) {
        var _a6 = _this.props, item = _a6.item, onItemMouseMove = _a6.onItemMouseMove;
        if (onItemMouseMove) {
          onItemMouseMove(item, ev, _this._splitButton);
        }
      };
      _this._onIconItemClick = function(ev) {
        var _a6 = _this.props, item = _a6.item, onItemClickBase = _a6.onItemClickBase;
        if (onItemClickBase) {
          onItemClickBase(item, ev, _this._splitButton ? _this._splitButton : ev.currentTarget);
        }
      };
      _this._executeItemClick = function(ev) {
        var _a6 = _this.props, item = _a6.item, executeItemClick = _a6.executeItemClick, onItemClick = _a6.onItemClick;
        if (item.disabled || item.isDisabled) {
          return;
        }
        if (_this._processingTouch && onItemClick) {
          return onItemClick(item, ev);
        }
        if (executeItemClick) {
          executeItemClick(item, ev);
        }
      };
      _this._onTouchStart = function(ev) {
        if (_this._splitButton && !("onpointerdown" in _this._splitButton)) {
          _this._handleTouchAndPointerEvent(ev);
        }
      };
      _this._onPointerDown = function(ev) {
        if (ev.pointerType === "touch") {
          _this._handleTouchAndPointerEvent(ev);
          ev.preventDefault();
          ev.stopImmediatePropagation();
        }
      };
      _this._async = new Async(_this);
      _this._events = new EventGroup(_this);
      return _this;
    }
    ContextualMenuSplitButton2.prototype.componentDidMount = function() {
      if (this._splitButton && "onpointerdown" in this._splitButton) {
        this._events.on(this._splitButton, "pointerdown", this._onPointerDown, true);
      }
    };
    ContextualMenuSplitButton2.prototype.componentWillUnmount = function() {
      this._async.dispose();
      this._events.dispose();
    };
    ContextualMenuSplitButton2.prototype.render = function() {
      var _this = this;
      var _a6 = this.props, item = _a6.item, classNames2 = _a6.classNames, index = _a6.index, focusableElementIndex = _a6.focusableElementIndex, totalItemCount = _a6.totalItemCount, hasCheckmarks = _a6.hasCheckmarks, hasIcons = _a6.hasIcons, onItemMouseLeave = _a6.onItemMouseLeave, expandedMenuItemKey = _a6.expandedMenuItemKey;
      var itemHasSubmenu = hasSubmenu(item);
      var keytipProps = item.keytipProps;
      if (keytipProps) {
        keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
      }
      var ariaDescription = item.ariaDescription;
      if (ariaDescription) {
        this._ariaDescriptionId = getId();
      }
      return React37.createElement(KeytipData, { keytipProps, disabled: isItemDisabled(item) }, function(keytipAttributes) {
        return React37.createElement(
          "div",
          { "data-ktp-target": keytipAttributes["data-ktp-target"], ref: function(splitButton) {
            return _this._splitButton = splitButton;
          }, role: getMenuItemAriaRole(item), "aria-label": item.ariaLabel, className: classNames2.splitContainer, "aria-disabled": isItemDisabled(item), "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : void 0, "aria-haspopup": true, "aria-describedby": mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? _this._ariaDescriptionId : void 0, keytipAttributes["aria-describedby"]), "aria-checked": item.isChecked || item.checked, "aria-posinset": focusableElementIndex + 1, "aria-setsize": totalItemCount, onMouseEnter: _this._onItemMouseEnterPrimary, onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(_this, __assign6(__assign6({}, item), { subMenuProps: null, items: null })) : void 0, onMouseMove: _this._onItemMouseMovePrimary, onKeyDown: _this._onItemKeyDown, onClick: _this._executeItemClick, onTouchStart: _this._onTouchStart, tabIndex: 0, "data-is-focusable": true, "aria-roledescription": item["aria-roledescription"] },
          _this._renderSplitPrimaryButton(item, classNames2, index, hasCheckmarks, hasIcons),
          _this._renderSplitDivider(item),
          _this._renderSplitIconButton(item, classNames2, index, keytipAttributes),
          _this._renderAriaDescription(ariaDescription, classNames2.screenReaderText)
        );
      });
    };
    ContextualMenuSplitButton2.prototype._renderSplitPrimaryButton = function(item, classNames2, index, hasCheckmarks, hasIcons) {
      var _a6 = this.props, _b = _a6.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, onItemClick = _a6.onItemClick;
      var itemProps = {
        key: item.key,
        disabled: isItemDisabled(item) || item.primaryDisabled,
        name: item.name,
        text: item.text || item.name,
        secondaryText: item.secondaryText,
        className: classNames2.splitPrimary,
        canCheck: item.canCheck,
        isChecked: item.isChecked,
        checked: item.checked,
        iconProps: item.iconProps,
        onRenderIcon: item.onRenderIcon,
        data: item.data,
        "data-is-focusable": false
      };
      var itemComponentProps = item.itemProps;
      return React37.createElement(
        "button",
        __assign6({}, getNativeProps(itemProps, buttonProperties)),
        React37.createElement(ChildrenRenderer, __assign6({ "data-is-focusable": false, item: itemProps, classNames: classNames2, index, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : void 0, hasIcons }, itemComponentProps))
      );
    };
    ContextualMenuSplitButton2.prototype._renderSplitDivider = function(item) {
      var getDividerClassNames2 = item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;
      return React37.createElement(VerticalDivider, { getClassNames: getDividerClassNames2 });
    };
    ContextualMenuSplitButton2.prototype._renderSplitIconButton = function(item, classNames2, index, keytipAttributes) {
      var _a6 = this.props, _b = _a6.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, onItemMouseLeave = _a6.onItemMouseLeave, onItemMouseDown2 = _a6.onItemMouseDown, openSubMenu = _a6.openSubMenu, dismissSubMenu = _a6.dismissSubMenu, dismissMenu = _a6.dismissMenu;
      var itemProps = {
        onClick: this._onIconItemClick,
        disabled: isItemDisabled(item),
        className: classNames2.splitMenu,
        subMenuProps: item.subMenuProps,
        submenuIconProps: item.submenuIconProps,
        split: true,
        key: item.key
      };
      var buttonProps = __assign6(__assign6({}, getNativeProps(itemProps, buttonProperties)), {
        onMouseEnter: this._onItemMouseEnterIcon,
        onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : void 0,
        onMouseDown: function(ev) {
          return onItemMouseDown2 ? onItemMouseDown2(item, ev) : void 0;
        },
        onMouseMove: this._onItemMouseMoveIcon,
        "data-is-focusable": false,
        "data-ktp-execute-target": keytipAttributes["data-ktp-execute-target"],
        "aria-hidden": true
      });
      var itemComponentProps = item.itemProps;
      return React37.createElement(
        "button",
        __assign6({}, buttonProps),
        React37.createElement(ChildrenRenderer, __assign6({ componentRef: item.componentRef, item: itemProps, classNames: classNames2, index, hasIcons: false, openSubMenu, dismissSubMenu, dismissMenu, getSubmenuTarget: this._getSubmenuTarget }, itemComponentProps))
      );
    };
    ContextualMenuSplitButton2.prototype._handleTouchAndPointerEvent = function(ev) {
      var _this = this;
      var onTap = this.props.onTap;
      if (onTap) {
        onTap(ev);
      }
      if (this._lastTouchTimeoutId) {
        this._async.clearTimeout(this._lastTouchTimeoutId);
        this._lastTouchTimeoutId = void 0;
      }
      this._processingTouch = true;
      this._lastTouchTimeoutId = this._async.setTimeout(function() {
        _this._processingTouch = false;
        _this._lastTouchTimeoutId = void 0;
      }, TouchIdleDelay);
    };
    return ContextualMenuSplitButton2;
  }(ContextualMenuItemWrapper);

  // node_modules/@fluentui/react/lib/utilities/hooks/useResponsiveMode.js
  var React39 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/utilities/decorators/withResponsiveMode.js
  var React38 = __toESM(require_react());
  var ResponsiveMode;
  (function(ResponsiveMode2) {
    ResponsiveMode2[ResponsiveMode2["small"] = 0] = "small";
    ResponsiveMode2[ResponsiveMode2["medium"] = 1] = "medium";
    ResponsiveMode2[ResponsiveMode2["large"] = 2] = "large";
    ResponsiveMode2[ResponsiveMode2["xLarge"] = 3] = "xLarge";
    ResponsiveMode2[ResponsiveMode2["xxLarge"] = 4] = "xxLarge";
    ResponsiveMode2[ResponsiveMode2["xxxLarge"] = 5] = "xxxLarge";
    ResponsiveMode2[ResponsiveMode2["unknown"] = 999] = "unknown";
  })(ResponsiveMode || (ResponsiveMode = {}));
  var RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];
  var _defaultMode;
  var _lastMode;
  function getInitialResponsiveMode() {
    var _a6;
    return (_a6 = _defaultMode !== null && _defaultMode !== void 0 ? _defaultMode : _lastMode) !== null && _a6 !== void 0 ? _a6 : ResponsiveMode.large;
  }
  function getWidthOfCurrentWindow(currentWindow) {
    try {
      return currentWindow.document.documentElement.clientWidth;
    } catch (e2) {
      return currentWindow.innerWidth;
    }
  }
  function getResponsiveMode(currentWindow) {
    var responsiveMode = ResponsiveMode.small;
    if (currentWindow) {
      try {
        while (getWidthOfCurrentWindow(currentWindow) > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {
          responsiveMode++;
        }
      } catch (e2) {
        responsiveMode = getInitialResponsiveMode();
      }
      _lastMode = responsiveMode;
    } else {
      if (_defaultMode !== void 0) {
        responsiveMode = _defaultMode;
      } else {
        throw new Error("Content was rendered in a server environment without providing a default responsive mode. Call setResponsiveMode to define what the responsive mode is.");
      }
    }
    return responsiveMode;
  }

  // node_modules/@fluentui/react/lib/utilities/hooks/useResponsiveMode.js
  var useResponsiveMode = function(elementRef, overrideResponsiveMode) {
    var _a6 = React39.useState(getInitialResponsiveMode()), lastResponsiveMode = _a6[0], setLastResponsiveMode = _a6[1];
    var onResize = React39.useCallback(function() {
      var newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));
      if (lastResponsiveMode !== newResponsiveMode) {
        setLastResponsiveMode(newResponsiveMode);
      }
    }, [elementRef, lastResponsiveMode]);
    var win = useWindow();
    useOnEvent(win, "resize", onResize);
    React39.useEffect(function() {
      if (overrideResponsiveMode === void 0) {
        onResize();
      }
    }, [overrideResponsiveMode]);
    return overrideResponsiveMode !== null && overrideResponsiveMode !== void 0 ? overrideResponsiveMode : lastResponsiveMode;
  };

  // node_modules/@fluentui/react/lib/utilities/MenuContext/MenuContext.js
  var React40 = __toESM(require_react());
  var MenuContext = React40.createContext({});

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.base.js
  var getClassNames7 = classNamesFunction();
  var getContextualMenuItemClassNames = classNamesFunction();
  var DEFAULT_PROPS2 = {
    items: [],
    shouldFocusOnMount: true,
    gapSpace: 0,
    directionalHint: DirectionalHint.bottomAutoEdge,
    beakWidth: 16
  };
  function getSubmenuItems(item, options) {
    var target = options === null || options === void 0 ? void 0 : options.target;
    var items = item.subMenuProps ? item.subMenuProps.items : item.items;
    if (items) {
      var overrideItems = [];
      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var subItem = items_1[_i];
        if (subItem.preferMenuTargetAsEventTarget) {
          var onClick = subItem.onClick, contextItem = __rest5(subItem, ["onClick"]);
          overrideItems.push(__assign6(__assign6({}, contextItem), { onClick: getOnClickWithOverrideTarget(onClick, target) }));
        } else {
          overrideItems.push(subItem);
        }
      }
      return overrideItems;
    }
  }
  function canAnyMenuItemsCheck(items) {
    return items.some(function(item) {
      if (item.canCheck) {
        return true;
      }
      if (item.sectionProps && item.sectionProps.items.some(function(submenuItem) {
        return submenuItem.canCheck === true;
      })) {
        return true;
      }
      return false;
    });
  }
  var NavigationIdleDelay = 250;
  var COMPONENT_NAME2 = "ContextualMenu";
  var _getMenuItemStylesFunction = memoizeFunction(function() {
    var styles2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      styles2[_i] = arguments[_i];
    }
    return function(styleProps) {
      return concatStyleSetsWithProps.apply(void 0, __spreadArray5([styleProps, getItemStyles], styles2));
    };
  });
  function useVisibility(props, targetWindow) {
    var _a6 = props.hidden, hidden = _a6 === void 0 ? false : _a6, onMenuDismissed = props.onMenuDismissed, onMenuOpened = props.onMenuOpened;
    var previousHidden = usePrevious(hidden);
    var onMenuOpenedRef = React41.useRef(onMenuOpened);
    var onMenuClosedRef = React41.useRef(onMenuDismissed);
    var propsRef = React41.useRef(props);
    onMenuOpenedRef.current = onMenuOpened;
    onMenuClosedRef.current = onMenuDismissed;
    propsRef.current = props;
    React41.useEffect(function() {
      var _a7, _b;
      if (hidden && previousHidden === false) {
        (_a7 = onMenuClosedRef.current) === null || _a7 === void 0 ? void 0 : _a7.call(onMenuClosedRef, propsRef.current);
      } else if (!hidden && previousHidden !== false) {
        (_b = onMenuOpenedRef.current) === null || _b === void 0 ? void 0 : _b.call(onMenuOpenedRef, propsRef.current);
      }
    }, [hidden, previousHidden]);
    React41.useEffect(function() {
      return function() {
        var _a7;
        return (_a7 = onMenuClosedRef.current) === null || _a7 === void 0 ? void 0 : _a7.call(onMenuClosedRef, propsRef.current);
      };
    }, []);
  }
  function useSubMenuState(_a6, dismiss) {
    var hidden = _a6.hidden, items = _a6.items, theme = _a6.theme, className = _a6.className, id = _a6.id, menuTarget = _a6.target;
    var _b = React41.useState(), expandedMenuItemKey = _b[0], setExpandedMenuItemKey = _b[1];
    var _c = React41.useState(), submenuTarget = _c[0], setSubmenuTarget = _c[1];
    var _d = React41.useState(), shouldFocusOnContainer = _d[0], setShouldFocusOnContainer = _d[1];
    var subMenuId = useId(COMPONENT_NAME2, id);
    var closeSubMenu = React41.useCallback(function() {
      setShouldFocusOnContainer(void 0);
      setExpandedMenuItemKey(void 0);
      setSubmenuTarget(void 0);
    }, []);
    var openSubMenu = React41.useCallback(function(_a7, target, focusContainer) {
      var submenuItemKey = _a7.key;
      if (expandedMenuItemKey === submenuItemKey) {
        return;
      }
      target.focus();
      setShouldFocusOnContainer(focusContainer);
      setExpandedMenuItemKey(submenuItemKey);
      setSubmenuTarget(target);
    }, [expandedMenuItemKey]);
    React41.useEffect(function() {
      if (hidden) {
        closeSubMenu();
      }
    }, [hidden, closeSubMenu]);
    var onSubMenuDismiss = useOnSubmenuDismiss(dismiss, closeSubMenu);
    var getSubmenuProps = function() {
      var item = findItemByKeyFromItems(expandedMenuItemKey, items);
      var submenuProps = null;
      if (item) {
        submenuProps = {
          items: getSubmenuItems(item, { target: menuTarget }),
          target: submenuTarget,
          onDismiss: onSubMenuDismiss,
          isSubMenu: true,
          id: subMenuId,
          shouldFocusOnMount: true,
          shouldFocusOnContainer,
          directionalHint: getRTL2(theme) ? DirectionalHint.leftTopEdge : DirectionalHint.rightTopEdge,
          className,
          gapSpace: 0,
          isBeakVisible: false
        };
        if (item.subMenuProps) {
          assign2(submenuProps, item.subMenuProps);
        }
        if (item.preferMenuTargetAsEventTarget) {
          var onItemClick = item.onItemClick;
          submenuProps.onItemClick = getOnClickWithOverrideTarget(onItemClick, menuTarget);
        }
      }
      return submenuProps;
    };
    return [expandedMenuItemKey, openSubMenu, getSubmenuProps, onSubMenuDismiss];
  }
  function useShouldUpdateFocusOnMouseMove(_a6) {
    var delayUpdateFocusOnHover = _a6.delayUpdateFocusOnHover, hidden = _a6.hidden;
    var shouldUpdateFocusOnMouseEvent = React41.useRef(!delayUpdateFocusOnHover);
    var gotMouseMove = React41.useRef(false);
    React41.useEffect(function() {
      shouldUpdateFocusOnMouseEvent.current = !delayUpdateFocusOnHover;
      gotMouseMove.current = hidden ? false : !delayUpdateFocusOnHover && gotMouseMove.current;
    }, [delayUpdateFocusOnHover, hidden]);
    var onMenuFocusCapture = React41.useCallback(function() {
      if (delayUpdateFocusOnHover) {
        shouldUpdateFocusOnMouseEvent.current = false;
      }
    }, [delayUpdateFocusOnHover]);
    return [shouldUpdateFocusOnMouseEvent, gotMouseMove, onMenuFocusCapture];
  }
  function usePreviousActiveElement(_a6, targetWindow, hostElement) {
    var hidden = _a6.hidden, onRestoreFocus = _a6.onRestoreFocus;
    var previousActiveElement = React41.useRef();
    var tryFocusPreviousActiveElement = React41.useCallback(function(options) {
      var _a7, _b;
      if (onRestoreFocus) {
        onRestoreFocus(options);
      } else if (options === null || options === void 0 ? void 0 : options.documentContainsFocus) {
        (_b = (_a7 = previousActiveElement.current) === null || _a7 === void 0 ? void 0 : _a7.focus) === null || _b === void 0 ? void 0 : _b.call(_a7);
      }
    }, [onRestoreFocus]);
    useIsomorphicLayoutEffect(function() {
      var _a7, _b;
      if (!hidden) {
        var newElement = targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement;
        if (!((_a7 = hostElement.current) === null || _a7 === void 0 ? void 0 : _a7.contains(newElement)) && newElement.tagName !== "BODY") {
          previousActiveElement.current = newElement;
        }
      } else if (previousActiveElement.current) {
        tryFocusPreviousActiveElement({
          originalElement: previousActiveElement.current,
          containsFocus: true,
          documentContainsFocus: ((_b = getDocument()) === null || _b === void 0 ? void 0 : _b.hasFocus()) || false
        });
        previousActiveElement.current = void 0;
      }
    }, [hidden, targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement, tryFocusPreviousActiveElement, hostElement]);
    return [tryFocusPreviousActiveElement];
  }
  function useKeyHandlers(_a6, dismiss, hostElement, openSubMenu) {
    var theme = _a6.theme, isSubMenu = _a6.isSubMenu, _b = _a6.focusZoneProps, _c = _b === void 0 ? {} : _b, checkForNoWrap = _c.checkForNoWrap, _d = _c.direction, focusZoneDirection = _d === void 0 ? FocusZoneDirection.vertical : _d;
    var lastKeyDownWasAltOrMeta = React41.useRef();
    var keyHandler = function(ev, shouldHandleKey, dismissAllMenus) {
      var handled = false;
      if (shouldHandleKey(ev)) {
        dismiss(ev, dismissAllMenus);
        ev.preventDefault();
        ev.stopPropagation();
        handled = true;
      }
      return handled;
    };
    var shouldCloseSubMenu = function(ev) {
      var submenuCloseKey = getRTL2(theme) ? KeyCodes.right : KeyCodes.left;
      if (ev.which !== submenuCloseKey || !isSubMenu) {
        return false;
      }
      return !!(focusZoneDirection === FocusZoneDirection.vertical || checkForNoWrap && !shouldWrapFocus(ev.target, "data-no-horizontal-wrap"));
    };
    var shouldHandleKeyDown = function(ev) {
      return ev.which === KeyCodes.escape || shouldCloseSubMenu(ev) || ev.which === KeyCodes.up && (ev.altKey || ev.metaKey);
    };
    var onKeyDown = function(ev) {
      lastKeyDownWasAltOrMeta.current = isAltOrMeta(ev);
      var dismissAllMenus = ev.which === KeyCodes.escape && (isMac() || isIOS());
      return keyHandler(ev, shouldHandleKeyDown, dismissAllMenus);
    };
    var shouldHandleKeyUp = function(ev) {
      var keyPressIsAltOrMetaAlone = lastKeyDownWasAltOrMeta.current && isAltOrMeta(ev);
      lastKeyDownWasAltOrMeta.current = false;
      return !!keyPressIsAltOrMetaAlone && !(isIOS() || isMac());
    };
    var onKeyUp = function(ev) {
      return keyHandler(ev, shouldHandleKeyUp, true);
    };
    var onMenuKeyDown = function(ev) {
      var handled = onKeyDown(ev);
      if (handled || !hostElement.current) {
        return;
      }
      var hasModifier = !!(ev.altKey || ev.metaKey);
      var isUp = ev.which === KeyCodes.up;
      var isDown = ev.which === KeyCodes.down;
      if (!hasModifier && (isUp || isDown)) {
        var elementToFocus = isUp ? getLastFocusable(hostElement.current, hostElement.current.lastChild, true) : getFirstFocusable(hostElement.current, hostElement.current.firstChild, true);
        if (elementToFocus) {
          elementToFocus.focus();
          ev.preventDefault();
          ev.stopPropagation();
        }
      }
    };
    var onItemKeyDown = function(item, ev) {
      var openKey = getRTL2(theme) ? KeyCodes.left : KeyCodes.right;
      if (!item.disabled && (ev.which === openKey || ev.which === KeyCodes.enter || ev.which === KeyCodes.down && (ev.altKey || ev.metaKey))) {
        openSubMenu(item, ev.currentTarget);
        ev.preventDefault();
      }
    };
    return [onKeyDown, onKeyUp, onMenuKeyDown, onItemKeyDown];
  }
  function useScrollHandler(asyncTracker) {
    var isScrollIdle = React41.useRef(true);
    var scrollIdleTimeoutId = React41.useRef();
    var onScroll = function() {
      if (!isScrollIdle.current && scrollIdleTimeoutId.current !== void 0) {
        asyncTracker.clearTimeout(scrollIdleTimeoutId.current);
        scrollIdleTimeoutId.current = void 0;
      } else {
        isScrollIdle.current = false;
      }
      scrollIdleTimeoutId.current = asyncTracker.setTimeout(function() {
        isScrollIdle.current = true;
      }, NavigationIdleDelay);
    };
    return [onScroll, isScrollIdle];
  }
  function useOnSubmenuDismiss(dismiss, closeSubMenu) {
    var isMountedRef = React41.useRef(false);
    React41.useEffect(function() {
      isMountedRef.current = true;
      return function() {
        isMountedRef.current = false;
      };
    }, []);
    var onSubMenuDismiss = function(ev, dismissAll) {
      if (dismissAll) {
        dismiss(ev, dismissAll);
      } else if (isMountedRef.current) {
        closeSubMenu();
      }
    };
    return onSubMenuDismiss;
  }
  function useSubmenuEnterTimer(_a6, asyncTracker) {
    var _b = _a6.subMenuHoverDelay, subMenuHoverDelay = _b === void 0 ? NavigationIdleDelay : _b;
    var enterTimerRef = React41.useRef(void 0);
    var cancelSubMenuTimer = function() {
      if (enterTimerRef.current !== void 0) {
        asyncTracker.clearTimeout(enterTimerRef.current);
        enterTimerRef.current = void 0;
      }
    };
    var startSubmenuTimer = function(onTimerExpired) {
      enterTimerRef.current = asyncTracker.setTimeout(function() {
        onTimerExpired();
        cancelSubMenuTimer();
      }, subMenuHoverDelay);
    };
    return [cancelSubMenuTimer, startSubmenuTimer, enterTimerRef];
  }
  function useMouseHandlers(props, isScrollIdle, subMenuEntryTimer, targetWindow, shouldUpdateFocusOnMouseEvent, gotMouseMove, expandedMenuItemKey, hostElement, startSubmenuTimer, cancelSubMenuTimer, openSubMenu, onSubMenuDismiss, dismiss) {
    var menuTarget = props.target;
    var onItemMouseEnterBase = function(item, ev, target) {
      if (shouldUpdateFocusOnMouseEvent.current) {
        gotMouseMove.current = true;
      }
      if (shouldIgnoreMouseEvent()) {
        return;
      }
      updateFocusOnMouseEvent(item, ev, target);
    };
    var onItemMouseMoveBase = function(item, ev, target) {
      var targetElement = ev.currentTarget;
      if (shouldUpdateFocusOnMouseEvent.current) {
        gotMouseMove.current = true;
      } else {
        return;
      }
      if (!isScrollIdle.current || subMenuEntryTimer.current !== void 0 || targetElement === (targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement)) {
        return;
      }
      updateFocusOnMouseEvent(item, ev, target);
    };
    var shouldIgnoreMouseEvent = function() {
      return !isScrollIdle.current || !gotMouseMove.current;
    };
    var onMouseItemLeave = function(item, ev) {
      var _a6;
      if (shouldIgnoreMouseEvent()) {
        return;
      }
      cancelSubMenuTimer();
      if (expandedMenuItemKey !== void 0) {
        return;
      }
      if (hostElement.current.setActive) {
        try {
          hostElement.current.setActive();
        } catch (e2) {
        }
      } else {
        (_a6 = hostElement.current) === null || _a6 === void 0 ? void 0 : _a6.focus();
      }
    };
    var updateFocusOnMouseEvent = function(item, ev, target) {
      var targetElement = target ? target : ev.currentTarget;
      if (item.key === expandedMenuItemKey) {
        return;
      }
      cancelSubMenuTimer();
      if (expandedMenuItemKey === void 0) {
        targetElement.focus();
      }
      if (hasSubmenu(item)) {
        ev.stopPropagation();
        startSubmenuTimer(function() {
          targetElement.focus();
          openSubMenu(item, targetElement, true);
        });
      } else {
        startSubmenuTimer(function() {
          onSubMenuDismiss(ev);
          targetElement.focus();
        });
      }
    };
    var onItemClick = function(item, ev) {
      onItemClickBase(item, ev, ev.currentTarget);
    };
    var onItemClickBase = function(item, ev, target) {
      var items = getSubmenuItems(item, { target: menuTarget });
      cancelSubMenuTimer();
      if (!hasSubmenu(item) && (!items || !items.length)) {
        executeItemClick(item, ev);
      } else {
        if (item.key !== expandedMenuItemKey) {
          var shouldFocusOnContainer = typeof props.shouldFocusOnContainer === "boolean" ? props.shouldFocusOnContainer : ev.nativeEvent.pointerType === "mouse";
          openSubMenu(item, target, shouldFocusOnContainer);
        }
      }
      ev.stopPropagation();
      ev.preventDefault();
    };
    var onAnchorClick = function(item, ev) {
      executeItemClick(item, ev);
      ev.stopPropagation();
    };
    var executeItemClick = function(item, ev) {
      if (item.disabled || item.isDisabled) {
        return;
      }
      if (item.preferMenuTargetAsEventTarget) {
        overrideTarget(ev, menuTarget);
      }
      var shouldDismiss = false;
      if (item.onClick) {
        shouldDismiss = !!item.onClick(ev, item);
      } else if (props.onItemClick) {
        shouldDismiss = !!props.onItemClick(ev, item);
      }
      if (shouldDismiss || !ev.defaultPrevented) {
        dismiss(ev, true);
      }
    };
    return [
      onItemMouseEnterBase,
      onItemMouseMoveBase,
      onMouseItemLeave,
      onItemClick,
      onAnchorClick,
      executeItemClick,
      onItemClickBase
    ];
  }
  var ContextualMenuBase = React41.memo(React41.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var _a6;
    var _b = getPropsWithDefaults(DEFAULT_PROPS2, propsWithoutDefaults), ref = _b.ref, props = __rest5(_b, ["ref"]);
    var hostElement = React41.useRef(null);
    var asyncTracker = useAsync();
    var menuId = useId(COMPONENT_NAME2, props.id);
    useWarnings({
      name: COMPONENT_NAME2,
      props,
      deprecations: {
        getMenuClassNames: "styles"
      }
    });
    var dismiss = function(ev, dismissAll) {
      var _a7;
      return (_a7 = props.onDismiss) === null || _a7 === void 0 ? void 0 : _a7.call(props, ev, dismissAll);
    };
    var _c = useTarget(props.target, hostElement), targetRef = _c[0], targetWindow = _c[1];
    var tryFocusPreviousActiveElement = usePreviousActiveElement(props, targetWindow, hostElement)[0];
    var _d = useSubMenuState(props, dismiss), expandedMenuItemKey = _d[0], openSubMenu = _d[1], getSubmenuProps = _d[2], onSubMenuDismiss = _d[3];
    var _e2 = useShouldUpdateFocusOnMouseMove(props), shouldUpdateFocusOnMouseEvent = _e2[0], gotMouseMove = _e2[1], onMenuFocusCapture = _e2[2];
    var _f = useScrollHandler(asyncTracker), onScroll = _f[0], isScrollIdle = _f[1];
    var _g = useSubmenuEnterTimer(props, asyncTracker), cancelSubMenuTimer = _g[0], startSubmenuTimer = _g[1], subMenuEntryTimer = _g[2];
    var responsiveMode = useResponsiveMode(hostElement, props.responsiveMode);
    useVisibility(props, targetWindow);
    var _h = useKeyHandlers(props, dismiss, hostElement, openSubMenu), onKeyDown = _h[0], onKeyUp = _h[1], onMenuKeyDown = _h[2], onItemKeyDown = _h[3];
    var _j = useMouseHandlers(props, isScrollIdle, subMenuEntryTimer, targetWindow, shouldUpdateFocusOnMouseEvent, gotMouseMove, expandedMenuItemKey, hostElement, startSubmenuTimer, cancelSubMenuTimer, openSubMenu, onSubMenuDismiss, dismiss), onItemMouseEnterBase = _j[0], onItemMouseMoveBase = _j[1], onMouseItemLeave = _j[2], onItemClick = _j[3], onAnchorClick = _j[4], executeItemClick = _j[5], onItemClickBase = _j[6];
    var onDefaultRenderMenuList = function(menuListProps, menuClassNames, defaultRender) {
      var indexCorrection = 0;
      var items2 = menuListProps.items, totalItemCount = menuListProps.totalItemCount, hasCheckmarks2 = menuListProps.hasCheckmarks, hasIcons2 = menuListProps.hasIcons;
      return React41.createElement("ul", { className: menuClassNames.list, onKeyDown, onKeyUp, role: "presentation" }, items2.map(function(item2, index) {
        var menuItem = renderMenuItem(item2, index, indexCorrection, totalItemCount, hasCheckmarks2, hasIcons2, menuClassNames);
        if (item2.itemType !== ContextualMenuItemType.Divider && item2.itemType !== ContextualMenuItemType.Header) {
          var indexIncrease = item2.customOnRenderListLength ? item2.customOnRenderListLength : 1;
          indexCorrection += indexIncrease;
        }
        return menuItem;
      }));
    };
    var renderFocusZone = function(children, adjustedFocusZoneProps2) {
      var _a7 = props.focusZoneAs, ChildrenRenderer = _a7 === void 0 ? FocusZone : _a7;
      return React41.createElement(ChildrenRenderer, __assign6({}, adjustedFocusZoneProps2), children);
    };
    var renderMenuItem = function(item2, index, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2, menuClassNames) {
      var _a7;
      var renderedItems = [];
      var iconProps = item2.iconProps || { iconName: "None" };
      var getItemClassNames2 = item2.getItemClassNames, itemProps = item2.itemProps;
      var styles3 = itemProps ? itemProps.styles : void 0;
      var dividerClassName = item2.itemType === ContextualMenuItemType.Divider ? item2.className : void 0;
      var subMenuIconClassName = item2.submenuIconProps ? item2.submenuIconProps.className : "";
      var itemClassNames;
      if (getItemClassNames2) {
        itemClassNames = getItemClassNames2(props.theme, isItemDisabled(item2), expandedMenuItemKey === item2.key, !!getIsChecked(item2), !!item2.href, iconProps.iconName !== "None", item2.className, dividerClassName, iconProps.className, subMenuIconClassName, item2.primaryDisabled);
      } else {
        var itemStyleProps = {
          theme: props.theme,
          disabled: isItemDisabled(item2),
          expanded: expandedMenuItemKey === item2.key,
          checked: !!getIsChecked(item2),
          isAnchorLink: !!item2.href,
          knownIcon: iconProps.iconName !== "None",
          itemClassName: item2.className,
          dividerClassName,
          iconClassName: iconProps.className,
          subMenuClassName: subMenuIconClassName,
          primaryDisabled: item2.primaryDisabled
        };
        itemClassNames = getContextualMenuItemClassNames(_getMenuItemStylesFunction((_a7 = menuClassNames.subComponentStyles) === null || _a7 === void 0 ? void 0 : _a7.menuItem, styles3), itemStyleProps);
      }
      if (item2.text === "-" || item2.name === "-") {
        item2.itemType = ContextualMenuItemType.Divider;
      }
      switch (item2.itemType) {
        case ContextualMenuItemType.Divider:
          renderedItems.push(renderSeparator(index, itemClassNames));
          break;
        case ContextualMenuItemType.Header:
          renderedItems.push(renderSeparator(index, itemClassNames));
          var headerItem = renderHeaderMenuItem(item2, itemClassNames, menuClassNames, index, hasCheckmarks2, hasIcons2);
          renderedItems.push(renderListItem(headerItem, item2.key || index, itemClassNames, item2.title));
          break;
        case ContextualMenuItemType.Section:
          renderedItems.push(renderSectionItem(item2, itemClassNames, menuClassNames, index, hasCheckmarks2, hasIcons2));
          break;
        default:
          var defaultRenderNormalItem = function() {
            return renderNormalItem(item2, itemClassNames, index, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2);
          };
          var menuItem = props.onRenderContextualMenuItem ? props.onRenderContextualMenuItem(item2, defaultRenderNormalItem) : defaultRenderNormalItem();
          renderedItems.push(renderListItem(menuItem, item2.key || index, itemClassNames, item2.title));
          break;
      }
      return React41.createElement(React41.Fragment, { key: item2.key }, renderedItems);
    };
    var defaultMenuItemRenderer = function(item2, menuClassNames) {
      var index = item2.index, focusableElementIndex = item2.focusableElementIndex, totalItemCount = item2.totalItemCount, hasCheckmarks2 = item2.hasCheckmarks, hasIcons2 = item2.hasIcons;
      return renderMenuItem(item2, index, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2, menuClassNames);
    };
    var renderSectionItem = function(sectionItem, itemClassNames, menuClassNames, index, hasCheckmarks2, hasIcons2) {
      var sectionProps = sectionItem.sectionProps;
      if (!sectionProps) {
        return;
      }
      var headerItem;
      var groupProps;
      if (sectionProps.title) {
        var headerContextualMenuItem = void 0;
        var ariaLabelledby = "";
        if (typeof sectionProps.title === "string") {
          var id_1 = menuId + sectionProps.title.replace(/\s/g, "");
          headerContextualMenuItem = {
            key: "section-" + sectionProps.title + "-title",
            itemType: ContextualMenuItemType.Header,
            text: sectionProps.title,
            id: id_1
          };
          ariaLabelledby = id_1;
        } else {
          var id_2 = sectionProps.title.id || menuId + sectionProps.title.key.replace(/\s/g, "");
          headerContextualMenuItem = __assign6(__assign6({}, sectionProps.title), { id: id_2 });
          ariaLabelledby = id_2;
        }
        if (headerContextualMenuItem) {
          groupProps = {
            role: "group",
            "aria-labelledby": ariaLabelledby
          };
          headerItem = renderHeaderMenuItem(headerContextualMenuItem, itemClassNames, menuClassNames, index, hasCheckmarks2, hasIcons2);
        }
      }
      if (sectionProps.items && sectionProps.items.length > 0) {
        return React41.createElement(
          "li",
          { role: "presentation", key: sectionProps.key || sectionItem.key || "section-" + index },
          React41.createElement(
            "div",
            __assign6({}, groupProps),
            React41.createElement(
              "ul",
              { className: menuClassNames.list, role: "presentation" },
              sectionProps.topDivider && renderSeparator(index, itemClassNames, true, true),
              headerItem && renderListItem(headerItem, sectionItem.key || index, itemClassNames, sectionItem.title),
              sectionProps.items.map(function(contextualMenuItem, itemsIndex) {
                return renderMenuItem(contextualMenuItem, itemsIndex, itemsIndex, sectionProps.items.length, hasCheckmarks2, hasIcons2, menuClassNames);
              }),
              sectionProps.bottomDivider && renderSeparator(index, itemClassNames, false, true)
            )
          )
        );
      }
    };
    var renderListItem = function(content, key, classNames3, title2) {
      return React41.createElement("li", { role: "presentation", title: title2, key, className: classNames3.item }, content);
    };
    var renderSeparator = function(index, classNames3, top, fromSection) {
      if (fromSection || index > 0) {
        return React41.createElement("li", { role: "separator", key: "separator-" + index + (top === void 0 ? "" : top ? "-top" : "-bottom"), className: classNames3.divider, "aria-hidden": "true" });
      }
      return null;
    };
    var renderNormalItem = function(item2, classNames3, index, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2) {
      if (item2.onRender) {
        return item2.onRender(__assign6({ "aria-posinset": focusableElementIndex + 1, "aria-setsize": totalItemCount }, item2), dismiss);
      }
      var contextualMenuItemAs = props.contextualMenuItemAs;
      var commonProps = {
        item: item2,
        classNames: classNames3,
        index,
        focusableElementIndex,
        totalItemCount,
        hasCheckmarks: hasCheckmarks2,
        hasIcons: hasIcons2,
        contextualMenuItemAs,
        onItemMouseEnter: onItemMouseEnterBase,
        onItemMouseLeave: onMouseItemLeave,
        onItemMouseMove: onItemMouseMoveBase,
        onItemMouseDown,
        executeItemClick,
        onItemKeyDown,
        expandedMenuItemKey,
        openSubMenu,
        dismissSubMenu: onSubMenuDismiss,
        dismissMenu: dismiss
      };
      if (item2.href) {
        return React41.createElement(ContextualMenuAnchor, __assign6({}, commonProps, { onItemClick: onAnchorClick }));
      }
      if (item2.split && hasSubmenu(item2)) {
        return React41.createElement(ContextualMenuSplitButton, __assign6({}, commonProps, { onItemClick, onItemClickBase, onTap: cancelSubMenuTimer }));
      }
      return React41.createElement(ContextualMenuButton, __assign6({}, commonProps, { onItemClick, onItemClickBase }));
    };
    var renderHeaderMenuItem = function(item2, itemClassNames, menuClassNames, index, hasCheckmarks2, hasIcons2) {
      var _a7 = props.contextualMenuItemAs, ChildrenRenderer = _a7 === void 0 ? ContextualMenuItem : _a7;
      var itemProps = item2.itemProps, id2 = item2.id;
      var divHtmlProperties = itemProps && getNativeProps(itemProps, divProperties);
      return React41.createElement(
        "div",
        __assign6({ id: id2, className: menuClassNames.header }, divHtmlProperties, { style: item2.style }),
        React41.createElement(ChildrenRenderer, __assign6({ item: item2, classNames: itemClassNames, index, onCheckmarkClick: hasCheckmarks2 ? onItemClick : void 0, hasIcons: hasIcons2 }, itemProps))
      );
    };
    var isBeakVisible = props.isBeakVisible;
    var items = props.items, labelElementId = props.labelElementId, id = props.id, className = props.className, beakWidth = props.beakWidth, directionalHint = props.directionalHint, directionalHintForRTL = props.directionalHintForRTL, alignTargetEdge = props.alignTargetEdge, gapSpace = props.gapSpace, coverTarget = props.coverTarget, ariaLabel = props.ariaLabel, doNotLayer = props.doNotLayer, target = props.target, bounds = props.bounds, useTargetWidth = props.useTargetWidth, useTargetAsMinWidth = props.useTargetAsMinWidth, directionalHintFixed = props.directionalHintFixed, shouldFocusOnMount = props.shouldFocusOnMount, shouldFocusOnContainer = props.shouldFocusOnContainer, title = props.title, styles2 = props.styles, theme = props.theme, calloutProps = props.calloutProps, _k = props.onRenderSubMenu, onRenderSubMenu2 = _k === void 0 ? onDefaultRenderSubMenu : _k, _l = props.onRenderMenuList, onRenderMenuList = _l === void 0 ? function(menuListProps, defaultRender) {
      return onDefaultRenderMenuList(menuListProps, classNames2, defaultRender);
    } : _l, focusZoneProps = props.focusZoneProps, getMenuClassNames = props.getMenuClassNames;
    var classNames2 = getMenuClassNames ? getMenuClassNames(theme, className) : getClassNames7(styles2, {
      theme,
      className
    });
    var hasIcons = itemsHaveIcons(items);
    function itemsHaveIcons(contextualMenuItems) {
      for (var _i2 = 0, contextualMenuItems_1 = contextualMenuItems; _i2 < contextualMenuItems_1.length; _i2++) {
        var item2 = contextualMenuItems_1[_i2];
        if (item2.iconProps) {
          return true;
        }
        if (item2.itemType === ContextualMenuItemType.Section && item2.sectionProps && itemsHaveIcons(item2.sectionProps.items)) {
          return true;
        }
      }
      return false;
    }
    var adjustedFocusZoneProps = __assign6(__assign6({ direction: FocusZoneDirection.vertical, handleTabKey: FocusZoneTabbableElements.all, isCircularNavigation: true }, focusZoneProps), { className: css(classNames2.root, (_a6 = props.focusZoneProps) === null || _a6 === void 0 ? void 0 : _a6.className) });
    var hasCheckmarks = canAnyMenuItemsCheck(items);
    var submenuProps = expandedMenuItemKey && props.hidden !== true ? getSubmenuProps() : null;
    isBeakVisible = isBeakVisible === void 0 ? responsiveMode <= ResponsiveMode.medium : isBeakVisible;
    var contextMenuStyle;
    var targetAsHtmlElement = targetRef.current;
    if ((useTargetWidth || useTargetAsMinWidth) && targetAsHtmlElement && targetAsHtmlElement.offsetWidth) {
      var targetBoundingRect = targetAsHtmlElement.getBoundingClientRect();
      var targetWidth = targetBoundingRect.width - 2;
      if (useTargetWidth) {
        contextMenuStyle = {
          width: targetWidth
        };
      } else if (useTargetAsMinWidth) {
        contextMenuStyle = {
          minWidth: targetWidth
        };
      }
    }
    if (items && items.length > 0) {
      var totalItemCount_1 = 0;
      for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
        var item = items_2[_i];
        if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {
          var itemCount = item.customOnRenderListLength ? item.customOnRenderListLength : 1;
          totalItemCount_1 += itemCount;
        }
      }
      var calloutStyles_1 = classNames2.subComponentStyles ? classNames2.subComponentStyles.callout : void 0;
      return React41.createElement(MenuContext.Consumer, null, function(menuContext) {
        return React41.createElement(
          Callout,
          __assign6({ styles: calloutStyles_1, onRestoreFocus: tryFocusPreviousActiveElement }, calloutProps, { target: target || menuContext.target, isBeakVisible, beakWidth, directionalHint, directionalHintForRTL, gapSpace, coverTarget, doNotLayer, className: css("ms-ContextualMenu-Callout", calloutProps && calloutProps.className), setInitialFocus: shouldFocusOnMount, onDismiss: props.onDismiss || menuContext.onDismiss, onScroll, bounds, directionalHintFixed, alignTargetEdge, hidden: props.hidden || menuContext.hidden, ref: forwardedRef }),
          React41.createElement(
            "div",
            { style: contextMenuStyle, ref: hostElement, id, className: classNames2.container, tabIndex: shouldFocusOnContainer ? 0 : -1, onKeyDown: onMenuKeyDown, onKeyUp, onFocusCapture: onMenuFocusCapture, "aria-label": ariaLabel, "aria-labelledby": labelElementId, role: "menu" },
            title && React41.createElement(
              "div",
              { className: classNames2.title },
              " ",
              title,
              " "
            ),
            items && items.length ? renderFocusZone(onRenderMenuList({
              ariaLabel,
              items,
              totalItemCount: totalItemCount_1,
              hasCheckmarks,
              hasIcons,
              defaultMenuItemRenderer: function(item2) {
                return defaultMenuItemRenderer(item2, classNames2);
              },
              labelElementId
            }, function(menuListProps, defaultRender) {
              return onDefaultRenderMenuList(menuListProps, classNames2, defaultRender);
            }), adjustedFocusZoneProps) : null,
            submenuProps && onRenderSubMenu2(submenuProps, onDefaultRenderSubMenu)
          ),
          React41.createElement(FocusRects, null)
        );
      });
    } else {
      return null;
    }
  }), function(prevProps, newProps) {
    if (!newProps.shouldUpdateWhenHidden && prevProps.hidden && newProps.hidden) {
      return true;
    }
    return shallowCompare(prevProps, newProps);
  });
  ContextualMenuBase.displayName = "ContextualMenuBase";
  function isAltOrMeta(ev) {
    return ev.which === KeyCodes.alt || ev.key === "Meta";
  }
  function onItemMouseDown(item, ev) {
    var _a6;
    (_a6 = item.onMouseDown) === null || _a6 === void 0 ? void 0 : _a6.call(item, item, ev);
  }
  function onDefaultRenderSubMenu(subMenuProps, defaultRender) {
    throw Error("ContextualMenuBase: onRenderSubMenu callback is null or undefined. Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.");
  }
  function findItemByKeyFromItems(key, items) {
    for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {
      var item = items_3[_i];
      if (item.itemType === ContextualMenuItemType.Section && item.sectionProps) {
        var match = findItemByKeyFromItems(key, item.sectionProps.items);
        if (match) {
          return match;
        }
      } else if (item.key && item.key === key) {
        return item;
      }
    }
  }
  function getOnClickWithOverrideTarget(onClick, target) {
    return onClick ? function(ev, item) {
      overrideTarget(ev, target);
      return onClick(ev, item);
    } : onClick;
  }
  function overrideTarget(ev, target) {
    if (ev && target) {
      ev.persist();
      if (target instanceof Event) {
        ev.target = target.target;
      } else if (target instanceof Element) {
        ev.target = target;
      }
    }
  }

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.styles.js
  var GlobalClassNames6 = {
    root: "ms-ContextualMenu",
    container: "ms-ContextualMenu-container",
    list: "ms-ContextualMenu-list",
    header: "ms-ContextualMenu-header",
    title: "ms-ContextualMenu-title",
    isopen: "is-open"
  };
  var getStyles7 = function(props) {
    var className = props.className, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames6, theme);
    var fonts = theme.fonts, semanticColors = theme.semanticColors, effects = theme.effects;
    return {
      root: [
        theme.fonts.medium,
        classNames2.root,
        classNames2.isopen,
        {
          backgroundColor: semanticColors.menuBackground,
          minWidth: "180px"
        },
        className
      ],
      container: [
        classNames2.container,
        {
          selectors: {
            ":focus": { outline: 0 }
          }
        }
      ],
      list: [
        classNames2.list,
        classNames2.isopen,
        {
          listStyleType: "none",
          margin: "0",
          padding: "0"
        }
      ],
      header: [
        classNames2.header,
        fonts.small,
        {
          fontWeight: FontWeights.semibold,
          color: semanticColors.menuHeader,
          background: "none",
          backgroundColor: "transparent",
          border: "none",
          height: CONTEXTUAL_MENU_ITEM_HEIGHT,
          lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
          cursor: "default",
          padding: "0px 6px",
          userSelect: "none",
          textAlign: "left"
        }
      ],
      title: [
        classNames2.title,
        {
          fontSize: fonts.mediumPlus.fontSize,
          paddingRight: "14px",
          paddingLeft: "14px",
          paddingBottom: "5px",
          paddingTop: "5px",
          backgroundColor: semanticColors.menuItemBackgroundPressed
        }
      ],
      subComponentStyles: {
        callout: {
          root: {
            boxShadow: effects.elevation8
          }
        },
        menuItem: {}
      }
    };
  };

  // node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.js
  function onRenderSubMenu(subMenuProps) {
    return React42.createElement(LocalContextualMenu, __assign6({}, subMenuProps));
  }
  var LocalContextualMenu = styled(ContextualMenuBase, getStyles7, function(props) {
    return {
      onRenderSubMenu: props.onRenderSubMenu ? composeRenderFunction(props.onRenderSubMenu, onRenderSubMenu) : onRenderSubMenu
    };
  }, { scope: "ContextualMenu" });
  var ContextualMenu = LocalContextualMenu;
  ContextualMenu.displayName = "ContextualMenu";

  // node_modules/@fluentui/react/lib/components/Button/BaseButton.classNames.js
  var ButtonGlobalClassNames = {
    msButton: "ms-Button",
    msButtonHasMenu: "ms-Button--hasMenu",
    msButtonIcon: "ms-Button-icon",
    msButtonMenuIcon: "ms-Button-menuIcon",
    msButtonLabel: "ms-Button-label",
    msButtonDescription: "ms-Button-description",
    msButtonScreenReaderText: "ms-Button-screenReaderText",
    msButtonFlexContainer: "ms-Button-flexContainer",
    msButtonTextContainer: "ms-Button-textContainer"
  };
  var getBaseButtonClassNames = memoizeFunction(function(theme, styles2, className, variantClassName, iconClassName, menuIconClassName, disabled, hasMenu, checked, expanded, isSplit) {
    var _a6, _b;
    var classNames2 = getGlobalClassNames(ButtonGlobalClassNames, theme || {});
    var isExpanded = expanded && !isSplit;
    return mergeStyleSets({
      root: [
        classNames2.msButton,
        styles2.root,
        variantClassName,
        checked && ["is-checked", styles2.rootChecked],
        isExpanded && [
          "is-expanded",
          styles2.rootExpanded,
          {
            selectors: (_a6 = {}, _a6[":hover ." + classNames2.msButtonIcon] = styles2.iconExpandedHovered, _a6[":hover ." + classNames2.msButtonMenuIcon] = styles2.menuIconExpandedHovered || styles2.rootExpandedHovered, _a6[":hover"] = styles2.rootExpandedHovered, _a6)
          }
        ],
        hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles2.rootHasMenu],
        disabled && ["is-disabled", styles2.rootDisabled],
        !disabled && !isExpanded && !checked && {
          selectors: (_b = {
            ":hover": styles2.rootHovered
          }, _b[":hover ." + classNames2.msButtonLabel] = styles2.labelHovered, _b[":hover ." + classNames2.msButtonIcon] = styles2.iconHovered, _b[":hover ." + classNames2.msButtonDescription] = styles2.descriptionHovered, _b[":hover ." + classNames2.msButtonMenuIcon] = styles2.menuIconHovered, _b[":focus"] = styles2.rootFocused, _b[":active"] = styles2.rootPressed, _b[":active ." + classNames2.msButtonIcon] = styles2.iconPressed, _b[":active ." + classNames2.msButtonDescription] = styles2.descriptionPressed, _b[":active ." + classNames2.msButtonMenuIcon] = styles2.menuIconPressed, _b)
        },
        disabled && checked && [styles2.rootCheckedDisabled],
        !disabled && checked && {
          selectors: {
            ":hover": styles2.rootCheckedHovered,
            ":active": styles2.rootCheckedPressed
          }
        },
        className
      ],
      flexContainer: [classNames2.msButtonFlexContainer, styles2.flexContainer],
      textContainer: [classNames2.msButtonTextContainer, styles2.textContainer],
      icon: [
        classNames2.msButtonIcon,
        iconClassName,
        styles2.icon,
        isExpanded && styles2.iconExpanded,
        checked && styles2.iconChecked,
        disabled && styles2.iconDisabled
      ],
      label: [classNames2.msButtonLabel, styles2.label, checked && styles2.labelChecked, disabled && styles2.labelDisabled],
      menuIcon: [
        classNames2.msButtonMenuIcon,
        menuIconClassName,
        styles2.menuIcon,
        checked && styles2.menuIconChecked,
        disabled && !isSplit && styles2.menuIconDisabled,
        !disabled && !isExpanded && !checked && {
          selectors: {
            ":hover": styles2.menuIconHovered,
            ":active": styles2.menuIconPressed
          }
        },
        isExpanded && ["is-expanded", styles2.menuIconExpanded]
      ],
      description: [
        classNames2.msButtonDescription,
        styles2.description,
        checked && styles2.descriptionChecked,
        disabled && styles2.descriptionDisabled
      ],
      screenReaderText: [classNames2.msButtonScreenReaderText, styles2.screenReaderText]
    });
  });

  // node_modules/@fluentui/react/lib/components/Button/SplitButton/SplitButton.classNames.js
  var getSplitButtonClassNames = memoizeFunction(function(styles2, disabled, expanded, checked, primaryDisabled) {
    return {
      root: mergeStyles(styles2.splitButtonMenuButton, expanded && [styles2.splitButtonMenuButtonExpanded], disabled && [styles2.splitButtonMenuButtonDisabled], checked && !disabled && [styles2.splitButtonMenuButtonChecked], primaryDisabled && !disabled && [
        {
          selectors: {
            ":focus": styles2.splitButtonMenuFocused
          }
        }
      ]),
      splitButtonContainer: mergeStyles(styles2.splitButtonContainer, !disabled && checked && [
        styles2.splitButtonContainerChecked,
        {
          selectors: {
            ":hover": styles2.splitButtonContainerCheckedHovered
          }
        }
      ], !disabled && !checked && [
        {
          selectors: {
            ":hover": styles2.splitButtonContainerHovered,
            ":focus": styles2.splitButtonContainerFocused
          }
        }
      ], disabled && styles2.splitButtonContainerDisabled),
      icon: mergeStyles(styles2.splitButtonMenuIcon, disabled && styles2.splitButtonMenuIconDisabled, !disabled && primaryDisabled && styles2.splitButtonMenuIcon),
      flexContainer: mergeStyles(styles2.splitButtonFlexContainer),
      divider: mergeStyles(styles2.splitButtonDivider, (primaryDisabled || disabled) && styles2.splitButtonDividerDisabled)
    };
  });

  // node_modules/@fluentui/react/lib/components/Button/BaseButton.js
  var TouchIdleDelay2 = 500;
  var COMPONENT_NAME3 = "BaseButton";
  var BaseButton = function(_super) {
    __extends5(BaseButton2, _super);
    function BaseButton2(props) {
      var _this = _super.call(this, props) || this;
      _this._buttonElement = React43.createRef();
      _this._splitButtonContainer = React43.createRef();
      _this._mergedRef = createMergedRef();
      _this._renderedVisibleMenu = false;
      _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
        return __assign6(__assign6({}, keytipProps), { hasMenu: true });
      });
      _this._onRenderIcon = function(buttonProps, defaultRender) {
        var iconProps = _this.props.iconProps;
        if (iconProps && (iconProps.iconName !== void 0 || iconProps.imageProps)) {
          var className = iconProps.className, imageProps = iconProps.imageProps, rest = __rest5(iconProps, ["className", "imageProps"]);
          if (iconProps.styles) {
            return React43.createElement(Icon, __assign6({ className: css(_this._classNames.icon, className), imageProps }, rest));
          }
          if (iconProps.iconName) {
            return React43.createElement(FontIcon, __assign6({ className: css(_this._classNames.icon, className) }, rest));
          }
          if (imageProps) {
            return React43.createElement(ImageIcon, __assign6({ className: css(_this._classNames.icon, className), imageProps }, rest));
          }
        }
        return null;
      };
      _this._onRenderTextContents = function() {
        var _a6 = _this.props, text = _a6.text, children = _a6.children, _b = _a6.secondaryText, secondaryText = _b === void 0 ? _this.props.description : _b, _c = _a6.onRenderText, onRenderText = _c === void 0 ? _this._onRenderText : _c, _d = _a6.onRenderDescription, onRenderDescription = _d === void 0 ? _this._onRenderDescription : _d;
        if (text || typeof children === "string" || secondaryText) {
          return React43.createElement(
            "span",
            { className: _this._classNames.textContainer },
            onRenderText(_this.props, _this._onRenderText),
            onRenderDescription(_this.props, _this._onRenderDescription)
          );
        }
        return [onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription)];
      };
      _this._onRenderText = function() {
        var text = _this.props.text;
        var children = _this.props.children;
        if (text === void 0 && typeof children === "string") {
          text = children;
        }
        if (_this._hasText()) {
          return React43.createElement("span", { key: _this._labelId, className: _this._classNames.label, id: _this._labelId }, text);
        }
        return null;
      };
      _this._onRenderChildren = function() {
        var children = _this.props.children;
        if (typeof children === "string") {
          return null;
        }
        return children;
      };
      _this._onRenderDescription = function(props2) {
        var _a6 = props2.secondaryText, secondaryText = _a6 === void 0 ? _this.props.description : _a6;
        return secondaryText ? React43.createElement("span", { key: _this._descriptionId, className: _this._classNames.description, id: _this._descriptionId }, secondaryText) : null;
      };
      _this._onRenderAriaDescription = function() {
        var ariaDescription = _this.props.ariaDescription;
        return ariaDescription ? React43.createElement("span", { className: _this._classNames.screenReaderText, id: _this._ariaDescriptionId }, ariaDescription) : null;
      };
      _this._onRenderMenuIcon = function(props2) {
        var menuIconProps = _this.props.menuIconProps;
        return React43.createElement(FontIcon, __assign6({ iconName: "ChevronDown" }, menuIconProps, { className: _this._classNames.menuIcon }));
      };
      _this._onRenderMenu = function(menuProps) {
        var MenuType = _this.props.menuAs ? composeComponentAs(_this.props.menuAs, ContextualMenu) : ContextualMenu;
        return React43.createElement(MenuType, __assign6({}, menuProps));
      };
      _this._onDismissMenu = function(ev) {
        var menuProps = _this.props.menuProps;
        if (menuProps && menuProps.onDismiss) {
          menuProps.onDismiss(ev);
        }
        if (!ev || !ev.defaultPrevented) {
          _this._dismissMenu();
        }
      };
      _this._dismissMenu = function() {
        _this._menuShouldFocusOnMount = void 0;
        _this._menuShouldFocusOnContainer = void 0;
        _this.setState({ menuHidden: true });
      };
      _this._openMenu = function(shouldFocusOnContainer, shouldFocusOnMount) {
        if (shouldFocusOnMount === void 0) {
          shouldFocusOnMount = true;
        }
        if (_this.props.menuProps) {
          _this._menuShouldFocusOnContainer = shouldFocusOnContainer;
          _this._menuShouldFocusOnMount = shouldFocusOnMount;
          _this._renderedVisibleMenu = true;
          _this.setState({ menuHidden: false });
        }
      };
      _this._onToggleMenu = function(shouldFocusOnContainer) {
        var shouldFocusOnMount = true;
        if (_this.props.menuProps && _this.props.menuProps.shouldFocusOnMount === false) {
          shouldFocusOnMount = false;
        }
        _this.state.menuHidden ? _this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : _this._dismissMenu();
      };
      _this._onSplitContainerFocusCapture = function(ev) {
        var container = _this._splitButtonContainer.current;
        if (!container || ev.target && portalContainsElement(ev.target, container)) {
          return;
        }
        container.focus();
      };
      _this._onSplitButtonPrimaryClick = function(ev) {
        if (!_this.state.menuHidden) {
          _this._dismissMenu();
        }
        if (!_this._processingTouch && _this.props.onClick) {
          _this.props.onClick(ev);
        } else if (_this._processingTouch) {
          _this._onMenuClick(ev);
        }
      };
      _this._onKeyDown = function(ev) {
        if (_this.props.disabled && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {
          ev.preventDefault();
          ev.stopPropagation();
        } else if (!_this.props.disabled) {
          if (_this.props.menuProps) {
            _this._onMenuKeyDown(ev);
          } else if (_this.props.onKeyDown !== void 0) {
            _this.props.onKeyDown(ev);
          }
        }
      };
      _this._onKeyUp = function(ev) {
        if (!_this.props.disabled && _this.props.onKeyUp !== void 0) {
          _this.props.onKeyUp(ev);
        }
      };
      _this._onKeyPress = function(ev) {
        if (!_this.props.disabled && _this.props.onKeyPress !== void 0) {
          _this.props.onKeyPress(ev);
        }
      };
      _this._onMouseUp = function(ev) {
        if (!_this.props.disabled && _this.props.onMouseUp !== void 0) {
          _this.props.onMouseUp(ev);
        }
      };
      _this._onMouseDown = function(ev) {
        if (!_this.props.disabled && _this.props.onMouseDown !== void 0) {
          _this.props.onMouseDown(ev);
        }
      };
      _this._onClick = function(ev) {
        if (!_this.props.disabled) {
          if (_this.props.menuProps) {
            _this._onMenuClick(ev);
          } else if (_this.props.onClick !== void 0) {
            _this.props.onClick(ev);
          }
        }
      };
      _this._onSplitButtonContainerKeyDown = function(ev) {
        if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {
          if (_this._buttonElement.current) {
            _this._buttonElement.current.click();
            ev.preventDefault();
            ev.stopPropagation();
          }
        } else {
          _this._onMenuKeyDown(ev);
        }
      };
      _this._onMenuKeyDown = function(ev) {
        if (_this.props.disabled) {
          return;
        }
        if (_this.props.onKeyDown) {
          _this.props.onKeyDown(ev);
        }
        var isUp = ev.which === KeyCodes.up;
        var isDown = ev.which === KeyCodes.down;
        if (!ev.defaultPrevented && _this._isValidMenuOpenKey(ev)) {
          var onMenuClick = _this.props.onMenuClick;
          if (onMenuClick) {
            onMenuClick(ev, _this.props);
          }
          _this._onToggleMenu(false);
          ev.preventDefault();
          ev.stopPropagation();
        }
        if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {
          setFocusVisibility(true, ev.target);
        }
        if (!(ev.altKey || ev.metaKey) && (isUp || isDown)) {
          if (!_this.state.menuHidden && _this.props.menuProps) {
            var currentShouldFocusOnMount = _this._menuShouldFocusOnMount !== void 0 ? _this._menuShouldFocusOnMount : _this.props.menuProps.shouldFocusOnMount;
            if (!currentShouldFocusOnMount) {
              ev.preventDefault();
              ev.stopPropagation();
              _this._menuShouldFocusOnMount = true;
              _this.forceUpdate();
            }
          }
        }
      };
      _this._onTouchStart = function() {
        if (_this._isSplitButton && _this._splitButtonContainer.current && !("onpointerdown" in _this._splitButtonContainer.current)) {
          _this._handleTouchAndPointerEvent();
        }
      };
      _this._onMenuClick = function(ev) {
        var _a6 = _this.props, onMenuClick = _a6.onMenuClick, menuProps = _a6.menuProps;
        if (onMenuClick) {
          onMenuClick(ev, _this.props);
        }
        var shouldFocusOnContainer = typeof (menuProps === null || menuProps === void 0 ? void 0 : menuProps.shouldFocusOnContainer) === "boolean" ? menuProps.shouldFocusOnContainer : ev.nativeEvent.pointerType === "mouse";
        if (!ev.defaultPrevented) {
          _this._onToggleMenu(shouldFocusOnContainer);
          ev.preventDefault();
          ev.stopPropagation();
        }
      };
      initializeComponentRef(_this);
      _this._async = new Async(_this);
      _this._events = new EventGroup(_this);
      warnConditionallyRequiredProps(COMPONENT_NAME3, props, ["menuProps", "onClick"], "split", _this.props.split);
      warnDeprecations(COMPONENT_NAME3, props, {
        rootProps: void 0,
        description: "secondaryText",
        toggled: "checked"
      });
      _this._labelId = getId();
      _this._descriptionId = getId();
      _this._ariaDescriptionId = getId();
      _this.state = {
        menuHidden: true
      };
      return _this;
    }
    Object.defineProperty(BaseButton2.prototype, "_isSplitButton", {
      get: function() {
        return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;
      },
      enumerable: false,
      configurable: true
    });
    BaseButton2.prototype.render = function() {
      var _a6;
      var _b = this.props, ariaDescription = _b.ariaDescription, ariaLabel = _b.ariaLabel, ariaHidden = _b.ariaHidden, className = _b.className, disabled = _b.disabled, allowDisabledFocus = _b.allowDisabledFocus, primaryDisabled = _b.primaryDisabled, _c = _b.secondaryText, secondaryText = _c === void 0 ? this.props.description : _c, href = _b.href, iconProps = _b.iconProps, menuIconProps = _b.menuIconProps, styles2 = _b.styles, checked = _b.checked, variantClassName = _b.variantClassName, theme = _b.theme, toggle = _b.toggle, getClassNames9 = _b.getClassNames, role = _b.role;
      var menuHidden = this.state.menuHidden;
      var isPrimaryButtonDisabled = disabled || primaryDisabled;
      this._classNames = getClassNames9 ? getClassNames9(theme, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, checked, !menuHidden, !!this.props.menuProps, this.props.split, !!allowDisabledFocus) : getBaseButtonClassNames(theme, styles2, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, !!this.props.menuProps, checked, !menuHidden, this.props.split);
      var _d = this, _ariaDescriptionId = _d._ariaDescriptionId, _labelId = _d._labelId, _descriptionId = _d._descriptionId;
      var renderAsAnchor = !isPrimaryButtonDisabled && !!href;
      var tag = renderAsAnchor ? "a" : "button";
      var nativeProps = getNativeProps(
        assign2(renderAsAnchor ? {} : { type: "button" }, this.props.rootProps, this.props),
        renderAsAnchor ? anchorProperties : buttonProperties,
        [
          "disabled"
        ]
      );
      var resolvedAriaLabel = ariaLabel || nativeProps["aria-label"];
      var ariaDescribedBy = void 0;
      if (ariaDescription) {
        ariaDescribedBy = _ariaDescriptionId;
      } else if (secondaryText && this.props.onRenderDescription !== nullRender) {
        ariaDescribedBy = _descriptionId;
      } else if (nativeProps["aria-describedby"]) {
        ariaDescribedBy = nativeProps["aria-describedby"];
      }
      var ariaLabelledBy = void 0;
      if (nativeProps["aria-labelledby"]) {
        ariaLabelledBy = nativeProps["aria-labelledby"];
      } else if (ariaDescribedBy && !resolvedAriaLabel) {
        ariaLabelledBy = this._hasText() ? _labelId : void 0;
      }
      var dataIsFocusable = this.props["data-is-focusable"] === false || disabled && !allowDisabledFocus || this._isSplitButton ? false : true;
      var isCheckboxTypeRole = role === "menuitemcheckbox" || role === "checkbox";
      var checkedOrPressedValue = isCheckboxTypeRole ? !!checked : toggle === true ? !!checked : void 0;
      var buttonProps = assign2(nativeProps, (_a6 = {
        className: this._classNames.root,
        ref: this._mergedRef(this.props.elementRef, this._buttonElement),
        disabled: isPrimaryButtonDisabled && !allowDisabledFocus,
        onKeyDown: this._onKeyDown,
        onKeyPress: this._onKeyPress,
        onKeyUp: this._onKeyUp,
        onMouseDown: this._onMouseDown,
        onMouseUp: this._onMouseUp,
        onClick: this._onClick,
        "aria-label": resolvedAriaLabel,
        "aria-labelledby": ariaLabelledBy,
        "aria-describedby": ariaDescribedBy,
        "aria-disabled": isPrimaryButtonDisabled,
        "data-is-focusable": dataIsFocusable
      }, _a6[isCheckboxTypeRole ? "aria-checked" : "aria-pressed"] = checkedOrPressedValue, _a6));
      if (ariaHidden) {
        buttonProps["aria-hidden"] = true;
      }
      if (this._isSplitButton) {
        return this._onRenderSplitButtonContent(tag, buttonProps);
      } else if (this.props.menuProps) {
        var _e2 = this.props.menuProps.id, id = _e2 === void 0 ? this._labelId + "-menu" : _e2;
        assign2(buttonProps, {
          "aria-expanded": !menuHidden,
          "aria-controls": !menuHidden ? id : null,
          "aria-haspopup": true
        });
      }
      return this._onRenderContent(tag, buttonProps);
    };
    BaseButton2.prototype.componentDidMount = function() {
      if (this._isSplitButton && this._splitButtonContainer.current) {
        if ("onpointerdown" in this._splitButtonContainer.current) {
          this._events.on(this._splitButtonContainer.current, "pointerdown", this._onPointerDown, true);
        }
        if ("onpointerup" in this._splitButtonContainer.current && this.props.onPointerUp) {
          this._events.on(this._splitButtonContainer.current, "pointerup", this.props.onPointerUp, true);
        }
      }
    };
    BaseButton2.prototype.componentDidUpdate = function(prevProps, prevState) {
      if (this.props.onAfterMenuDismiss && !prevState.menuHidden && this.state.menuHidden) {
        this.props.onAfterMenuDismiss();
      }
    };
    BaseButton2.prototype.componentWillUnmount = function() {
      this._async.dispose();
      this._events.dispose();
    };
    BaseButton2.prototype.focus = function() {
      if (this._isSplitButton && this._splitButtonContainer.current) {
        setFocusVisibility(true);
        this._splitButtonContainer.current.focus();
      } else if (this._buttonElement.current) {
        setFocusVisibility(true);
        this._buttonElement.current.focus();
      }
    };
    BaseButton2.prototype.dismissMenu = function() {
      this._dismissMenu();
    };
    BaseButton2.prototype.openMenu = function(shouldFocusOnContainer, shouldFocusOnMount) {
      this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);
    };
    BaseButton2.prototype._onRenderContent = function(tag, buttonProps) {
      var _this = this;
      var props = this.props;
      var Tag = tag;
      var menuIconProps = props.menuIconProps, menuProps = props.menuProps, _a6 = props.onRenderIcon, onRenderIcon = _a6 === void 0 ? this._onRenderIcon : _a6, _b = props.onRenderAriaDescription, onRenderAriaDescription = _b === void 0 ? this._onRenderAriaDescription : _b, _c = props.onRenderChildren, onRenderChildren = _c === void 0 ? this._onRenderChildren : _c, _d = props.onRenderMenu, onRenderMenu = _d === void 0 ? this._onRenderMenu : _d, _e2 = props.onRenderMenuIcon, onRenderMenuIcon = _e2 === void 0 ? this._onRenderMenuIcon : _e2, disabled = props.disabled;
      var keytipProps = props.keytipProps;
      if (keytipProps && menuProps) {
        keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
      }
      var Button = function(keytipAttributes) {
        return React43.createElement(
          Tag,
          __assign6({}, buttonProps, keytipAttributes),
          React43.createElement(
            "span",
            { className: _this._classNames.flexContainer, "data-automationid": "splitbuttonprimary" },
            onRenderIcon(props, _this._onRenderIcon),
            _this._onRenderTextContents(),
            onRenderAriaDescription(props, _this._onRenderAriaDescription),
            onRenderChildren(props, _this._onRenderChildren),
            !_this._isSplitButton && (menuProps || menuIconProps || _this.props.onRenderMenuIcon) && onRenderMenuIcon(_this.props, _this._onRenderMenuIcon),
            menuProps && !menuProps.doNotLayer && _this._shouldRenderMenu() && onRenderMenu(_this._getMenuProps(menuProps), _this._onRenderMenu)
          )
        );
      };
      var Content = keytipProps ? React43.createElement(KeytipData, { keytipProps: !this._isSplitButton ? keytipProps : void 0, ariaDescribedBy: buttonProps["aria-describedby"], disabled }, function(keytipAttributes) {
        return Button(keytipAttributes);
      }) : Button();
      if (menuProps && menuProps.doNotLayer) {
        return React43.createElement(
          React43.Fragment,
          null,
          Content,
          this._shouldRenderMenu() && onRenderMenu(this._getMenuProps(menuProps), this._onRenderMenu)
        );
      }
      return React43.createElement(
        React43.Fragment,
        null,
        Content,
        React43.createElement(FocusRects, null)
      );
    };
    BaseButton2.prototype._shouldRenderMenu = function() {
      var menuHidden = this.state.menuHidden;
      var _a6 = this.props, persistMenu = _a6.persistMenu, renderPersistedMenuHiddenOnMount = _a6.renderPersistedMenuHiddenOnMount;
      if (!menuHidden) {
        return true;
      } else if (persistMenu && (this._renderedVisibleMenu || renderPersistedMenuHiddenOnMount)) {
        return true;
      }
      return false;
    };
    BaseButton2.prototype._hasText = function() {
      return this.props.text !== null && (this.props.text !== void 0 || typeof this.props.children === "string");
    };
    BaseButton2.prototype._getMenuProps = function(menuProps) {
      var persistMenu = this.props.persistMenu;
      var menuHidden = this.state.menuHidden;
      if (!menuProps.ariaLabel && !menuProps.labelElementId && this._hasText()) {
        menuProps = __assign6(__assign6({}, menuProps), { labelElementId: this._labelId });
      }
      return __assign6(__assign6({ id: this._labelId + "-menu", directionalHint: DirectionalHint.bottomLeftEdge }, menuProps), { shouldFocusOnContainer: this._menuShouldFocusOnContainer, shouldFocusOnMount: this._menuShouldFocusOnMount, hidden: persistMenu ? menuHidden : void 0, className: css("ms-BaseButton-menuhost", menuProps.className), target: this._isSplitButton ? this._splitButtonContainer.current : this._buttonElement.current, onDismiss: this._onDismissMenu });
    };
    BaseButton2.prototype._onRenderSplitButtonContent = function(tag, buttonProps) {
      var _this = this;
      var _a6 = this.props, _b = _a6.styles, styles2 = _b === void 0 ? {} : _b, disabled = _a6.disabled, allowDisabledFocus = _a6.allowDisabledFocus, checked = _a6.checked, getSplitButtonClassNames2 = _a6.getSplitButtonClassNames, primaryDisabled = _a6.primaryDisabled, menuProps = _a6.menuProps, toggle = _a6.toggle, role = _a6.role, primaryActionButtonProps = _a6.primaryActionButtonProps;
      var keytipProps = this.props.keytipProps;
      var menuHidden = this.state.menuHidden;
      var classNames2 = getSplitButtonClassNames2 ? getSplitButtonClassNames2(!!disabled, !menuHidden, !!checked, !!allowDisabledFocus) : styles2 && getSplitButtonClassNames(styles2, !!disabled, !menuHidden, !!checked, !!primaryDisabled);
      assign2(buttonProps, {
        onClick: void 0,
        onPointerDown: void 0,
        onPointerUp: void 0,
        tabIndex: -1,
        "data-is-focusable": false
      });
      if (keytipProps && menuProps) {
        keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
      }
      var containerProps = getNativeProps(buttonProps, [], ["disabled"]);
      if (primaryActionButtonProps) {
        assign2(buttonProps, primaryActionButtonProps);
      }
      var SplitButton = function(keytipAttributes) {
        return React43.createElement(
          "div",
          __assign6({}, containerProps, { "data-ktp-target": keytipAttributes ? keytipAttributes["data-ktp-target"] : void 0, role: role ? role : "button", "aria-disabled": disabled, "aria-haspopup": true, "aria-expanded": !menuHidden, "aria-pressed": toggle ? !!checked : void 0, "aria-describedby": mergeAriaAttributeValues(buttonProps["aria-describedby"], keytipAttributes ? keytipAttributes["aria-describedby"] : void 0), className: classNames2 && classNames2.splitButtonContainer, onKeyDown: _this._onSplitButtonContainerKeyDown, onTouchStart: _this._onTouchStart, ref: _this._splitButtonContainer, "data-is-focusable": true, onClick: !disabled && !primaryDisabled ? _this._onSplitButtonPrimaryClick : void 0, tabIndex: !disabled && !primaryDisabled || allowDisabledFocus ? 0 : void 0, "aria-roledescription": buttonProps["aria-roledescription"], onFocusCapture: _this._onSplitContainerFocusCapture }),
          React43.createElement(
            "span",
            { style: { display: "flex", width: "100%" } },
            _this._onRenderContent(tag, buttonProps),
            _this._onRenderSplitButtonMenuButton(classNames2, keytipAttributes),
            _this._onRenderSplitButtonDivider(classNames2)
          )
        );
      };
      return keytipProps ? React43.createElement(KeytipData, { keytipProps, disabled }, function(keytipAttributes) {
        return SplitButton(keytipAttributes);
      }) : SplitButton();
    };
    BaseButton2.prototype._onRenderSplitButtonDivider = function(classNames2) {
      if (classNames2 && classNames2.divider) {
        var onClick = function(ev) {
          ev.stopPropagation();
        };
        return React43.createElement("span", { className: classNames2.divider, "aria-hidden": true, onClick });
      }
      return null;
    };
    BaseButton2.prototype._onRenderSplitButtonMenuButton = function(classNames2, keytipAttributes) {
      var _a6 = this.props, allowDisabledFocus = _a6.allowDisabledFocus, checked = _a6.checked, disabled = _a6.disabled, splitButtonMenuProps = _a6.splitButtonMenuProps, splitButtonAriaLabel = _a6.splitButtonAriaLabel, primaryDisabled = _a6.primaryDisabled;
      var menuHidden = this.state.menuHidden;
      var menuIconProps = this.props.menuIconProps;
      if (menuIconProps === void 0) {
        menuIconProps = {
          iconName: "ChevronDown"
        };
      }
      var splitButtonProps = __assign6(__assign6({}, splitButtonMenuProps), { styles: classNames2, checked, disabled, allowDisabledFocus, onClick: this._onMenuClick, menuProps: void 0, iconProps: __assign6(__assign6({}, menuIconProps), { className: this._classNames.menuIcon }), ariaLabel: splitButtonAriaLabel, "aria-haspopup": true, "aria-expanded": !menuHidden, "data-is-focusable": false });
      return React43.createElement(BaseButton2, __assign6({}, splitButtonProps, { "data-ktp-execute-target": keytipAttributes ? keytipAttributes["data-ktp-execute-target"] : keytipAttributes, onMouseDown: this._onMouseDown, tabIndex: primaryDisabled && !allowDisabledFocus ? 0 : -1 }));
    };
    BaseButton2.prototype._onPointerDown = function(ev) {
      var onPointerDown = this.props.onPointerDown;
      if (onPointerDown) {
        onPointerDown(ev);
      }
      if (ev.pointerType === "touch") {
        this._handleTouchAndPointerEvent();
        ev.preventDefault();
        ev.stopImmediatePropagation();
      }
    };
    BaseButton2.prototype._handleTouchAndPointerEvent = function() {
      var _this = this;
      if (this._lastTouchTimeoutId !== void 0) {
        this._async.clearTimeout(this._lastTouchTimeoutId);
        this._lastTouchTimeoutId = void 0;
      }
      this._processingTouch = true;
      this._lastTouchTimeoutId = this._async.setTimeout(function() {
        _this._processingTouch = false;
        _this._lastTouchTimeoutId = void 0;
        _this.focus();
      }, TouchIdleDelay2);
    };
    BaseButton2.prototype._isValidMenuOpenKey = function(ev) {
      if (this.props.menuTriggerKeyCode) {
        return ev.which === this.props.menuTriggerKeyCode;
      } else if (this.props.menuProps) {
        return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);
      }
      return false;
    };
    BaseButton2.defaultProps = {
      baseClassName: "ms-Button",
      styles: {},
      split: false
    };
    return BaseButton2;
  }(React43.Component);

  // node_modules/@fluentui/react/lib/components/Button/DefaultButton/DefaultButton.js
  var React44 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/components/Button/BaseButton.styles.js
  var noOutline = {
    outline: 0
  };
  var iconStyle = function(fontSize) {
    return {
      fontSize,
      margin: "0 4px",
      height: "16px",
      lineHeight: "16px",
      textAlign: "center",
      flexShrink: 0
    };
  };
  var getStyles8 = memoizeFunction(function(theme) {
    var _a6, _b;
    var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
    var border = semanticColors.buttonBorder;
    var disabledBackground = semanticColors.disabledBackground;
    var disabledText = semanticColors.disabledText;
    var buttonHighContrastFocus = {
      left: -2,
      top: -2,
      bottom: -2,
      right: -2,
      outlineColor: "ButtonText"
    };
    return {
      root: [
        getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: "transparent" }),
        theme.fonts.medium,
        {
          border: "1px solid " + border,
          borderRadius: effects.roundedCorner2,
          boxSizing: "border-box",
          cursor: "pointer",
          display: "inline-block",
          margin: 0,
          padding: "0 16px",
          textDecoration: "none",
          textAlign: "center",
          userSelect: "none",
          selectors: {
            ":active > span": {
              position: "relative",
              left: 0,
              top: 0
            }
          }
        }
      ],
      rootDisabled: [
        getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: "transparent" }),
        {
          backgroundColor: disabledBackground,
          borderColor: disabledBackground,
          color: disabledText,
          cursor: "default",
          selectors: {
            ":hover": noOutline,
            ":focus": noOutline
          }
        }
      ],
      iconDisabled: {
        color: disabledText,
        selectors: (_a6 = {}, _a6[HighContrastSelector] = {
          color: "GrayText"
        }, _a6)
      },
      menuIconDisabled: {
        color: disabledText,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          color: "GrayText"
        }, _b)
      },
      flexContainer: {
        display: "flex",
        height: "100%",
        flexWrap: "nowrap",
        justifyContent: "center",
        alignItems: "center"
      },
      description: {
        display: "block"
      },
      textContainer: {
        flexGrow: 1,
        display: "block"
      },
      icon: iconStyle(fonts.mediumPlus.fontSize),
      menuIcon: iconStyle(fonts.small.fontSize),
      label: {
        margin: "0 4px",
        lineHeight: "100%",
        display: "block"
      },
      screenReaderText: hiddenContentStyle
    };
  });

  // node_modules/@fluentui/react/lib/components/Button/SplitButton/SplitButton.styles.js
  var getStyles9 = memoizeFunction(function(theme, customStyles) {
    var _a6, _b, _c, _d, _e2, _f, _g, _h, _j, _k, _l, _m, _o;
    var effects = theme.effects, palette = theme.palette, semanticColors = theme.semanticColors;
    var buttonHighContrastFocus = {
      left: -2,
      top: -2,
      bottom: -2,
      right: -2,
      border: "none"
    };
    var splitButtonDividerBaseStyles2 = {
      position: "absolute",
      width: 1,
      right: 31,
      top: 8,
      bottom: 8
    };
    var splitButtonStyles = {
      splitButtonContainer: [
        getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2 }),
        {
          display: "inline-flex",
          selectors: {
            ".ms-Button--default": {
              borderTopRightRadius: "0",
              borderBottomRightRadius: "0",
              borderRight: "none",
              flexGrow: "1"
            },
            ".ms-Button--primary": {
              borderTopRightRadius: "0",
              borderBottomRightRadius: "0",
              border: "none",
              flexGrow: "1",
              selectors: (_a6 = {}, _a6[HighContrastSelector] = __assign6({ color: "WindowText", backgroundColor: "Window", border: "1px solid WindowText", borderRightWidth: "0" }, getHighContrastNoAdjustStyle()), _a6[":hover"] = {
                border: "none"
              }, _a6[":active"] = {
                border: "none"
              }, _a6)
            },
            ".ms-Button--primary + .ms-Button": {
              border: "none",
              selectors: (_b = {}, _b[HighContrastSelector] = {
                border: "1px solid WindowText",
                borderLeftWidth: "0"
              }, _b)
            }
          }
        }
      ],
      splitButtonContainerHovered: {
        selectors: {
          ".ms-Button--primary": {
            selectors: (_c = {}, _c[HighContrastSelector] = {
              color: "Window",
              backgroundColor: "Highlight"
            }, _c)
          },
          ".ms-Button.is-disabled": {
            color: semanticColors.buttonTextDisabled,
            selectors: (_d = {}, _d[HighContrastSelector] = {
              color: "GrayText",
              borderColor: "GrayText",
              backgroundColor: "Window"
            }, _d)
          }
        }
      },
      splitButtonContainerChecked: {
        selectors: {
          ".ms-Button--primary": {
            selectors: (_e2 = {}, _e2[HighContrastSelector] = __assign6({ color: "Window", backgroundColor: "WindowText" }, getHighContrastNoAdjustStyle()), _e2)
          }
        }
      },
      splitButtonContainerCheckedHovered: {
        selectors: {
          ".ms-Button--primary": {
            selectors: (_f = {}, _f[HighContrastSelector] = __assign6({ color: "Window", backgroundColor: "WindowText" }, getHighContrastNoAdjustStyle()), _f)
          }
        }
      },
      splitButtonContainerFocused: {
        outline: "none!important"
      },
      splitButtonMenuButton: (_g = {
        padding: 6,
        height: "auto",
        boxSizing: "border-box",
        borderRadius: 0,
        borderTopRightRadius: effects.roundedCorner2,
        borderBottomRightRadius: effects.roundedCorner2,
        border: "1px solid " + palette.neutralSecondaryAlt,
        borderLeft: "none",
        outline: "transparent",
        userSelect: "none",
        display: "inline-block",
        textDecoration: "none",
        textAlign: "center",
        cursor: "pointer",
        verticalAlign: "top",
        width: 32,
        marginLeft: -1,
        marginTop: 0,
        marginRight: 0,
        marginBottom: 0
      }, _g[HighContrastSelector] = {
        ".ms-Button-menuIcon": {
          color: "WindowText"
        }
      }, _g),
      splitButtonDivider: __assign6(__assign6({}, splitButtonDividerBaseStyles2), { selectors: (_h = {}, _h[HighContrastSelector] = {
        backgroundColor: "WindowText"
      }, _h) }),
      splitButtonDividerDisabled: __assign6(__assign6({}, splitButtonDividerBaseStyles2), { selectors: (_j = {}, _j[HighContrastSelector] = {
        backgroundColor: "GrayText"
      }, _j) }),
      splitButtonMenuButtonDisabled: {
        pointerEvents: "none",
        border: "none",
        selectors: (_k = {
          ":hover": {
            cursor: "default"
          },
          ".ms-Button--primary": {
            selectors: (_l = {}, _l[HighContrastSelector] = {
              color: "GrayText",
              borderColor: "GrayText",
              backgroundColor: "Window"
            }, _l)
          },
          ".ms-Button-menuIcon": {
            selectors: (_m = {}, _m[HighContrastSelector] = {
              color: "GrayText"
            }, _m)
          }
        }, _k[HighContrastSelector] = {
          color: "GrayText",
          border: "1px solid GrayText",
          backgroundColor: "Window"
        }, _k)
      },
      splitButtonFlexContainer: {
        display: "flex",
        height: "100%",
        flexWrap: "nowrap",
        justifyContent: "center",
        alignItems: "center"
      },
      splitButtonContainerDisabled: {
        outline: "none",
        border: "none",
        selectors: (_o = {}, _o[HighContrastSelector] = __assign6({ color: "GrayText", borderColor: "GrayText", backgroundColor: "Window" }, getHighContrastNoAdjustStyle()), _o)
      },
      splitButtonMenuFocused: __assign6({}, getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2 }))
    };
    return concatStyleSets(splitButtonStyles, customStyles);
  });

  // node_modules/@fluentui/react/lib/components/Button/ButtonThemes.js
  var splitButtonDividerBaseStyles = function() {
    return {
      position: "absolute",
      width: 1,
      right: 31,
      top: 8,
      bottom: 8
    };
  };
  function standardStyles(theme) {
    var _a6, _b, _c, _d, _e2;
    var s2 = theme.semanticColors, p2 = theme.palette;
    var buttonBackground = s2.buttonBackground;
    var buttonBackgroundPressed = s2.buttonBackgroundPressed;
    var buttonBackgroundHovered = s2.buttonBackgroundHovered;
    var buttonBackgroundDisabled = s2.buttonBackgroundDisabled;
    var buttonText = s2.buttonText;
    var buttonTextHovered = s2.buttonTextHovered;
    var buttonTextDisabled = s2.buttonTextDisabled;
    var buttonTextChecked = s2.buttonTextChecked;
    var buttonTextCheckedHovered = s2.buttonTextCheckedHovered;
    return {
      root: {
        backgroundColor: buttonBackground,
        color: buttonText
      },
      rootHovered: {
        backgroundColor: buttonBackgroundHovered,
        color: buttonTextHovered,
        selectors: (_a6 = {}, _a6[HighContrastSelector] = {
          borderColor: "Highlight",
          color: "Highlight"
        }, _a6)
      },
      rootPressed: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextChecked
      },
      rootExpanded: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextChecked
      },
      rootChecked: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextChecked
      },
      rootCheckedHovered: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextCheckedHovered
      },
      rootDisabled: {
        color: buttonTextDisabled,
        backgroundColor: buttonBackgroundDisabled,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          color: "GrayText",
          borderColor: "GrayText",
          backgroundColor: "Window"
        }, _b)
      },
      splitButtonContainer: {
        selectors: (_c = {}, _c[HighContrastSelector] = {
          border: "none"
        }, _c)
      },
      splitButtonMenuButton: {
        color: p2.white,
        backgroundColor: "transparent",
        selectors: {
          ":hover": {
            backgroundColor: p2.neutralLight,
            selectors: (_d = {}, _d[HighContrastSelector] = {
              color: "Highlight"
            }, _d)
          }
        }
      },
      splitButtonMenuButtonDisabled: {
        backgroundColor: s2.buttonBackgroundDisabled,
        selectors: {
          ":hover": {
            backgroundColor: s2.buttonBackgroundDisabled
          }
        }
      },
      splitButtonDivider: __assign6(__assign6({}, splitButtonDividerBaseStyles()), { backgroundColor: p2.neutralTertiaryAlt, selectors: (_e2 = {}, _e2[HighContrastSelector] = {
        backgroundColor: "WindowText"
      }, _e2) }),
      splitButtonDividerDisabled: {
        backgroundColor: theme.palette.neutralTertiaryAlt
      },
      splitButtonMenuButtonChecked: {
        backgroundColor: p2.neutralQuaternaryAlt,
        selectors: {
          ":hover": {
            backgroundColor: p2.neutralQuaternaryAlt
          }
        }
      },
      splitButtonMenuButtonExpanded: {
        backgroundColor: p2.neutralQuaternaryAlt,
        selectors: {
          ":hover": {
            backgroundColor: p2.neutralQuaternaryAlt
          }
        }
      },
      splitButtonMenuIcon: {
        color: s2.buttonText
      },
      splitButtonMenuIconDisabled: {
        color: s2.buttonTextDisabled
      }
    };
  }
  function primaryStyles(theme) {
    var _a6, _b, _c, _d, _e2, _f, _g, _h, _j;
    var p2 = theme.palette, s2 = theme.semanticColors;
    return {
      root: {
        backgroundColor: s2.primaryButtonBackground,
        border: "1px solid " + s2.primaryButtonBackground,
        color: s2.primaryButtonText,
        selectors: (_a6 = {}, _a6[HighContrastSelector] = __assign6({ color: "Window", backgroundColor: "WindowText", borderColor: "WindowText" }, getHighContrastNoAdjustStyle()), _a6["." + IsFocusVisibleClassName + " &:focus"] = {
          selectors: {
            ":after": {
              border: "none",
              outlineColor: p2.white
            }
          }
        }, _a6)
      },
      rootHovered: {
        backgroundColor: s2.primaryButtonBackgroundHovered,
        border: "1px solid " + s2.primaryButtonBackgroundHovered,
        color: s2.primaryButtonTextHovered,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          color: "Window",
          backgroundColor: "Highlight",
          borderColor: "Highlight"
        }, _b)
      },
      rootPressed: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        border: "1px solid " + s2.primaryButtonBackgroundPressed,
        color: s2.primaryButtonTextPressed,
        selectors: (_c = {}, _c[HighContrastSelector] = __assign6({ color: "Window", backgroundColor: "WindowText", borderColor: "WindowText" }, getHighContrastNoAdjustStyle()), _c)
      },
      rootExpanded: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        color: s2.primaryButtonTextPressed
      },
      rootChecked: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        color: s2.primaryButtonTextPressed
      },
      rootCheckedHovered: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        color: s2.primaryButtonTextPressed
      },
      rootDisabled: {
        color: s2.primaryButtonTextDisabled,
        backgroundColor: s2.primaryButtonBackgroundDisabled,
        selectors: (_d = {}, _d[HighContrastSelector] = {
          color: "GrayText",
          borderColor: "GrayText",
          backgroundColor: "Window"
        }, _d)
      },
      splitButtonContainer: {
        selectors: (_e2 = {}, _e2[HighContrastSelector] = {
          border: "none"
        }, _e2)
      },
      splitButtonDivider: __assign6(__assign6({}, splitButtonDividerBaseStyles()), { backgroundColor: p2.white, selectors: (_f = {}, _f[HighContrastSelector] = {
        backgroundColor: "Window"
      }, _f) }),
      splitButtonMenuButton: {
        backgroundColor: s2.primaryButtonBackground,
        color: s2.primaryButtonText,
        selectors: (_g = {}, _g[HighContrastSelector] = {
          backgroundColor: "Canvas"
        }, _g[":hover"] = {
          backgroundColor: s2.primaryButtonBackgroundHovered,
          selectors: (_h = {}, _h[HighContrastSelector] = {
            color: "Highlight"
          }, _h)
        }, _g)
      },
      splitButtonMenuButtonDisabled: {
        backgroundColor: s2.primaryButtonBackgroundDisabled,
        selectors: {
          ":hover": {
            backgroundColor: s2.primaryButtonBackgroundDisabled
          }
        }
      },
      splitButtonMenuButtonChecked: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        selectors: {
          ":hover": {
            backgroundColor: s2.primaryButtonBackgroundPressed
          }
        }
      },
      splitButtonMenuButtonExpanded: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        selectors: {
          ":hover": {
            backgroundColor: s2.primaryButtonBackgroundPressed
          }
        }
      },
      splitButtonMenuIcon: {
        color: s2.primaryButtonText
      },
      splitButtonMenuIconDisabled: {
        color: p2.neutralTertiary,
        selectors: (_j = {}, _j[HighContrastSelector] = {
          color: "GrayText"
        }, _j)
      }
    };
  }

  // node_modules/@fluentui/react/lib/components/Button/DefaultButton/DefaultButton.styles.js
  var DEFAULT_BUTTON_HEIGHT = "32px";
  var DEFAULT_BUTTON_MIN_WIDTH = "80px";
  var getStyles10 = memoizeFunction(function(theme, customStyles, primary) {
    var baseButtonStyles = getStyles8(theme);
    var splitButtonStyles = getStyles9(theme);
    var defaultButtonStyles = {
      root: {
        minWidth: DEFAULT_BUTTON_MIN_WIDTH,
        height: DEFAULT_BUTTON_HEIGHT
      },
      label: {
        fontWeight: FontWeights.semibold
      }
    };
    return concatStyleSets(baseButtonStyles, defaultButtonStyles, primary ? primaryStyles(theme) : standardStyles(theme), splitButtonStyles, customStyles);
  });

  // node_modules/@fluentui/react/lib/components/Button/DefaultButton/DefaultButton.js
  var DefaultButton = function(_super) {
    __extends5(DefaultButton2, _super);
    function DefaultButton2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultButton2.prototype.render = function() {
      var _a6 = this.props, _b = _a6.primary, primary = _b === void 0 ? false : _b, styles2 = _a6.styles, theme = _a6.theme;
      return React44.createElement(BaseButton, __assign6({}, this.props, { variantClassName: primary ? "ms-Button--primary" : "ms-Button--default", styles: getStyles10(theme, styles2, primary), onRenderDescription: nullRender }));
    };
    DefaultButton2 = __decorate5([
      customizable("DefaultButton", ["theme", "styles"], true)
    ], DefaultButton2);
    return DefaultButton2;
  }(React44.Component);

  // node_modules/@fluentui/react/lib/components/Button/PrimaryButton/PrimaryButton.js
  var React45 = __toESM(require_react());
  var PrimaryButton = function(_super) {
    __extends5(PrimaryButton2, _super);
    function PrimaryButton2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PrimaryButton2.prototype.render = function() {
      return React45.createElement(DefaultButton, __assign6({}, this.props, { primary: true, onRenderDescription: nullRender }));
    };
    PrimaryButton2 = __decorate5([
      customizable("PrimaryButton", ["theme", "styles"], true)
    ], PrimaryButton2);
    return PrimaryButton2;
  }(React45.Component);

  // node_modules/@fluentui/react/lib/components/Label/Label.base.js
  var React46 = __toESM(require_react());
  var getClassNames8 = classNamesFunction({
    cacheSize: 100
  });
  var LabelBase = function(_super) {
    __extends5(LabelBase2, _super);
    function LabelBase2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    LabelBase2.prototype.render = function() {
      var _a6 = this.props, _b = _a6.as, RootType = _b === void 0 ? "label" : _b, children = _a6.children, className = _a6.className, disabled = _a6.disabled, styles2 = _a6.styles, required = _a6.required, theme = _a6.theme;
      var classNames2 = getClassNames8(styles2, {
        className,
        disabled,
        required,
        theme
      });
      return React46.createElement(RootType, __assign6({}, getNativeProps(this.props, divProperties), { className: classNames2.root }), children);
    };
    return LabelBase2;
  }(React46.Component);

  // node_modules/@fluentui/react/lib/components/Label/Label.styles.js
  var getStyles11 = function(props) {
    var _a6;
    var theme = props.theme, className = props.className, disabled = props.disabled, required = props.required;
    var semanticColors = theme.semanticColors;
    var labelFontWeight = FontWeights.semibold;
    var labelColor = semanticColors.bodyText;
    var labelDisabledColor = semanticColors.disabledBodyText;
    var labelRequiredStarColor = semanticColors.errorText;
    return {
      root: [
        "ms-Label",
        theme.fonts.medium,
        {
          fontWeight: labelFontWeight,
          color: labelColor,
          boxSizing: "border-box",
          boxShadow: "none",
          margin: 0,
          display: "block",
          padding: "5px 0",
          wordWrap: "break-word",
          overflowWrap: "break-word"
        },
        disabled && {
          color: labelDisabledColor,
          selectors: (_a6 = {}, _a6[HighContrastSelector] = __assign6({ color: "GrayText" }, getHighContrastNoAdjustStyle()), _a6)
        },
        required && {
          selectors: {
            "::after": {
              content: "' *'",
              color: labelRequiredStarColor,
              paddingRight: 12
            }
          }
        },
        className
      ]
    };
  };

  // node_modules/@fluentui/react/lib/components/Label/Label.js
  var Label = styled(LabelBase, getStyles11, void 0, {
    scope: "Label"
  });

  // node_modules/@fluentui/foundation-legacy/node_modules/tslib/modules/index.js
  var import_tslib55 = __toESM(require_tslib8(), 1);
  var {
    __extends: __extends8,
    __assign: __assign9,
    __rest: __rest8,
    __decorate: __decorate8,
    __param: __param8,
    __metadata: __metadata8,
    __awaiter: __awaiter8,
    __generator: __generator8,
    __exportStar: __exportStar8,
    __createBinding: __createBinding8,
    __values: __values9,
    __read: __read9,
    __spread: __spread8,
    __spreadArrays: __spreadArrays8,
    __spreadArray: __spreadArray8,
    __await: __await8,
    __asyncGenerator: __asyncGenerator8,
    __asyncDelegator: __asyncDelegator8,
    __asyncValues: __asyncValues8,
    __makeTemplateObject: __makeTemplateObject8,
    __importStar: __importStar8,
    __importDefault: __importDefault8,
    __classPrivateFieldGet: __classPrivateFieldGet8,
    __classPrivateFieldSet: __classPrivateFieldSet8,
    __classPrivateFieldIn: __classPrivateFieldIn8
  } = import_tslib55.default;

  // node_modules/@fluentui/foundation-legacy/lib/createComponent.js
  var React48 = __toESM(require_react());

  // node_modules/@fluentui/foundation-legacy/lib/slots.js
  var React47 = __toESM(require_react());

  // node_modules/@fluentui/foundation-legacy/lib/utilities.js
  var assign3 = __assign9;

  // node_modules/@fluentui/foundation-legacy/lib/slots.js
  function withSlots(type, props) {
    var children = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      children[_i - 2] = arguments[_i];
    }
    var slotType = type;
    if (slotType.isSlot) {
      children = React47.Children.toArray(children);
      if (children.length === 0) {
        return slotType(props);
      }
      return slotType(__assign9(__assign9({}, props), { children }));
    } else {
      return React47.createElement.apply(React47, __spreadArray8([type, props], children));
    }
  }
  function createFactory(DefaultComponent, options) {
    if (options === void 0) {
      options = {};
    }
    var _a6 = options.defaultProp, defaultProp = _a6 === void 0 ? "children" : _a6;
    var result = function(componentProps, userProps, userSlotOptions, defaultStyles, theme) {
      if (React47.isValidElement(userProps)) {
        return userProps;
      }
      var flattenedUserProps = _translateShorthand(defaultProp, userProps);
      var finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);
      if (userSlotOptions) {
        if (userSlotOptions.component) {
          var UserComponent = userSlotOptions.component;
          return React47.createElement(UserComponent, __assign9({}, finalProps));
        }
        if (userSlotOptions.render) {
          return userSlotOptions.render(finalProps, DefaultComponent);
        }
      }
      return React47.createElement(DefaultComponent, __assign9({}, finalProps));
    };
    return result;
  }
  var defaultFactory = memoizeFunction(function(type) {
    return createFactory(type);
  });
  function getSlots(userProps, slots) {
    var result = {};
    var mixedProps = userProps;
    var _loop_1 = function(name_12) {
      if (slots.hasOwnProperty(name_12)) {
        var slot = function(componentProps) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }
          if (args.length > 0) {
            throw new Error("Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.");
          }
          return _renderSlot(
            slots[name_12],
            componentProps,
            mixedProps[name_12],
            mixedProps.slots && mixedProps.slots[name_12],
            mixedProps._defaultStyles && mixedProps._defaultStyles[name_12],
            mixedProps.theme
          );
        };
        slot.isSlot = true;
        result[name_12] = slot;
      }
    };
    for (var name_1 in slots) {
      _loop_1(name_1);
    }
    return result;
  }
  function _translateShorthand(defaultProp, slotProps) {
    var _a6;
    var transformedProps;
    if (typeof slotProps === "string" || typeof slotProps === "number" || typeof slotProps === "boolean") {
      transformedProps = (_a6 = {}, _a6[defaultProp] = slotProps, _a6);
    } else {
      transformedProps = slotProps;
    }
    return transformedProps;
  }
  function _constructFinalProps(defaultStyles, theme) {
    var allProps = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      allProps[_i - 2] = arguments[_i];
    }
    var finalProps = {};
    var classNames2 = [];
    for (var _a6 = 0, allProps_1 = allProps; _a6 < allProps_1.length; _a6++) {
      var props = allProps_1[_a6];
      classNames2.push(props && props.className);
      assign3(finalProps, props);
    }
    finalProps.className = mergeCss([defaultStyles, classNames2], { rtl: getRTL2(theme) });
    return finalProps;
  }
  function _renderSlot(ComponentType, componentProps, userProps, slotOptions, defaultStyles, theme) {
    if (ComponentType.create !== void 0) {
      return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);
    } else {
      return defaultFactory(ComponentType)(componentProps, userProps, slotOptions, defaultStyles, theme);
    }
  }

  // node_modules/@fluentui/foundation-legacy/lib/createComponent.js
  function createComponent(view, options) {
    if (options === void 0) {
      options = {};
    }
    var _a6 = options.factoryOptions, factoryOptions = _a6 === void 0 ? {} : _a6;
    var defaultProp = factoryOptions.defaultProp;
    var ResultComponent = function(componentProps) {
      var settings = _getCustomizations(options.displayName, React48.useContext(CustomizerContext), options.fields);
      var stateReducer = options.state;
      if (stateReducer) {
        componentProps = __assign9(__assign9({}, componentProps), stateReducer(componentProps));
      }
      var theme = componentProps.theme || settings.theme;
      var tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);
      var styles2 = _resolveStyles(componentProps, theme, tokens, options.styles, settings.styles, componentProps.styles);
      var viewProps = __assign9(__assign9({}, componentProps), { styles: styles2, tokens, _defaultStyles: styles2, theme });
      return view(viewProps);
    };
    ResultComponent.displayName = options.displayName || view.name;
    if (defaultProp) {
      ResultComponent.create = createFactory(ResultComponent, { defaultProp });
    }
    assign3(ResultComponent, options.statics);
    return ResultComponent;
  }
  function _resolveStyles(props, theme, tokens) {
    var allStyles = [];
    for (var _i = 3; _i < arguments.length; _i++) {
      allStyles[_i - 3] = arguments[_i];
    }
    return concatStyleSets.apply(void 0, allStyles.map(function(styles2) {
      return typeof styles2 === "function" ? styles2(props, theme, tokens) : styles2;
    }));
  }
  function _resolveTokens(props, theme) {
    var allTokens = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      allTokens[_i - 2] = arguments[_i];
    }
    var tokens = {};
    for (var _a6 = 0, allTokens_1 = allTokens; _a6 < allTokens_1.length; _a6++) {
      var currentTokens = allTokens_1[_a6];
      if (currentTokens) {
        currentTokens = typeof currentTokens === "function" ? currentTokens(props, theme) : currentTokens;
        if (Array.isArray(currentTokens)) {
          currentTokens = _resolveTokens.apply(void 0, __spreadArray8([props, theme], currentTokens));
        }
        assign3(tokens, currentTokens);
      }
    }
    return tokens;
  }
  function _getCustomizations(displayName, context, fields) {
    var DefaultFields2 = ["theme", "styles", "tokens"];
    return Customizations.getSettings(fields || DefaultFields2, displayName, context.customizations);
  }

  // node_modules/@fluentui/react/lib/components/Stack/StackItem/StackItem.styles.js
  var GlobalClassNames7 = {
    root: "ms-StackItem"
  };
  var alignMap = {
    start: "flex-start",
    end: "flex-end"
  };
  var StackItemStyles = function(props, theme, tokens) {
    var grow = props.grow, shrink = props.shrink, disableShrink = props.disableShrink, align = props.align, verticalFill = props.verticalFill, order = props.order, className = props.className, _a6 = props.basis, basis = _a6 === void 0 ? "auto" : _a6;
    var classNames2 = getGlobalClassNames(GlobalClassNames7, theme);
    return {
      root: [
        theme.fonts.medium,
        classNames2.root,
        {
          flexBasis: basis,
          margin: tokens.margin,
          padding: tokens.padding,
          height: verticalFill ? "100%" : "auto",
          width: "auto"
        },
        grow && {
          flexGrow: grow === true ? 1 : grow
        },
        (disableShrink || !grow && !shrink) && {
          flexShrink: 0
        },
        shrink && !disableShrink && {
          flexShrink: 1
        },
        align && {
          alignSelf: alignMap[align] || align
        },
        order && {
          order
        },
        className
      ]
    };
  };

  // node_modules/@fluentui/react/lib/components/Stack/StackItem/StackItem.js
  var StackItemView = function(props) {
    var children = props.children;
    var nativeProps = getNativeProps(props, htmlElementProperties);
    if (children == null) {
      return null;
    }
    var Slots = getSlots(props, {
      root: "div"
    });
    return withSlots(Slots.root, __assign6({}, nativeProps), children);
  };
  var StackItem = createComponent(StackItemView, {
    displayName: "StackItem",
    styles: StackItemStyles
  });

  // node_modules/@fluentui/react/lib/components/Stack/Stack.js
  var React49 = __toESM(require_react());

  // node_modules/@fluentui/react/lib/components/Stack/StackUtils.js
  var _getThemedSpacing = function(space, theme) {
    if (theme.spacing.hasOwnProperty(space)) {
      return theme.spacing[space];
    }
    return space;
  };
  var _getValueUnitGap = function(gap) {
    var numericalPart = parseFloat(gap);
    var numericalValue = isNaN(numericalPart) ? 0 : numericalPart;
    var numericalString = isNaN(numericalPart) ? "" : numericalPart.toString();
    var unitPart = gap.substring(numericalString.toString().length);
    return {
      value: numericalValue,
      unit: unitPart || "px"
    };
  };
  var parseGap = function(gap, theme) {
    if (gap === void 0 || gap === "") {
      return {
        rowGap: {
          value: 0,
          unit: "px"
        },
        columnGap: {
          value: 0,
          unit: "px"
        }
      };
    }
    if (typeof gap === "number") {
      return {
        rowGap: {
          value: gap,
          unit: "px"
        },
        columnGap: {
          value: gap,
          unit: "px"
        }
      };
    }
    var splitGap = gap.split(" ");
    if (splitGap.length > 2) {
      return {
        rowGap: {
          value: 0,
          unit: "px"
        },
        columnGap: {
          value: 0,
          unit: "px"
        }
      };
    }
    if (splitGap.length === 2) {
      return {
        rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),
        columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme))
      };
    }
    var calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));
    return {
      rowGap: calculatedGap,
      columnGap: calculatedGap
    };
  };
  var parsePadding = function(padding, theme) {
    if (padding === void 0 || typeof padding === "number" || padding === "") {
      return padding;
    }
    var paddingValues = padding.split(" ");
    if (paddingValues.length < 2) {
      return _getThemedSpacing(padding, theme);
    }
    return paddingValues.reduce(function(padding1, padding2) {
      return _getThemedSpacing(padding1, theme) + " " + _getThemedSpacing(padding2, theme);
    });
  };

  // node_modules/@fluentui/react/lib/components/Stack/Stack.styles.js
  var nameMap = {
    start: "flex-start",
    end: "flex-end"
  };
  var GlobalClassNames8 = {
    root: "ms-Stack",
    inner: "ms-Stack-inner"
  };
  var styles = function(props, theme, tokens) {
    var _a6, _b, _c, _d, _e2, _f, _g, _h;
    var verticalFill = props.verticalFill, horizontal = props.horizontal, reversed = props.reversed, grow = props.grow, wrap = props.wrap, horizontalAlign = props.horizontalAlign, verticalAlign = props.verticalAlign, disableShrink = props.disableShrink, className = props.className;
    var classNames2 = getGlobalClassNames(GlobalClassNames8, theme);
    var childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;
    var maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;
    var maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;
    var padding = tokens && tokens.padding ? tokens.padding : props.padding;
    var _j = parseGap(childrenGap, theme), rowGap = _j.rowGap, columnGap = _j.columnGap;
    var horizontalMargin = "" + -0.5 * columnGap.value + columnGap.unit;
    var verticalMargin = "" + -0.5 * rowGap.value + rowGap.unit;
    var childStyles = {
      textOverflow: "ellipsis"
    };
    var disableShrinkStyles = {
      "> *:not(.ms-StackItem)": {
        flexShrink: 0
      }
    };
    if (wrap) {
      return {
        root: [
          classNames2.root,
          {
            flexWrap: "wrap",
            maxWidth,
            maxHeight,
            width: "auto",
            overflow: "visible",
            height: "100%"
          },
          horizontalAlign && (_a6 = {}, _a6[horizontal ? "justifyContent" : "alignItems"] = nameMap[horizontalAlign] || horizontalAlign, _a6),
          verticalAlign && (_b = {}, _b[horizontal ? "alignItems" : "justifyContent"] = nameMap[verticalAlign] || verticalAlign, _b),
          className,
          {
            display: "flex"
          },
          horizontal && {
            height: verticalFill ? "100%" : "auto"
          }
        ],
        inner: [
          classNames2.inner,
          {
            display: "flex",
            flexWrap: "wrap",
            marginLeft: horizontalMargin,
            marginRight: horizontalMargin,
            marginTop: verticalMargin,
            marginBottom: verticalMargin,
            overflow: "visible",
            boxSizing: "border-box",
            padding: parsePadding(padding, theme),
            width: columnGap.value === 0 ? "100%" : "calc(100% + " + columnGap.value + columnGap.unit + ")",
            maxWidth: "100vw",
            "> *": __assign6({ margin: "" + 0.5 * rowGap.value + rowGap.unit + " " + 0.5 * columnGap.value + columnGap.unit }, childStyles)
          },
          disableShrink && disableShrinkStyles,
          horizontalAlign && (_c = {}, _c[horizontal ? "justifyContent" : "alignItems"] = nameMap[horizontalAlign] || horizontalAlign, _c),
          verticalAlign && (_d = {}, _d[horizontal ? "alignItems" : "justifyContent"] = nameMap[verticalAlign] || verticalAlign, _d),
          horizontal && {
            flexDirection: reversed ? "row-reverse" : "row",
            height: rowGap.value === 0 ? "100%" : "calc(100% + " + rowGap.value + rowGap.unit + ")",
            "> *": {
              maxWidth: columnGap.value === 0 ? "100%" : "calc(100% - " + columnGap.value + columnGap.unit + ")"
            }
          },
          !horizontal && {
            flexDirection: reversed ? "column-reverse" : "column",
            height: "calc(100% + " + rowGap.value + rowGap.unit + ")",
            "> *": {
              maxHeight: rowGap.value === 0 ? "100%" : "calc(100% - " + rowGap.value + rowGap.unit + ")"
            }
          }
        ]
      };
    }
    return {
      root: [
        classNames2.root,
        {
          display: "flex",
          flexDirection: horizontal ? reversed ? "row-reverse" : "row" : reversed ? "column-reverse" : "column",
          flexWrap: "nowrap",
          width: "auto",
          height: verticalFill ? "100%" : "auto",
          maxWidth,
          maxHeight,
          padding: parsePadding(padding, theme),
          boxSizing: "border-box",
          "> *": childStyles
        },
        disableShrink && disableShrinkStyles,
        grow && {
          flexGrow: grow === true ? 1 : grow
        },
        horizontal && columnGap.value > 0 && (_e2 = {}, _e2[reversed ? "> *:not(:last-child)" : "> *:not(:first-child)"] = {
          marginLeft: "" + columnGap.value + columnGap.unit
        }, _e2),
        !horizontal && rowGap.value > 0 && (_f = {}, _f[reversed ? "> *:not(:last-child)" : "> *:not(:first-child)"] = {
          marginTop: "" + rowGap.value + rowGap.unit
        }, _f),
        horizontalAlign && (_g = {}, _g[horizontal ? "justifyContent" : "alignItems"] = nameMap[horizontalAlign] || horizontalAlign, _g),
        verticalAlign && (_h = {}, _h[horizontal ? "alignItems" : "justifyContent"] = nameMap[verticalAlign] || verticalAlign, _h),
        className
      ]
    };
  };

  // node_modules/@fluentui/react/lib/components/Stack/Stack.js
  var StackView = function(props) {
    var _a6 = props.as, RootType = _a6 === void 0 ? "div" : _a6, disableShrink = props.disableShrink, wrap = props.wrap, rest = __rest5(props, ["as", "disableShrink", "wrap"]);
    warnDeprecations("Stack", props, {
      gap: "tokens.childrenGap",
      maxHeight: "tokens.maxHeight",
      maxWidth: "tokens.maxWidth",
      padding: "tokens.padding"
    });
    var stackChildren = React49.Children.toArray(props.children);
    if (stackChildren.length === 1 && React49.isValidElement(stackChildren[0]) && stackChildren[0].type === React49.Fragment) {
      stackChildren = stackChildren[0].props.children;
    }
    stackChildren = React49.Children.map(stackChildren, function(child, index) {
      if (!child) {
        return null;
      }
      if (_isStackItem(child)) {
        var defaultItemProps = {
          shrink: !disableShrink
        };
        return React49.cloneElement(child, __assign6(__assign6({}, defaultItemProps), child.props));
      }
      return child;
    });
    var nativeProps = getNativeProps(rest, htmlElementProperties);
    var Slots = getSlots(props, {
      root: RootType,
      inner: "div"
    });
    if (wrap) {
      return withSlots(
        Slots.root,
        __assign6({}, nativeProps),
        withSlots(Slots.inner, null, stackChildren)
      );
    }
    return withSlots(Slots.root, __assign6({}, nativeProps), stackChildren);
  };
  function _isStackItem(item) {
    return !!item && typeof item === "object" && !!item.type && item.type.displayName === StackItem.displayName;
  }
  var StackStatics = {
    Item: StackItem
  };
  var Stack = createComponent(StackView, {
    displayName: "Stack",
    styles,
    statics: StackStatics
  });

  // node_modules/@yume-chan/dataview-bigint-polyfill/esm/pure.js
  var BigInt323 = BigInt(32);
  function getBigInt645(dataView, byteOffset, littleEndian) {
    const littleEndianMask = Number(!!littleEndian);
    const bigEndianMask = Number(!littleEndian);
    return BigInt(dataView.getInt32(byteOffset, littleEndian) * bigEndianMask + dataView.getInt32(byteOffset + 4, littleEndian) * littleEndianMask) << BigInt323 | BigInt(dataView.getUint32(byteOffset, littleEndian) * littleEndianMask + dataView.getUint32(byteOffset + 4, littleEndian) * bigEndianMask);
  }
  function getBigUint645(dataView, byteOffset, littleEndian) {
    const a2 = dataView.getUint32(byteOffset, littleEndian);
    const b2 = dataView.getUint32(byteOffset + 4, littleEndian);
    const littleEndianMask = Number(!!littleEndian);
    const bigEndianMask = Number(!littleEndian);
    return BigInt(a2 * bigEndianMask + b2 * littleEndianMask) << BigInt323 | BigInt(a2 * littleEndianMask + b2 * bigEndianMask);
  }
  function setBigInt645(dataView, byteOffset, value, littleEndian) {
    const hi = Number(value >> BigInt323);
    const lo = Number(value & BigInt(4294967295));
    if (littleEndian) {
      dataView.setInt32(byteOffset + 4, hi, littleEndian);
      dataView.setUint32(byteOffset, lo, littleEndian);
    } else {
      dataView.setInt32(byteOffset, hi, littleEndian);
      dataView.setUint32(byteOffset + 4, lo, littleEndian);
    }
  }
  function setBigUint645(dataView, byteOffset, value, littleEndian) {
    const hi = Number(value >> BigInt323);
    const lo = Number(value & BigInt(4294967295));
    if (littleEndian) {
      dataView.setUint32(byteOffset + 4, hi, littleEndian);
      dataView.setUint32(byteOffset, lo, littleEndian);
    } else {
      dataView.setUint32(byteOffset, hi, littleEndian);
      dataView.setUint32(byteOffset + 4, lo, littleEndian);
    }
  }

  // node_modules/@yume-chan/dataview-bigint-polyfill/esm/fallback.js
  var getBigInt646 = "getBigInt64" in DataView.prototype ? (dataView, byteOffset, littleEndian) => dataView.getBigInt64(byteOffset, littleEndian) : getBigInt645;
  var getBigUint646 = "getBigUint64" in DataView.prototype ? (dataView, byteOffset, littleEndian) => dataView.getBigUint64(byteOffset, littleEndian) : getBigUint645;
  var setBigInt646 = "setBigInt64" in DataView.prototype ? (dataView, byteOffset, value, littleEndian) => dataView.setBigInt64(byteOffset, value, littleEndian) : setBigInt645;
  var setBigUint646 = "setBigUint64" in DataView.prototype ? (dataView, byteOffset, value, littleEndian) => dataView.setBigUint64(byteOffset, value, littleEndian) : setBigUint645;

  // node_modules/@yume-chan/adb/esm/crypto.js
  var BigInt02 = BigInt(0);
  var BigInt12 = BigInt(1);
  var BigInt22 = BigInt(2);
  var BigInt642 = BigInt(64);
  function getBigUint2(dataView, byteOffset, length) {
    let result = BigInt02;
    for (let i2 = byteOffset; i2 < byteOffset + length; i2 += 8) {
      result <<= BigInt642;
      const value = getBigUint646(dataView, i2, false);
      result += value;
    }
    return result;
  }
  function setBigUint2(dataView, byteOffset, value, littleEndian) {
    const start = byteOffset;
    if (littleEndian) {
      while (value > BigInt02) {
        setBigUint646(dataView, byteOffset, value, true);
        byteOffset += 8;
        value >>= BigInt642;
      }
    } else {
      const uint64Array = [];
      while (value > BigInt02) {
        uint64Array.push(BigInt.asUintN(64, value));
        value >>= BigInt642;
      }
      for (let i2 = uint64Array.length - 1; i2 >= 0; i2 -= 1) {
        setBigUint646(dataView, byteOffset, uint64Array[i2], false);
        byteOffset += 8;
      }
    }
    return byteOffset - start;
  }
  var RsaPrivateKeyNOffset2 = 38;
  var RsaPrivateKeyNLength2 = 2048 / 8;
  var RsaPrivateKeyDOffset2 = 303;
  var RsaPrivateKeyDLength2 = 2048 / 8;
  function parsePrivateKey2(key) {
    const view = new DataView(key.buffer, key.byteOffset, key.byteLength);
    const n2 = getBigUint2(view, RsaPrivateKeyNOffset2, RsaPrivateKeyNLength2);
    const d2 = getBigUint2(view, RsaPrivateKeyDOffset2, RsaPrivateKeyDLength2);
    return [n2, d2];
  }
  function modInverse2(a2, m2) {
    a2 = (a2 % m2 + m2) % m2;
    if (!a2 || m2 < 2) {
      return NaN;
    }
    const s2 = [];
    let b2 = m2;
    while (b2) {
      [a2, b2] = [b2, a2 % b2];
      s2.push({ a: a2, b: b2 });
    }
    if (a2 !== 1) {
      return NaN;
    }
    let x2 = 1;
    let y2 = 0;
    for (let i2 = s2.length - 2; i2 >= 0; --i2) {
      [x2, y2] = [y2, x2 - y2 * Math.floor(s2[i2].a / s2[i2].b)];
    }
    return (y2 % m2 + m2) % m2;
  }
  function calculatePublicKeyLength2() {
    return 4 + 4 + 2048 / 8 + 2048 / 8 + 4;
  }
  function calculatePublicKey2(privateKey, output) {
    const [n2] = parsePrivateKey2(privateKey);
    let outputType;
    const outputLength = calculatePublicKeyLength2();
    if (!output) {
      output = new Uint8Array(outputLength);
      outputType = "Uint8Array";
    } else {
      if (output.byteLength < outputLength) {
        throw new Error("output buffer is too small");
      }
      outputType = "number";
    }
    const outputView = new DataView(output.buffer, output.byteOffset, output.byteLength);
    let outputOffset = 0;
    outputView.setUint32(outputOffset, 2048 / 8 / 4, true);
    outputOffset += 4;
    const n0inv = modInverse2(Number(BigInt.asUintN(32, n2) * BigInt(-1)), 2 ** 32);
    outputView.setUint32(outputOffset, n0inv, true);
    outputOffset += 4;
    setBigUint2(outputView, outputOffset, n2, true);
    outputOffset += 256;
    let rr2 = BigInt(2) ** BigInt(4096) % n2;
    outputOffset += setBigUint2(outputView, outputOffset, rr2, true);
    outputView.setUint32(outputOffset, 65537, true);
    outputOffset += 4;
    if (outputType === "Uint8Array") {
      return output;
    } else {
      return outputLength;
    }
  }
  function powMod(base, exponent, modulus) {
    if (modulus === BigInt12) {
      return BigInt02;
    }
    let r2 = BigInt12;
    base = base % modulus;
    while (exponent > BigInt02) {
      if (BigInt.asUintN(1, exponent) === BigInt12) {
        r2 = r2 * base % modulus;
      }
      exponent >>= BigInt12;
      base = base ** BigInt22 % modulus;
    }
    return r2;
  }
  var SHA1_DIGEST_LENGTH2 = 20;
  var ASN1_SEQUENCE2 = 48;
  var ASN1_OCTET_STRING2 = 4;
  var ASN1_NULL2 = 5;
  var ASN1_OID2 = 6;
  var SHA1_DIGEST_INFO2 = new Uint8Array([
    ASN1_SEQUENCE2,
    13 + SHA1_DIGEST_LENGTH2,
    ASN1_SEQUENCE2,
    9,
    ASN1_OID2,
    5,
    1 * 40 + 3,
    14,
    3,
    2,
    26,
    ASN1_NULL2,
    0,
    ASN1_OCTET_STRING2,
    SHA1_DIGEST_LENGTH2
  ]);
  function sign2(privateKey, data) {
    const [n2, d2] = parsePrivateKey2(privateKey);
    const padded = new Uint8Array(256);
    let index = 0;
    padded[index] = 0;
    index += 1;
    padded[index] = 1;
    index += 1;
    const fillLength = padded.length - SHA1_DIGEST_INFO2.length - data.length - 1;
    while (index < fillLength) {
      padded[index] = 255;
      index += 1;
    }
    padded[index] = 0;
    index += 1;
    padded.set(SHA1_DIGEST_INFO2, index);
    index += SHA1_DIGEST_INFO2.length;
    padded.set(data, index);
    const view = new DataView(padded.buffer);
    const signature = powMod(getBigUint2(view, 0, view.byteLength), d2, n2);
    setBigUint2(view, 0, signature, false);
    return padded;
  }

  // node_modules/@yume-chan/struct/esm/basic/definition.js
  var StructFieldDefinition3 = class {
    TValue;
    TOmitInitKey;
    options;
    constructor(options) {
      this.options = options;
    }
  };

  // node_modules/@yume-chan/struct/esm/basic/field-value.js
  var StructFieldValue3 = class {
    definition;
    options;
    struct;
    get hasCustomAccessors() {
      return this.get !== StructFieldValue3.prototype.get || this.set !== StructFieldValue3.prototype.set;
    }
    value;
    constructor(definition, options, struct, value) {
      this.definition = definition;
      this.options = options;
      this.struct = struct;
      this.value = value;
    }
    getSize() {
      return this.definition.getSize();
    }
    get() {
      return this.value;
    }
    set(value) {
      this.value = value;
    }
  };

  // node_modules/@yume-chan/struct/esm/basic/options.js
  var StructDefaultOptions3 = {
    littleEndian: false
  };

  // node_modules/@yume-chan/struct/esm/basic/struct-value.js
  var STRUCT_VALUE_SYMBOL3 = Symbol("struct-value");
  var StructValue3 = class {
    fieldValues = {};
    value;
    constructor(prototype) {
      this.value = Object.create(prototype);
      Object.defineProperty(this.value, STRUCT_VALUE_SYMBOL3, { enumerable: false, value: this });
    }
    set(name, fieldValue) {
      this.fieldValues[name] = fieldValue;
      if (fieldValue.hasCustomAccessors) {
        Object.defineProperty(this.value, name, {
          configurable: true,
          enumerable: true,
          get() {
            return fieldValue.get();
          },
          set(v2) {
            fieldValue.set(v2);
          }
        });
      } else {
        this.value[name] = fieldValue.get();
      }
    }
    get(name) {
      return this.fieldValues[name];
    }
  };

  // node_modules/@yume-chan/struct/esm/sync-promise.js
  var SyncPromise3 = {
    reject(reason) {
      return new RejectedSyncPromise2(reason);
    },
    resolve(value) {
      if (typeof value === "object" && value !== null && typeof value.then === "function") {
        if (value instanceof PendingSyncPromise2 || value instanceof ResolvedSyncPromise2 || value instanceof RejectedSyncPromise2) {
          return value;
        }
        return new PendingSyncPromise2(value);
      } else {
        return new ResolvedSyncPromise2(value);
      }
    },
    try(executor) {
      try {
        return SyncPromise3.resolve(executor());
      } catch (e2) {
        return SyncPromise3.reject(e2);
      }
    }
  };
  var PendingSyncPromise2 = class {
    promise;
    constructor(promise) {
      this.promise = promise;
    }
    then(onfulfilled, onrejected) {
      return new PendingSyncPromise2(this.promise.then(onfulfilled, onrejected));
    }
    valueOrPromise() {
      return this.promise;
    }
  };
  var ResolvedSyncPromise2 = class {
    value;
    constructor(value) {
      this.value = value;
    }
    then(onfulfilled, onrejected) {
      if (!onfulfilled) {
        return this;
      }
      return SyncPromise3.try(() => onfulfilled(this.value));
    }
    valueOrPromise() {
      return this.value;
    }
  };
  var RejectedSyncPromise2 = class {
    reason;
    constructor(reason) {
      this.reason = reason;
    }
    then(onfulfilled, onrejected) {
      if (!onrejected) {
        return this;
      }
      return SyncPromise3.try(() => onrejected(this.reason));
    }
    valueOrPromise() {
      throw this.reason;
    }
  };

  // node_modules/@yume-chan/struct/esm/types/bigint.js
  var _BigIntFieldType3 = class {
    TTypeScriptType;
    size;
    getter;
    setter;
    constructor(size, getter, setter) {
      this.size = size;
      this.getter = getter;
      this.setter = setter;
    }
  };
  var BigIntFieldType3 = _BigIntFieldType3;
  __publicField(BigIntFieldType3, "Int64", new _BigIntFieldType3(8, getBigInt646, setBigInt646));
  __publicField(BigIntFieldType3, "Uint64", new _BigIntFieldType3(8, getBigUint646, setBigUint646));
  var BigIntFieldDefinition3 = class extends StructFieldDefinition3 {
    type;
    constructor(type, _typescriptType) {
      super();
      this.type = type;
    }
    getSize() {
      return this.type.size;
    }
    create(options, struct, value) {
      return new BigIntFieldValue2(this, options, struct, value);
    }
    deserialize(options, stream, struct) {
      return SyncPromise3.try(() => {
        return stream.read(this.getSize());
      }).then((array2) => {
        const view = new DataView(array2.buffer, array2.byteOffset, array2.byteLength);
        const value = this.type.getter(view, 0, options.littleEndian);
        return this.create(options, struct, value);
      }).valueOrPromise();
    }
  };
  var BigIntFieldValue2 = class extends StructFieldValue3 {
    serialize(dataView, offset) {
      this.definition.type.setter(dataView, offset, this.value, this.options.littleEndian);
    }
  };

  // node_modules/@yume-chan/struct/esm/utils.js
  function placeholder2() {
    return void 0;
  }
  var Utf8Encoder3 = new TextEncoder();
  var Utf8Decoder3 = new TextDecoder();
  function encodeUtf83(input) {
    return Utf8Encoder3.encode(input);
  }
  function decodeUtf83(buffer) {
    return Utf8Decoder3.decode(buffer);
  }

  // node_modules/@yume-chan/struct/esm/types/buffer/base.js
  var BufferFieldSubType3 = class {
    TTypeScriptType;
  };
  var _Uint8ArrayBufferFieldSubType3 = class extends BufferFieldSubType3 {
    constructor() {
      super();
    }
    toBuffer(value) {
      return value;
    }
    toValue(buffer) {
      return buffer;
    }
    getSize(value) {
      return value.byteLength;
    }
  };
  var Uint8ArrayBufferFieldSubType3 = _Uint8ArrayBufferFieldSubType3;
  __publicField(Uint8ArrayBufferFieldSubType3, "Instance", new _Uint8ArrayBufferFieldSubType3());
  var _StringBufferFieldSubType3 = class extends BufferFieldSubType3 {
    toBuffer(value) {
      return encodeUtf83(value);
    }
    toValue(array2) {
      return decodeUtf83(array2);
    }
    getSize() {
      return -1;
    }
  };
  var StringBufferFieldSubType3 = _StringBufferFieldSubType3;
  __publicField(StringBufferFieldSubType3, "Instance", new _StringBufferFieldSubType3());
  var EMPTY_UINT8_ARRAY3 = new Uint8Array(0);
  var BufferLikeFieldDefinition3 = class extends StructFieldDefinition3 {
    type;
    constructor(type, options) {
      super(options);
      this.type = type;
    }
    getDeserializeSize(struct) {
      return this.getSize();
    }
    create(options, struct, value, array2) {
      return new BufferLikeFieldValue3(this, options, struct, value, array2);
    }
    deserialize(options, stream, struct) {
      return SyncPromise3.try(() => {
        const size = this.getDeserializeSize(struct);
        if (size === 0) {
          return EMPTY_UINT8_ARRAY3;
        } else {
          return stream.read(size);
        }
      }).then((array2) => {
        const value = this.type.toValue(array2);
        return this.create(options, struct, value, array2);
      }).valueOrPromise();
    }
  };
  var BufferLikeFieldValue3 = class extends StructFieldValue3 {
    array;
    constructor(definition, options, struct, value, array2) {
      super(definition, options, struct, value);
      this.array = array2;
    }
    set(value) {
      super.set(value);
      this.array = void 0;
    }
    serialize(dataView, offset) {
      if (!this.array) {
        this.array = this.definition.type.toBuffer(this.value);
      }
      new Uint8Array(dataView.buffer, dataView.byteOffset, dataView.byteLength).set(this.array, offset);
    }
  };

  // node_modules/@yume-chan/struct/esm/types/buffer/fixed-length.js
  var FixedLengthBufferLikeFieldDefinition3 = class extends BufferLikeFieldDefinition3 {
    getSize() {
      return this.options.length;
    }
  };

  // node_modules/@yume-chan/struct/esm/types/buffer/variable-length.js
  var VariableLengthBufferLikeFieldDefinition3 = class extends BufferLikeFieldDefinition3 {
    getSize() {
      return 0;
    }
    getDeserializeSize(struct) {
      let value = struct.value[this.options.lengthField];
      if (typeof value === "string") {
        value = Number.parseInt(value, this.options.lengthFieldRadix ?? 10);
      }
      return value;
    }
    create(options, struct, value, array2) {
      return new VariableLengthBufferLikeStructFieldValue2(this, options, struct, value, array2);
    }
  };
  var VariableLengthBufferLikeStructFieldValue2 = class extends BufferLikeFieldValue3 {
    length;
    lengthFieldValue;
    constructor(definition, options, struct, value, array2) {
      super(definition, options, struct, value, array2);
      if (array2) {
        this.length = array2.byteLength;
      }
      const lengthField = this.definition.options.lengthField;
      const originalValue = struct.get(lengthField);
      this.lengthFieldValue = new VariableLengthBufferLikeFieldLengthValue2(originalValue, this);
      struct.set(lengthField, this.lengthFieldValue);
    }
    getSize() {
      if (this.length === void 0) {
        this.length = this.definition.type.getSize(this.value);
        if (this.length === -1) {
          this.array = this.definition.type.toBuffer(this.value);
          this.length = this.array.byteLength;
        }
      }
      return this.length;
    }
    set(value) {
      super.set(value);
      this.array = void 0;
      this.length = void 0;
    }
  };
  var VariableLengthBufferLikeFieldLengthValue2 = class extends StructFieldValue3 {
    originalField;
    bufferField;
    constructor(originalField, arrayBufferField) {
      super(originalField.definition, originalField.options, originalField.struct, 0);
      this.originalField = originalField;
      this.bufferField = arrayBufferField;
    }
    getSize() {
      return this.originalField.getSize();
    }
    get() {
      let value = this.bufferField.getSize();
      const originalValue = this.originalField.get();
      if (typeof originalValue === "string") {
        value = value.toString(this.bufferField.definition.options.lengthFieldRadix ?? 10);
      }
      return value;
    }
    set() {
    }
    serialize(dataView, offset) {
      this.originalField.set(this.get());
      this.originalField.serialize(dataView, offset);
    }
  };

  // node_modules/@yume-chan/struct/esm/types/number.js
  var DESERIALIZERS3 = {
    1: (array2, littleEndian) => array2[0],
    2: (array2, littleEndian) => (array2[1] << 8 | array2[0]) * littleEndian | (array2[0] << 8 | array2[1]) * !littleEndian,
    4: (array2, littleEndian) => (array2[3] << 24 | array2[2] << 16 | array2[1] << 8 | array2[0]) * littleEndian | (array2[0] << 24 | array2[1] << 16 | array2[2] << 8 | array2[3]) * !littleEndian
  };
  var _NumberFieldType3 = class {
    TTypeScriptType;
    signed;
    size;
    deserializer;
    convertSign;
    dataViewSetter;
    constructor(size, signed, convertSign, dataViewSetter) {
      this.size = size;
      this.signed = signed;
      this.deserializer = DESERIALIZERS3[size];
      this.convertSign = convertSign;
      this.dataViewSetter = dataViewSetter;
    }
  };
  var NumberFieldType3 = _NumberFieldType3;
  __publicField(NumberFieldType3, "Int8", new _NumberFieldType3(1, true, (value) => value << 24 >> 24, "setInt8"));
  __publicField(NumberFieldType3, "Uint8", new _NumberFieldType3(1, false, (value) => value, "setUint8"));
  __publicField(NumberFieldType3, "Int16", new _NumberFieldType3(2, true, (value) => value << 16 >> 16, "setInt16"));
  __publicField(NumberFieldType3, "Uint16", new _NumberFieldType3(2, false, (value) => value, "setUint16"));
  __publicField(NumberFieldType3, "Int32", new _NumberFieldType3(4, true, (value) => value, "setInt32"));
  __publicField(NumberFieldType3, "Uint32", new _NumberFieldType3(4, false, (value) => value >>> 0, "setUint32"));
  var NumberFieldDefinition3 = class extends StructFieldDefinition3 {
    type;
    constructor(type, _typescriptType) {
      super();
      this.type = type;
    }
    getSize() {
      return this.type.size;
    }
    create(options, struct, value) {
      return new NumberFieldValue2(this, options, struct, value);
    }
    deserialize(options, stream, struct) {
      return SyncPromise3.try(() => {
        return stream.read(this.getSize());
      }).then((array2) => {
        let value;
        value = this.type.deserializer(array2, options.littleEndian);
        value = this.type.convertSign(value);
        return this.create(options, struct, value);
      }).valueOrPromise();
    }
  };
  var NumberFieldValue2 = class extends StructFieldValue3 {
    serialize(dataView, offset) {
      dataView[this.definition.type.dataViewSetter](offset, this.value, this.options.littleEndian);
    }
  };

  // node_modules/@yume-chan/struct/esm/struct.js
  var Struct3 = class {
    TFields;
    TOmitInitKey;
    TExtra;
    TInit;
    TDeserializeResult;
    options;
    _size = 0;
    get size() {
      return this._size;
    }
    _fields = [];
    _extra = {};
    _postDeserialized;
    constructor(options) {
      this.options = { ...StructDefaultOptions3, ...options };
    }
    field(name, definition) {
      for (const field of this._fields) {
        if (field[0] === name) {
          throw new Error(`This struct already have a field with name '${String(name)}'`);
        }
      }
      this._fields.push([name, definition]);
      const size = definition.getSize();
      this._size += size;
      return this;
    }
    fields(other) {
      for (const field of other._fields) {
        this._fields.push(field);
      }
      this._size += other._size;
      Object.defineProperties(this._extra, Object.getOwnPropertyDescriptors(other._extra));
      return this;
    }
    number(name, type, typeScriptType) {
      return this.field(name, new NumberFieldDefinition3(type, typeScriptType));
    }
    int8(name, typeScriptType) {
      return this.number(name, NumberFieldType3.Int8, typeScriptType);
    }
    uint8(name, typeScriptType) {
      return this.number(name, NumberFieldType3.Uint8, typeScriptType);
    }
    int16(name, typeScriptType) {
      return this.number(name, NumberFieldType3.Int16, typeScriptType);
    }
    uint16(name, typeScriptType) {
      return this.number(name, NumberFieldType3.Uint16, typeScriptType);
    }
    int32(name, typeScriptType) {
      return this.number(name, NumberFieldType3.Int32, typeScriptType);
    }
    uint32(name, typeScriptType) {
      return this.number(name, NumberFieldType3.Uint32, typeScriptType);
    }
    bigint(name, type, typeScriptType) {
      return this.field(name, new BigIntFieldDefinition3(type, typeScriptType));
    }
    int64(name, typeScriptType) {
      return this.bigint(name, BigIntFieldType3.Int64, typeScriptType);
    }
    uint64(name, typeScriptType) {
      return this.bigint(name, BigIntFieldType3.Uint64, typeScriptType);
    }
    arrayBufferLike = (name, type, options) => {
      if ("length" in options) {
        return this.field(name, new FixedLengthBufferLikeFieldDefinition3(type, options));
      } else {
        return this.field(name, new VariableLengthBufferLikeFieldDefinition3(type, options));
      }
    };
    uint8Array = (name, options, typeScriptType) => {
      return this.arrayBufferLike(name, Uint8ArrayBufferFieldSubType3.Instance, options, typeScriptType);
    };
    string = (name, options, typeScriptType) => {
      return this.arrayBufferLike(name, StringBufferFieldSubType3.Instance, options, typeScriptType);
    };
    extra(value) {
      Object.defineProperties(this._extra, Object.getOwnPropertyDescriptors(value));
      return this;
    }
    postDeserialize(callback) {
      this._postDeserialized = callback;
      return this;
    }
    deserialize(stream) {
      const structValue = new StructValue3(this._extra);
      let promise = SyncPromise3.resolve();
      for (const [name, definition] of this._fields) {
        promise = promise.then(() => definition.deserialize(this.options, stream, structValue)).then((fieldValue) => {
          structValue.set(name, fieldValue);
        });
      }
      return promise.then(() => {
        const object2 = structValue.value;
        if (this._postDeserialized) {
          const override = this._postDeserialized.call(object2, object2);
          if (override) {
            return override;
          }
        }
        return object2;
      }).valueOrPromise();
    }
    serialize(init, output) {
      let structValue;
      if (STRUCT_VALUE_SYMBOL3 in init) {
        structValue = init[STRUCT_VALUE_SYMBOL3];
        for (const [key, value] of Object.entries(init)) {
          const fieldValue = structValue.get(key);
          if (fieldValue) {
            fieldValue.set(value);
          }
        }
      } else {
        structValue = new StructValue3({});
        for (const [name, definition] of this._fields) {
          const fieldValue = definition.create(this.options, structValue, init[name]);
          structValue.set(name, fieldValue);
        }
      }
      let structSize = 0;
      const fieldsInfo = [];
      for (const [name] of this._fields) {
        const fieldValue = structValue.get(name);
        const size = fieldValue.getSize();
        fieldsInfo.push({ fieldValue, size });
        structSize += size;
      }
      let outputType = "number";
      if (!output) {
        output = new Uint8Array(structSize);
        outputType = "Uint8Array";
      }
      const dataView = new DataView(output.buffer, output.byteOffset, output.byteLength);
      let offset = 0;
      for (const { fieldValue, size } of fieldsInfo) {
        fieldValue.serialize(dataView, offset);
        offset += size;
      }
      if (outputType === "number") {
        return structSize;
      } else {
        return output;
      }
    }
  };

  // node_modules/@yume-chan/adb/esm/utils/auto-reset-event.js
  var AutoResetEvent2 = class {
    list = [];
    blocking;
    constructor(initialSet = false) {
      this.blocking = initialSet;
    }
    wait() {
      if (!this.blocking) {
        this.blocking = true;
        if (this.list.length === 0) {
          return Promise.resolve();
        }
      }
      const resolver = new PromiseResolver();
      this.list.push(resolver);
      return resolver.promise;
    }
    notify() {
      if (this.list.length !== 0) {
        this.list.pop().resolve();
      } else {
        this.blocking = false;
      }
    }
    dispose() {
      for (const item of this.list) {
        item.reject(new Error("The AutoResetEvent has been disposed"));
      }
      this.list.length = 0;
    }
  };

  // node_modules/@yume-chan/adb/esm/utils/base64.js
  var charToIndex2 = {};
  var indexToChar2 = [];
  var paddingChar2 = "=".charCodeAt(0);
  function addRange2(start, end) {
    const charCodeStart = start.charCodeAt(0);
    const charCodeEnd = end.charCodeAt(0);
    for (let charCode = charCodeStart; charCode <= charCodeEnd; charCode += 1) {
      charToIndex2[String.fromCharCode(charCode)] = indexToChar2.length;
      indexToChar2.push(charCode);
    }
  }
  addRange2("A", "Z");
  addRange2("a", "z");
  addRange2("0", "9");
  addRange2("+", "+");
  addRange2("/", "/");
  function calculateBase64EncodedLength2(inputLength) {
    const remainder = inputLength % 3;
    const paddingLength = remainder !== 0 ? 3 - remainder : 0;
    return [(inputLength + paddingLength) / 3 * 4, paddingLength];
  }
  function encodeBase642(input, output) {
    const [outputLength, paddingLength] = calculateBase64EncodedLength2(input.length);
    if (!output) {
      output = new Uint8Array(outputLength);
      encodeForward2(input, output, paddingLength);
      return output;
    } else {
      if (output.length < outputLength) {
        throw new Error("output buffer is too small");
      }
      output = output.subarray(0, outputLength);
      if (input.buffer !== output.buffer) {
        encodeForward2(input, output, paddingLength);
      } else if (output.byteOffset + output.length - (paddingLength + 1) <= input.byteOffset + input.length) {
        encodeForward2(input, output, paddingLength);
      } else if (output.byteOffset >= input.byteOffset - 1) {
        encodeBackward2(input, output, paddingLength);
      } else {
        throw new Error("input and output cannot overlap");
      }
      return outputLength;
    }
  }
  function encodeForward2(input, output, paddingLength) {
    let inputIndex = 0;
    let outputIndex = 0;
    while (inputIndex < input.length - 2) {
      const x2 = input[inputIndex];
      inputIndex += 1;
      const y2 = input[inputIndex];
      inputIndex += 1;
      const z2 = input[inputIndex];
      inputIndex += 1;
      output[outputIndex] = indexToChar2[x2 >> 2];
      outputIndex += 1;
      output[outputIndex] = indexToChar2[(x2 & 3) << 4 | y2 >> 4];
      outputIndex += 1;
      output[outputIndex] = indexToChar2[(y2 & 15) << 2 | z2 >> 6];
      outputIndex += 1;
      output[outputIndex] = indexToChar2[z2 & 63];
      outputIndex += 1;
    }
    if (paddingLength === 2) {
      const x2 = input[inputIndex];
      inputIndex += 1;
      output[outputIndex] = indexToChar2[x2 >> 2];
      outputIndex += 1;
      output[outputIndex] = indexToChar2[(x2 & 3) << 4];
      outputIndex += 1;
      output[outputIndex] = paddingChar2;
      outputIndex += 1;
      output[outputIndex] = paddingChar2;
    } else if (paddingLength === 1) {
      const x2 = input[inputIndex];
      inputIndex += 1;
      const y2 = input[inputIndex];
      inputIndex += 1;
      output[outputIndex] = indexToChar2[x2 >> 2];
      outputIndex += 1;
      output[outputIndex] = indexToChar2[(x2 & 3) << 4 | y2 >> 4];
      outputIndex += 1;
      output[outputIndex] = indexToChar2[(y2 & 15) << 2];
      outputIndex += 1;
      output[outputIndex] = paddingChar2;
    }
  }
  function encodeBackward2(input, output, paddingLength) {
    let inputIndex = input.length - 1;
    let outputIndex = output.length - 1;
    if (paddingLength === 2) {
      const x2 = input[inputIndex];
      inputIndex -= 1;
      output[outputIndex] = paddingChar2;
      outputIndex -= 1;
      output[outputIndex] = paddingChar2;
      outputIndex -= 1;
      output[outputIndex] = indexToChar2[(x2 & 3) << 4];
      outputIndex -= 1;
      output[outputIndex] = indexToChar2[x2 >> 2];
      outputIndex -= 1;
    } else if (paddingLength === 1) {
      const y2 = input[inputIndex];
      inputIndex -= 1;
      const x2 = input[inputIndex];
      inputIndex -= 1;
      output[outputIndex] = paddingChar2;
      outputIndex -= 1;
      output[outputIndex] = indexToChar2[(y2 & 15) << 2];
      outputIndex -= 1;
      output[outputIndex] = indexToChar2[(x2 & 3) << 4 | y2 >> 4];
      outputIndex -= 1;
      output[outputIndex] = indexToChar2[x2 >> 2];
      outputIndex -= 1;
    }
    while (inputIndex >= 0) {
      const z2 = input[inputIndex];
      inputIndex -= 1;
      const y2 = input[inputIndex];
      inputIndex -= 1;
      const x2 = input[inputIndex];
      inputIndex -= 1;
      output[outputIndex] = indexToChar2[z2 & 63];
      outputIndex -= 1;
      output[outputIndex] = indexToChar2[(y2 & 15) << 2 | z2 >> 6];
      outputIndex -= 1;
      output[outputIndex] = indexToChar2[(x2 & 3) << 4 | y2 >> 4];
      outputIndex -= 1;
      output[outputIndex] = indexToChar2[x2 >> 2];
      outputIndex -= 1;
    }
  }

  // node_modules/@yume-chan/adb/esm/stream/detect.polyfill.js
  var AbortController3;
  ({ AbortController: AbortController3 } = globalThis);

  // node_modules/@yume-chan/adb/esm/stream/transform.js
  var DuplexStreamFactory2 = class {
    readableControllers = [];
    writers = [];
    _writableClosed = false;
    get writableClosed() {
      return this._writableClosed;
    }
    _closed = new PromiseResolver();
    get closed() {
      return this._closed.promise;
    }
    options;
    constructor(options) {
      this.options = options ?? {};
    }
    wrapReadable(readable) {
      return new WrapReadableStream2({
        start: (controller) => {
          this.readableControllers.push(controller);
          return readable;
        },
        cancel: async () => {
          await this.close();
        },
        close: async () => {
          await this.dispose();
        }
      });
    }
    createWritable(stream) {
      const writer = stream.getWriter();
      this.writers.push(writer);
      return new WritableStream({
        write: async (chunk) => {
          await writer.ready;
          await writer.write(chunk);
        },
        abort: async (reason) => {
          await writer.abort(reason);
          await this.close();
        },
        close: async () => {
          try {
            await writer.close();
          } catch {
          }
          await this.close();
        }
      });
    }
    async close() {
      if (this._writableClosed) {
        return;
      }
      this._writableClosed = true;
      if (await this.options.close?.() !== false) {
        await this.dispose();
      }
      for (const writer of this.writers) {
        try {
          await writer.close();
        } catch {
        }
      }
    }
    async dispose() {
      this._writableClosed = true;
      this._closed.resolve();
      for (const controller of this.readableControllers) {
        try {
          controller.close();
        } catch {
        }
      }
      await this.options.dispose?.();
    }
  };
  var DecodeUtf8Stream2 = class extends TransformStream {
    constructor() {
      super({
        transform(chunk, controller) {
          controller.enqueue(decodeUtf83(chunk));
        }
      });
    }
  };
  var GatherStringStream2 = class extends WritableStream {
    _result = "";
    get result() {
      return this._result;
    }
    constructor() {
      super({
        write: (chunk) => {
          this._result += chunk;
        }
      });
    }
  };
  var StructDeserializeStream2 = class {
    _readable;
    get readable() {
      return this._readable;
    }
    _writable;
    get writable() {
      return this._writable;
    }
    constructor(struct) {
      let incomingStreamController;
      const incomingStream = new BufferedStream(new PushReadableStream2((controller) => incomingStreamController = controller));
      this._readable = new ReadableStream({
        async pull(controller) {
          try {
            const value = await struct.deserialize(incomingStream);
            controller.enqueue(value);
          } catch (e2) {
            if (e2 instanceof BufferedStreamEndedError) {
              controller.close();
              return;
            }
            throw e2;
          }
        }
      });
      this._writable = new WritableStream({
        async write(chunk) {
          await incomingStreamController.enqueue(chunk);
        },
        abort() {
          incomingStreamController.close();
        },
        close() {
          incomingStreamController.close();
        }
      });
    }
  };
  var StructSerializeStream2 = class extends TransformStream {
    constructor(struct) {
      super({
        transform(chunk, controller) {
          controller.enqueue(struct.serialize(chunk));
        }
      });
    }
  };
  async function getWrappedWritableStream(wrapper2) {
    if ("start" in wrapper2) {
      return await wrapper2.start();
    } else if (typeof wrapper2 === "function") {
      return await wrapper2();
    } else {
      return wrapper2;
    }
  }
  var WrapWritableStream2 = class extends WritableStream {
    writable;
    writer;
    constructor(wrapper2) {
      super({
        start: async () => {
          await Promise.resolve();
          this.writable = await getWrappedWritableStream(wrapper2);
          this.writer = this.writable.getWriter();
        },
        write: async (chunk) => {
          await this.writer.ready;
          await this.writer.write(chunk);
        },
        abort: async (reason) => {
          await this.writer.abort(reason);
          if ("close" in wrapper2) {
            await wrapper2.close?.();
          }
        },
        close: async () => {
          await this.writer.close();
          if ("close" in wrapper2) {
            await wrapper2.close?.();
          }
        }
      });
    }
  };
  function getWrappedReadableStream(wrapper2, controller) {
    if ("start" in wrapper2) {
      return wrapper2.start(controller);
    } else if (typeof wrapper2 === "function") {
      return wrapper2(controller);
    } else {
      return wrapper2;
    }
  }
  var WrapReadableStream2 = class extends ReadableStream {
    readable;
    reader;
    constructor(wrapper2) {
      super({
        start: async (controller) => {
          await Promise.resolve();
          this.readable = await getWrappedReadableStream(wrapper2, controller);
          this.reader = this.readable.getReader();
        },
        cancel: async (reason) => {
          await this.reader.cancel(reason);
          if ("cancel" in wrapper2) {
            await wrapper2.cancel?.(reason);
          }
        },
        pull: async (controller) => {
          const result = await this.reader.read();
          if (result.done) {
            controller.close();
            if ("close" in wrapper2) {
              await wrapper2.close?.();
            }
          } else {
            controller.enqueue(result.value);
          }
        }
      });
    }
  };
  var ChunkStream2 = class extends TransformStream {
    constructor(size) {
      super({
        transform(chunk, controller) {
          for (let start = 0; start < chunk.byteLength; ) {
            const end = start + size;
            controller.enqueue(chunk.subarray(start, end));
            start = end;
          }
        }
      });
    }
  };
  function pipeFrom2(writable, pair) {
    const writer = pair.writable.getWriter();
    const pipe = pair.readable.pipeTo(writable);
    return new WritableStream({
      async write(chunk) {
        await writer.ready;
        await writer.write(chunk);
      },
      async close() {
        await writer.close();
        await pipe;
      }
    });
  }
  var InspectStream = class extends TransformStream {
    constructor(callback) {
      super({
        transform(chunk, controller) {
          callback(chunk);
          controller.enqueue(chunk);
        }
      });
    }
  };
  var PushReadableStream2 = class extends ReadableStream {
    constructor(source, strategy) {
      let waterMarkLow;
      const canceled = new AbortController3();
      super({
        start: (controller) => {
          source({
            abortSignal: canceled.signal,
            async enqueue(chunk) {
              if (canceled.signal.aborted) {
                throw canceled.signal.reason ?? new Error("Aborted");
              }
              if ((controller.desiredSize ?? 1) <= 0) {
                waterMarkLow = new PromiseResolver();
                await waterMarkLow.promise;
              }
              controller.enqueue(chunk);
            },
            close() {
              controller.close();
            },
            error(e2) {
              controller.error(e2);
            }
          });
        },
        pull: () => {
          waterMarkLow?.resolve();
        },
        cancel: async (reason) => {
          canceled.abort(reason);
          waterMarkLow?.reject(reason);
        }
      }, strategy);
    }
  };

  // node_modules/@yume-chan/adb/esm/stream/buffered.js
  var BufferedStreamEndedError = class extends Error {
    constructor() {
      super("Stream ended");
      Object.setPrototypeOf(this, new.target.prototype);
    }
  };
  var BufferedStream = class {
    buffered;
    bufferedOffset = 0;
    bufferedLength = 0;
    stream;
    reader;
    constructor(stream) {
      this.stream = stream;
      this.reader = stream.getReader();
    }
    async readSource() {
      const { done, value } = await this.reader.read();
      if (done) {
        throw new BufferedStreamEndedError();
      }
      return value;
    }
    async readAsync(length, initial) {
      let result;
      let index;
      if (initial) {
        result = new Uint8Array(length);
        result.set(initial);
        index = initial.byteLength;
        length -= initial.byteLength;
      } else {
        const array2 = await this.readSource();
        if (array2.byteLength === length) {
          return array2;
        }
        if (array2.byteLength > length) {
          this.buffered = array2;
          this.bufferedOffset = length;
          this.bufferedLength = array2.byteLength - length;
          return array2.subarray(0, length);
        }
        result = new Uint8Array(length);
        result.set(array2);
        index = array2.byteLength;
        length -= array2.byteLength;
      }
      while (length > 0) {
        const array2 = await this.readSource();
        if (array2.byteLength === length) {
          result.set(array2, index);
          return result;
        }
        if (array2.byteLength > length) {
          this.buffered = array2;
          this.bufferedOffset = length;
          this.bufferedLength = array2.byteLength - length;
          result.set(array2.subarray(0, length), index);
          return result;
        }
        result.set(array2, index);
        index += array2.byteLength;
        length -= array2.byteLength;
      }
      return result;
    }
    read(length) {
      if (this.buffered) {
        const array2 = this.buffered;
        const offset = this.bufferedOffset;
        if (this.bufferedLength > length) {
          this.bufferedOffset += length;
          this.bufferedLength -= length;
          return array2.subarray(offset, offset + length);
        }
        this.buffered = void 0;
        return this.readAsync(length, array2.subarray(offset));
      }
      return this.readAsync(length);
    }
    release() {
      if (this.buffered) {
        return new PushReadableStream2(async (controller) => {
          await controller.enqueue(this.buffered);
          while (true) {
            try {
              const { done, value } = await this.reader.read();
              if (done) {
                controller.close();
                break;
              } else {
                await controller.enqueue(value);
              }
            } catch (e2) {
              controller.error(e2);
              break;
            }
          }
        });
      } else {
        this.reader.releaseLock();
        return this.stream;
      }
    }
    async close() {
      await this.reader.cancel();
    }
  };
  var AdbBufferedStream = class extends BufferedStream {
    socket;
    get localId() {
      return this.socket.localId;
    }
    get remoteId() {
      return this.socket.remoteId;
    }
    get localCreated() {
      return this.socket.localCreated;
    }
    get serviceString() {
      return this.socket.serviceString;
    }
    get writable() {
      return this.socket.writable;
    }
    constructor(socket) {
      super(socket.readable);
      this.socket = socket;
    }
  };

  // node_modules/@yume-chan/adb/esm/packet.js
  var AdbCommand2;
  (function(AdbCommand3) {
    AdbCommand3[AdbCommand3["Auth"] = 1213486401] = "Auth";
    AdbCommand3[AdbCommand3["Close"] = 1163086915] = "Close";
    AdbCommand3[AdbCommand3["Connect"] = 1314410051] = "Connect";
    AdbCommand3[AdbCommand3["OK"] = 1497451343] = "OK";
    AdbCommand3[AdbCommand3["Open"] = 1313165391] = "Open";
    AdbCommand3[AdbCommand3["Write"] = 1163154007] = "Write";
  })(AdbCommand2 = AdbCommand2 || (AdbCommand2 = {}));
  var AdbPacketHeader2 = new Struct3({ littleEndian: true }).uint32("command").uint32("arg0").uint32("arg1").uint32("payloadLength").uint32("checksum").int32("magic");
  var AdbPacket2 = new Struct3({ littleEndian: true }).fields(AdbPacketHeader2).uint8Array("payload", { lengthField: "payloadLength" });
  function calculateChecksum2(payload) {
    if (payload instanceof Uint8Array) {
      return payload.reduce((result, item) => result + item, 0);
    } else {
      payload.checksum = calculateChecksum2(payload.payload);
      return payload;
    }
  }
  var AdbPacketSerializeStream = class extends TransformStream {
    constructor() {
      super({
        transform: async (init, controller) => {
          init.magic = init.command ^ 4294967295;
          init.payloadLength = init.payload.byteLength;
          controller.enqueue(AdbPacketHeader2.serialize(init));
          if (init.payload.byteLength) {
            controller.enqueue(init.payload);
          }
        }
      });
    }
  };

  // node_modules/@yume-chan/adb/esm/auth.js
  var AdbAuthType2;
  (function(AdbAuthType3) {
    AdbAuthType3[AdbAuthType3["Token"] = 1] = "Token";
    AdbAuthType3[AdbAuthType3["Signature"] = 2] = "Signature";
    AdbAuthType3[AdbAuthType3["PublicKey"] = 3] = "PublicKey";
  })(AdbAuthType2 = AdbAuthType2 || (AdbAuthType2 = {}));
  var AdbSignatureAuthenticator = async function* (credentialStore, getNextRequest) {
    for await (const key of credentialStore.iterateKeys()) {
      const packet = await getNextRequest();
      if (packet.arg0 !== AdbAuthType2.Token) {
        return;
      }
      const signature = sign2(key, packet.payload);
      yield {
        command: AdbCommand2.Auth,
        arg0: AdbAuthType2.Signature,
        arg1: 0,
        payload: new Uint8Array(signature)
      };
    }
  };
  var AdbPublicKeyAuthenticator = async function* (credentialStore, getNextRequest) {
    const packet = await getNextRequest();
    if (packet.arg0 !== AdbAuthType2.Token) {
      return;
    }
    let privateKey;
    for await (const key of credentialStore.iterateKeys()) {
      privateKey = key;
      break;
    }
    if (!privateKey) {
      privateKey = await credentialStore.generateKey();
    }
    const publicKeyLength = calculatePublicKeyLength2();
    const [publicKeyBase64Length] = calculateBase64EncodedLength2(publicKeyLength);
    const publicKeyBuffer = new Uint8Array(publicKeyBase64Length + 1);
    calculatePublicKey2(privateKey, publicKeyBuffer);
    encodeBase642(publicKeyBuffer.subarray(0, publicKeyLength), publicKeyBuffer);
    yield {
      command: AdbCommand2.Auth,
      arg0: AdbAuthType2.PublicKey,
      arg1: 0,
      payload: publicKeyBuffer
    };
  };
  var ADB_DEFAULT_AUTHENTICATORS2 = [
    AdbSignatureAuthenticator,
    AdbPublicKeyAuthenticator
  ];
  var AdbAuthenticationProcessor2 = class {
    authenticators;
    credentialStore;
    pendingRequest = new PromiseResolver();
    iterator;
    constructor(authenticators, credentialStore) {
      this.authenticators = authenticators;
      this.credentialStore = credentialStore;
    }
    getNextRequest = () => {
      return this.pendingRequest.promise;
    };
    async *invokeAuthenticator() {
      for (const authenticator of this.authenticators) {
        for await (const packet of authenticator(this.credentialStore, this.getNextRequest)) {
          this.pendingRequest = new PromiseResolver();
          yield packet;
        }
      }
    }
    async process(packet) {
      if (!this.iterator) {
        this.iterator = this.invokeAuthenticator();
      }
      this.pendingRequest.resolve(packet);
      const result = await this.iterator.next();
      if (result.done) {
        throw new Error("No authenticator can handle the request");
      }
      return result.value;
    }
    dispose() {
      this.iterator?.return?.();
    }
  };

  // node_modules/@yume-chan/event/esm/disposable.js
  var AutoDisposable2 = class {
    disposables = [];
    constructor() {
      this.dispose = this.dispose.bind(this);
    }
    addDisposable(disposable) {
      this.disposables.push(disposable);
      return disposable;
    }
    dispose() {
      for (const disposable of this.disposables) {
        disposable.dispose();
      }
      this.disposables = [];
    }
  };

  // node_modules/@yume-chan/adb/esm/commands/base.js
  var AdbCommandBase2 = class extends AutoDisposable2 {
    adb;
    constructor(adb) {
      super();
      this.adb = adb;
    }
  };

  // node_modules/@yume-chan/adb/esm/commands/framebuffer.js
  var Version2 = new Struct3({ littleEndian: true }).uint32("version");
  var AdbFrameBufferV12 = new Struct3({ littleEndian: true }).uint32("bpp").uint32("size").uint32("width").uint32("height").uint32("red_offset").uint32("red_length").uint32("blue_offset").uint32("blue_length").uint32("green_offset").uint32("green_length").uint32("alpha_offset").uint32("alpha_length").uint8Array("data", { lengthField: "size" });
  var AdbFrameBufferV22 = new Struct3({ littleEndian: true }).uint32("bpp").uint32("colorSpace").uint32("size").uint32("width").uint32("height").uint32("red_offset").uint32("red_length").uint32("blue_offset").uint32("blue_length").uint32("green_offset").uint32("green_length").uint32("alpha_offset").uint32("alpha_length").uint8Array("data", { lengthField: "size" });
  async function framebuffer2(adb) {
    const socket = await adb.createSocket("framebuffer:");
    const stream = new AdbBufferedStream(socket);
    const { version } = await Version2.deserialize(stream);
    switch (version) {
      case 1:
        return AdbFrameBufferV12.deserialize(stream);
      case 2:
        return AdbFrameBufferV22.deserialize(stream);
      default:
        throw new Error("Unknown FrameBuffer version");
    }
  }

  // node_modules/@yume-chan/adb/esm/commands/subprocess/protocols/none.js
  var AdbSubprocessNoneProtocol2 = class {
    static isSupported() {
      return true;
    }
    static async pty(adb, command) {
      return new AdbSubprocessNoneProtocol2(await adb.createSocket(`shell:${command}`));
    }
    static async raw(adb, command) {
      return new AdbSubprocessNoneProtocol2(await adb.createSocket(`exec:${command}`));
    }
    socket;
    duplex;
    get stdin() {
      return this.socket.writable;
    }
    _stdout;
    get stdout() {
      return this._stdout;
    }
    _stderr;
    get stderr() {
      return this._stderr;
    }
    _exit;
    get exit() {
      return this._exit;
    }
    constructor(socket) {
      this.socket = socket;
      this.duplex = new DuplexStreamFactory2({
        close: async () => {
          await this.socket.close();
        }
      });
      this._stdout = this.duplex.wrapReadable(this.socket.readable);
      this._stderr = this.duplex.wrapReadable(new ReadableStream());
      this._exit = this.duplex.closed.then(() => 0);
    }
    resize() {
    }
    kill() {
      return this.duplex.close();
    }
  };

  // node_modules/@yume-chan/adb/esm/features.js
  var AdbFeatures2;
  (function(AdbFeatures3) {
    AdbFeatures3["ShellV2"] = "shell_v2";
    AdbFeatures3["Cmd"] = "cmd";
    AdbFeatures3["StatV2"] = "stat_v2";
    AdbFeatures3["ListV2"] = "ls_v2";
    AdbFeatures3["FixedPushMkdir"] = "fixed_push_mkdir";
  })(AdbFeatures2 = AdbFeatures2 || (AdbFeatures2 = {}));

  // node_modules/@yume-chan/adb/esm/commands/subprocess/protocols/shell.js
  var AdbShellProtocolId2;
  (function(AdbShellProtocolId3) {
    AdbShellProtocolId3[AdbShellProtocolId3["Stdin"] = 0] = "Stdin";
    AdbShellProtocolId3[AdbShellProtocolId3["Stdout"] = 1] = "Stdout";
    AdbShellProtocolId3[AdbShellProtocolId3["Stderr"] = 2] = "Stderr";
    AdbShellProtocolId3[AdbShellProtocolId3["Exit"] = 3] = "Exit";
    AdbShellProtocolId3[AdbShellProtocolId3["CloseStdin"] = 4] = "CloseStdin";
    AdbShellProtocolId3[AdbShellProtocolId3["WindowSizeChange"] = 5] = "WindowSizeChange";
  })(AdbShellProtocolId2 = AdbShellProtocolId2 || (AdbShellProtocolId2 = {}));
  var AdbShellProtocolPacket2 = new Struct3({ littleEndian: true }).uint8("id", placeholder2()).uint32("length").uint8Array("data", { lengthField: "length" });
  var StdinSerializeStream = class extends TransformStream {
    constructor() {
      super({
        transform(chunk, controller) {
          controller.enqueue({
            id: AdbShellProtocolId2.Stdin,
            data: chunk
          });
        },
        flush() {
        }
      });
    }
  };
  var StdoutDeserializeStream = class extends TransformStream {
    constructor(type) {
      super({
        transform(chunk, controller) {
          if (chunk.id === type) {
            controller.enqueue(chunk.data);
          }
        }
      });
    }
  };
  var MultiplexStream = class {
    _readable;
    _readableController;
    get readable() {
      return this._readable;
    }
    _activeCount = 0;
    constructor() {
      this._readable = new PushReadableStream2((controller) => {
        this._readableController = controller;
      });
    }
    createWriteable() {
      return new WritableStream({
        start: () => {
          this._activeCount += 1;
        },
        write: async (chunk) => {
          await this._readableController.enqueue(chunk);
        },
        abort: async (e2) => {
          this._activeCount -= 1;
          if (this._activeCount === 0) {
            this._readableController.close();
          }
        },
        close: async () => {
          this._activeCount -= 1;
          if (this._activeCount === 0) {
            this._readableController.close();
          }
        }
      });
    }
  };
  var AdbSubprocessShellProtocol2 = class {
    static isSupported(adb) {
      return adb.features.includes(AdbFeatures2.ShellV2);
    }
    static async pty(adb, command) {
      return new AdbSubprocessShellProtocol2(await adb.createSocket(`shell,v2,pty:${command}`));
    }
    static async raw(adb, command) {
      return new AdbSubprocessShellProtocol2(await adb.createSocket(`shell,v2,raw:${command}`));
    }
    _socket;
    _socketWriter;
    _stdin;
    get stdin() {
      return this._stdin;
    }
    _stdout;
    get stdout() {
      return this._stdout;
    }
    _stderr;
    get stderr() {
      return this._stderr;
    }
    _exit = new PromiseResolver();
    get exit() {
      return this._exit.promise;
    }
    constructor(socket) {
      this._socket = socket;
      const [stdout, stderr] = socket.readable.pipeThrough(new StructDeserializeStream2(AdbShellProtocolPacket2)).pipeThrough(new TransformStream({
        transform: (chunk, controller) => {
          if (chunk.id === AdbShellProtocolId2.Exit) {
            this._exit.resolve(new Uint8Array(chunk.data)[0]);
            controller.terminate();
            return;
          }
          controller.enqueue(chunk);
        }
      })).tee();
      this._stdout = stdout.pipeThrough(new StdoutDeserializeStream(AdbShellProtocolId2.Stdout));
      this._stderr = stderr.pipeThrough(new StdoutDeserializeStream(AdbShellProtocolId2.Stderr));
      const multiplexer = new MultiplexStream();
      multiplexer.readable.pipeThrough(new StructSerializeStream2(AdbShellProtocolPacket2)).pipeTo(socket.writable);
      this._stdin = pipeFrom2(multiplexer.createWriteable(), new StdinSerializeStream());
      this._socketWriter = multiplexer.createWriteable().getWriter();
    }
    async resize(rows, cols) {
      await this._socketWriter.write({
        id: AdbShellProtocolId2.WindowSizeChange,
        data: encodeUtf83(
          `${rows}x${cols},0x0\0`
        )
      });
    }
    kill() {
      return this._socket.close();
    }
  };

  // node_modules/@yume-chan/adb/esm/commands/subprocess/utils.js
  function escapeArg2(s2) {
    let result = "";
    result += `'`;
    let base = 0;
    while (true) {
      const found = s2.indexOf(`'`, base);
      if (found === -1) {
        result += s2.substring(base);
        break;
      }
      result += s2.substring(base, found);
      result += String.raw`'\''`;
      base = found + 1;
    }
    result += `'`;
    return result;
  }

  // node_modules/@yume-chan/adb/esm/commands/subprocess/index.js
  var DEFAULT_OPTIONS = {
    protocols: [AdbSubprocessShellProtocol2, AdbSubprocessNoneProtocol2]
  };
  var AdbSubprocess2 = class {
    adb;
    constructor(adb) {
      this.adb = adb;
    }
    async createProtocol(mode, command, options) {
      const { protocols } = { ...DEFAULT_OPTIONS, ...options };
      let Constructor;
      for (const item of protocols) {
        if (await item.isSupported(this.adb)) {
          Constructor = item;
          break;
        }
      }
      if (!Constructor) {
        throw new Error("No specified protocol is supported by the device");
      }
      if (Array.isArray(command)) {
        command = command.join(" ");
      } else if (command === void 0) {
        command = "";
      }
      return await Constructor[mode](this.adb, command);
    }
    shell(command, options) {
      return this.createProtocol("pty", command, options);
    }
    spawn(command, options) {
      return this.createProtocol("raw", command, options);
    }
    async spawnAndWait(command, options) {
      const shell = await this.spawn(command, options);
      const stdout = new GatherStringStream2();
      const stderr = new GatherStringStream2();
      const [, , exitCode] = await Promise.all([
        shell.stdout.pipeThrough(new DecodeUtf8Stream2()).pipeTo(stdout),
        shell.stderr.pipeThrough(new DecodeUtf8Stream2()).pipeTo(stderr),
        shell.exit
      ]);
      return {
        stdout: stdout.result,
        stderr: stderr.result,
        exitCode
      };
    }
    async spawnAndWaitLegacy(command) {
      const { stdout } = await this.spawnAndWait(command, { protocols: [AdbSubprocessNoneProtocol2] });
      return stdout;
    }
  };

  // node_modules/@yume-chan/adb/esm/commands/install.js
  function install2(adb) {
    const filename = `/data/local/tmp/${Math.random().toString().substring(2)}.apk`;
    let sync;
    return new WrapWritableStream2({
      async start() {
        sync = await adb.sync();
        return sync.write(filename, void 0, void 0);
      },
      async close() {
        sync.dispose();
        await adb.subprocess.spawnAndWaitLegacy(["pm", "install", escapeArg2(filename)]);
        await adb.rm(filename);
      }
    });
  }

  // node_modules/@yume-chan/adb/esm/commands/power.js
  var AdbPower2 = class extends AdbCommandBase2 {
    reboot(name = "") {
      return this.adb.createSocketAndWait(`reboot:${name}`);
    }
    bootloader() {
      return this.reboot("bootloader");
    }
    fastboot() {
      return this.reboot("fastboot");
    }
    recovery() {
      return this.reboot("recovery");
    }
    sideload() {
      return this.reboot("sideload");
    }
    qualcommEdlMode() {
      return this.reboot("edl");
    }
    powerOff() {
      return this.adb.subprocess.spawnAndWaitLegacy(["reboot", "-p"]);
    }
    powerButton(longPress = false) {
      return this.adb.subprocess.spawnAndWaitLegacy(["input", "keyevent", longPress ? "--longpress POWER" : "POWER"]);
    }
    samsungOdin() {
      return this.reboot("download");
    }
  };

  // node_modules/@yume-chan/adb/esm/commands/reverse.js
  var AdbReverseStringResponse2 = new Struct3().string("length", { length: 4 }).string("content", { lengthField: "length", lengthFieldRadix: 16 });
  var AdbReverseErrorResponse2 = new Struct3().fields(AdbReverseStringResponse2).postDeserialize((value) => {
    throw new Error(value.content);
  });
  var AdbReverseCommand2 = class extends AutoDisposable2 {
    localAddressToHandler = /* @__PURE__ */ new Map();
    deviceAddressToLocalAddress = /* @__PURE__ */ new Map();
    adb;
    listening = false;
    constructor(adb) {
      super();
      this.adb = adb;
      this.addDisposable(this.adb.addIncomingSocketHandler(this.handleIncomingSocket));
    }
    handleIncomingSocket = async (socket) => {
      let address = socket.serviceString;
      address = address.replace(/\0/g, "");
      return !!await this.localAddressToHandler.get(address)?.(socket);
    };
    async createBufferedStream(service) {
      const socket = await this.adb.createSocket(service);
      return new AdbBufferedStream(socket);
    }
    async sendRequest(service) {
      const stream = await this.createBufferedStream(service);
      const success = decodeUtf83(await stream.read(4)) === "OKAY";
      if (!success) {
        await AdbReverseErrorResponse2.deserialize(stream);
      }
      return stream;
    }
    async list() {
      const stream = await this.createBufferedStream("reverse:list-forward");
      const response = await AdbReverseStringResponse2.deserialize(stream);
      return response.content.split("\n").map((line) => {
        const [deviceSerial, localName, remoteName] = line.split(" ");
        return { deviceSerial, localName, remoteName };
      });
    }
    async add(deviceAddress, localAddress, handler) {
      const stream = await this.sendRequest(`reverse:forward:${deviceAddress};${localAddress}`);
      if (deviceAddress.startsWith("tcp:")) {
        let length;
        try {
          length = Number.parseInt(decodeUtf83(await stream.read(4)), 16);
        } catch (e2) {
          if (!(e2 instanceof BufferedStreamEndedError)) {
            throw e2;
          }
        }
        if (length !== void 0) {
          const port = decodeUtf83(await stream.read(length));
          deviceAddress = `tcp:${Number.parseInt(port, 10)}`;
        }
      }
      this.localAddressToHandler.set(localAddress, handler);
      this.deviceAddressToLocalAddress.set(deviceAddress, localAddress);
      return deviceAddress;
    }
    async remove(deviceAddress) {
      await this.sendRequest(`reverse:killforward:${deviceAddress}`);
      if (this.deviceAddressToLocalAddress.has(deviceAddress)) {
        this.localAddressToHandler.delete(this.deviceAddressToLocalAddress.get(deviceAddress));
        this.deviceAddressToLocalAddress.delete(deviceAddress);
      }
    }
    async removeAll() {
      await this.sendRequest(`reverse:killforward-all`);
      this.deviceAddressToLocalAddress.clear();
      this.localAddressToHandler.clear();
    }
  };

  // node_modules/@yume-chan/adb/esm/commands/sync/request.js
  var AdbSyncRequestId2;
  (function(AdbSyncRequestId3) {
    AdbSyncRequestId3["List"] = "LIST";
    AdbSyncRequestId3["List2"] = "LIS2";
    AdbSyncRequestId3["Send"] = "SEND";
    AdbSyncRequestId3["Lstat"] = "STAT";
    AdbSyncRequestId3["Stat"] = "STA2";
    AdbSyncRequestId3["Lstat2"] = "LST2";
    AdbSyncRequestId3["Data"] = "DATA";
    AdbSyncRequestId3["Done"] = "DONE";
    AdbSyncRequestId3["Receive"] = "RECV";
  })(AdbSyncRequestId2 = AdbSyncRequestId2 || (AdbSyncRequestId2 = {}));
  var AdbSyncNumberRequest2 = new Struct3({ littleEndian: true }).string("id", { length: 4 }).uint32("arg");
  var AdbSyncDataRequest2 = new Struct3({ littleEndian: true }).fields(AdbSyncNumberRequest2).uint8Array("data", { lengthField: "arg" });
  async function adbSyncWriteRequest2(writer, id, value) {
    let buffer;
    if (typeof value === "number") {
      buffer = AdbSyncNumberRequest2.serialize({
        id,
        arg: value
      });
    } else if (typeof value === "string") {
      buffer = AdbSyncDataRequest2.serialize({
        id,
        data: encodeUtf83(value)
      });
    } else {
      buffer = AdbSyncDataRequest2.serialize({
        id,
        data: value
      });
    }
    await writer.write(buffer);
  }

  // node_modules/@yume-chan/adb/esm/commands/sync/response.js
  var AdbSyncResponseId2;
  (function(AdbSyncResponseId3) {
    AdbSyncResponseId3["Entry"] = "DENT";
    AdbSyncResponseId3["Entry2"] = "DNT2";
    AdbSyncResponseId3["Lstat"] = "STAT";
    AdbSyncResponseId3["Stat"] = "STA2";
    AdbSyncResponseId3["Lstat2"] = "LST2";
    AdbSyncResponseId3["Done"] = "DONE";
    AdbSyncResponseId3["Data"] = "DATA";
    AdbSyncResponseId3["Ok"] = "OKAY";
    AdbSyncResponseId3["Fail"] = "FAIL";
  })(AdbSyncResponseId2 = AdbSyncResponseId2 || (AdbSyncResponseId2 = {}));
  var AdbSyncDoneResponse = class {
    length;
    id = AdbSyncResponseId2.Done;
    constructor(length) {
      this.length = length;
    }
    async deserialize(stream) {
      await stream.read(this.length);
      return this;
    }
  };
  var AdbSyncFailResponse2 = new Struct3({ littleEndian: true }).uint32("messageLength").string("message", { lengthField: "messageLength" }).postDeserialize((object2) => {
    throw new Error(object2.message);
  });
  async function adbSyncReadResponse2(stream, types) {
    const id = decodeUtf83(await stream.read(4));
    if (id === AdbSyncResponseId2.Fail) {
      await AdbSyncFailResponse2.deserialize(stream);
    }
    if (types[id]) {
      return types[id].deserialize(stream);
    }
    throw new Error(`Expected '${Object.keys(types).join(", ")}', but got '${id}'`);
  }

  // node_modules/@yume-chan/adb/esm/commands/sync/stat.js
  var LinuxFileType2;
  (function(LinuxFileType3) {
    LinuxFileType3[LinuxFileType3["Directory"] = 4] = "Directory";
    LinuxFileType3[LinuxFileType3["File"] = 8] = "File";
    LinuxFileType3[LinuxFileType3["Link"] = 10] = "Link";
  })(LinuxFileType2 = LinuxFileType2 || (LinuxFileType2 = {}));
  var AdbSyncLstatResponse2 = new Struct3({ littleEndian: true }).int32("mode").int32("size").int32("mtime").extra({
    id: AdbSyncResponseId2.Lstat,
    get type() {
      return this.mode >> 12;
    },
    get permission() {
      return this.mode & 4095;
    }
  }).postDeserialize((object2) => {
    if (object2.mode === 0 && object2.size === 0 && object2.mtime === 0) {
      throw new Error("lstat failed");
    }
  });
  var AdbSyncStatErrorCode2;
  (function(AdbSyncStatErrorCode3) {
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["SUCCESS"] = 0] = "SUCCESS";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EACCES"] = 13] = "EACCES";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EEXIST"] = 17] = "EEXIST";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EFAULT"] = 14] = "EFAULT";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EFBIG"] = 27] = "EFBIG";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EINTR"] = 4] = "EINTR";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EINVAL"] = 22] = "EINVAL";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EIO"] = 5] = "EIO";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EISDIR"] = 21] = "EISDIR";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ELOOP"] = 40] = "ELOOP";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EMFILE"] = 24] = "EMFILE";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ENAMETOOLONG"] = 36] = "ENAMETOOLONG";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ENFILE"] = 23] = "ENFILE";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ENOENT"] = 2] = "ENOENT";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ENOMEM"] = 12] = "ENOMEM";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ENOSPC"] = 28] = "ENOSPC";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ENOTDIR"] = 20] = "ENOTDIR";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EOVERFLOW"] = 75] = "EOVERFLOW";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EPERM"] = 1] = "EPERM";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["EROFS"] = 30] = "EROFS";
    AdbSyncStatErrorCode3[AdbSyncStatErrorCode3["ETXTBSY"] = 26] = "ETXTBSY";
  })(AdbSyncStatErrorCode2 = AdbSyncStatErrorCode2 || (AdbSyncStatErrorCode2 = {}));
  var AdbSyncStatResponse2 = new Struct3({ littleEndian: true }).uint32("error", placeholder2()).uint64("dev").uint64("ino").uint32("mode").uint32("nlink").uint32("uid").uint32("gid").uint64("size").uint64("atime").uint64("mtime").uint64("ctime").extra({
    id: AdbSyncResponseId2.Stat,
    get type() {
      return this.mode >> 12;
    },
    get permission() {
      return this.mode & 4095;
    }
  }).postDeserialize((object2) => {
    if (object2.error) {
      throw new Error(AdbSyncStatErrorCode2[object2.error]);
    }
  });
  var STAT_RESPONSE_TYPES = {
    [AdbSyncResponseId2.Stat]: AdbSyncStatResponse2
  };
  var LSTAT_RESPONSE_TYPES = {
    [AdbSyncResponseId2.Lstat]: AdbSyncLstatResponse2
  };
  var LSTAT_V2_RESPONSE_TYPES = {
    [AdbSyncResponseId2.Lstat2]: AdbSyncStatResponse2
  };
  async function adbSyncLstat2(stream, writer, path, v2) {
    let requestId;
    let responseType;
    if (v2) {
      requestId = AdbSyncRequestId2.Lstat2;
      responseType = LSTAT_V2_RESPONSE_TYPES;
    } else {
      requestId = AdbSyncRequestId2.Lstat;
      responseType = LSTAT_RESPONSE_TYPES;
    }
    await adbSyncWriteRequest2(writer, requestId, path);
    const response = await adbSyncReadResponse2(stream, responseType);
    switch (response.id) {
      case AdbSyncResponseId2.Lstat:
        return {
          mode: response.mode,
          size: BigInt(response.size),
          mtime: BigInt(response.mtime),
          get type() {
            return response.type;
          },
          get permission() {
            return response.permission;
          }
        };
      default:
        return response;
    }
  }
  async function adbSyncStat2(stream, writer, path) {
    await adbSyncWriteRequest2(writer, AdbSyncRequestId2.Stat, path);
    return await adbSyncReadResponse2(stream, STAT_RESPONSE_TYPES);
  }

  // node_modules/@yume-chan/adb/esm/commands/sync/list.js
  var AdbSyncEntryResponse2 = new Struct3({ littleEndian: true }).fields(AdbSyncLstatResponse2).uint32("nameLength").string("name", { lengthField: "nameLength" }).extra({ id: AdbSyncResponseId2.Entry });
  var AdbSyncEntry2Response2 = new Struct3({ littleEndian: true }).fields(AdbSyncStatResponse2).uint32("nameLength").string("name", { lengthField: "nameLength" }).extra({ id: AdbSyncResponseId2.Entry2 });
  var LIST_V1_RESPONSE_TYPES = {
    [AdbSyncResponseId2.Entry]: AdbSyncEntryResponse2,
    [AdbSyncResponseId2.Done]: new AdbSyncDoneResponse(AdbSyncEntryResponse2.size)
  };
  var LIST_V2_RESPONSE_TYPES = {
    [AdbSyncResponseId2.Entry2]: AdbSyncEntry2Response2,
    [AdbSyncResponseId2.Done]: new AdbSyncDoneResponse(AdbSyncEntry2Response2.size)
  };
  async function* adbSyncOpenDir2(stream, writer, path, v2) {
    let requestId;
    let responseType;
    if (v2) {
      requestId = AdbSyncRequestId2.List2;
      responseType = LIST_V2_RESPONSE_TYPES;
    } else {
      requestId = AdbSyncRequestId2.List;
      responseType = LIST_V1_RESPONSE_TYPES;
    }
    await adbSyncWriteRequest2(writer, requestId, path);
    while (true) {
      const response = await adbSyncReadResponse2(stream, responseType);
      switch (response.id) {
        case AdbSyncResponseId2.Entry:
          yield {
            mode: response.mode,
            size: BigInt(response.size),
            mtime: BigInt(response.mtime),
            get type() {
              return response.type;
            },
            get permission() {
              return response.permission;
            },
            name: response.name
          };
          break;
        case AdbSyncResponseId2.Entry2:
          if (response.error !== 0) {
            continue;
          }
          yield response;
          break;
        case AdbSyncResponseId2.Done:
          return;
        default:
          throw new Error("Unexpected response id");
      }
    }
  }

  // node_modules/@yume-chan/adb/esm/commands/sync/pull.js
  var AdbSyncDataResponse2 = new Struct3({ littleEndian: true }).uint32("dataLength").uint8Array("data", { lengthField: "dataLength" }).extra({ id: AdbSyncResponseId2.Data });
  var RESPONSE_TYPES = {
    [AdbSyncResponseId2.Data]: AdbSyncDataResponse2,
    [AdbSyncResponseId2.Done]: new AdbSyncDoneResponse(AdbSyncDataResponse2.size)
  };
  function adbSyncPull2(stream, writer, path) {
    return new ReadableStream({
      async start() {
        await adbSyncWriteRequest2(writer, AdbSyncRequestId2.Receive, path);
      },
      async pull(controller) {
        const response = await adbSyncReadResponse2(stream, RESPONSE_TYPES);
        switch (response.id) {
          case AdbSyncResponseId2.Data:
            controller.enqueue(response.data);
            break;
          case AdbSyncResponseId2.Done:
            controller.close();
            break;
          default:
            throw new Error("Unexpected response id");
        }
      },
      cancel() {
        throw new Error(`Sync commands don't support cancel.`);
      }
    }, {
      highWaterMark: 16 * 1024,
      size(chunk) {
        return chunk.byteLength;
      }
    });
  }

  // node_modules/@yume-chan/adb/esm/commands/sync/push.js
  var AdbSyncOkResponse2 = new Struct3({ littleEndian: true }).uint32("unused");
  var ResponseTypes = {
    [AdbSyncResponseId2.Ok]: AdbSyncOkResponse2
  };
  var ADB_SYNC_MAX_PACKET_SIZE2 = 64 * 1024;
  function adbSyncPush2(stream, writer, filename, mode = LinuxFileType2.File << 12 | 438, mtime = Date.now() / 1e3 | 0, packetSize = ADB_SYNC_MAX_PACKET_SIZE2) {
    return pipeFrom2(new WritableStream({
      async start() {
        const pathAndMode = `${filename},${mode.toString()}`;
        await adbSyncWriteRequest2(writer, AdbSyncRequestId2.Send, pathAndMode);
      },
      async write(chunk) {
        await adbSyncWriteRequest2(writer, AdbSyncRequestId2.Data, chunk);
      },
      async close() {
        await adbSyncWriteRequest2(writer, AdbSyncRequestId2.Done, mtime);
        await adbSyncReadResponse2(stream, ResponseTypes);
      }
    }), new ChunkStream2(packetSize));
  }

  // node_modules/@yume-chan/adb/esm/commands/sync/sync.js
  function dirname(path) {
    const end = path.lastIndexOf("/");
    if (end === -1) {
      throw new Error(`Invalid path`);
    }
    if (end === 0) {
      return "/";
    }
    return path.substring(0, end);
  }
  var AdbSync2 = class extends AutoDisposable2 {
    adb;
    stream;
    writer;
    sendLock = this.addDisposable(new AutoResetEvent2());
    get supportsStat() {
      return this.adb.features.includes(AdbFeatures2.StatV2);
    }
    get supportsList2() {
      return this.adb.features.includes(AdbFeatures2.ListV2);
    }
    get fixedPushMkdir() {
      return this.adb.features.includes(AdbFeatures2.FixedPushMkdir);
    }
    get needPushMkdirWorkaround() {
      return this.adb.features.includes(AdbFeatures2.ShellV2) && !this.fixedPushMkdir;
    }
    constructor(adb, socket) {
      super();
      this.adb = adb;
      this.stream = new AdbBufferedStream(socket);
      this.writer = socket.writable.getWriter();
    }
    async lstat(path) {
      await this.sendLock.wait();
      try {
        return adbSyncLstat2(this.stream, this.writer, path, this.supportsStat);
      } finally {
        this.sendLock.notify();
      }
    }
    async stat(path) {
      if (!this.supportsStat) {
        throw new Error("Not supported");
      }
      await this.sendLock.wait();
      try {
        return adbSyncStat2(this.stream, this.writer, path);
      } finally {
        this.sendLock.notify();
      }
    }
    async isDirectory(path) {
      try {
        await this.lstat(path + "/");
        return true;
      } catch (e2) {
        return false;
      }
    }
    async *opendir(path) {
      await this.sendLock.wait();
      try {
        yield* adbSyncOpenDir2(this.stream, this.writer, path, this.supportsList2);
      } finally {
        this.sendLock.notify();
      }
    }
    async readdir(path) {
      const results = [];
      for await (const entry of this.opendir(path)) {
        results.push(entry);
      }
      return results;
    }
    read(filename) {
      return new WrapReadableStream2({
        start: async () => {
          await this.sendLock.wait();
          return adbSyncPull2(this.stream, this.writer, filename);
        },
        close: async () => {
          this.sendLock.notify();
        }
      });
    }
    write(filename, mode, mtime) {
      return new WrapWritableStream2({
        start: async () => {
          await this.sendLock.wait();
          if (this.needPushMkdirWorkaround) {
            await this.adb.subprocess.spawnAndWait([
              "mkdir",
              "-p",
              escapeArg2(dirname(filename))
            ]);
          }
          return adbSyncPush2(this.stream, this.writer, filename, mode, mtime);
        },
        close: async () => {
          this.sendLock.notify();
        }
      });
    }
    async dispose() {
      super.dispose();
      await this.stream.close();
      await this.writer.close();
    }
  };

  // node_modules/@yume-chan/adb/esm/commands/tcpip.js
  var AdbTcpIpCommand2 = class extends AdbCommandBase2 {
    async setPort(port) {
      if (port <= 0) {
        throw new Error(`Invalid port ${port}`);
      }
      const output = await this.adb.createSocketAndWait(`tcpip:${port}`);
      if (output !== `restarting in TCP mode port: ${port}
`) {
        throw new Error("Invalid response");
      }
    }
    async disable() {
      const output = await this.adb.createSocketAndWait("usb:");
      if (output !== "restarting in USB mode\n") {
        throw new Error("Invalid response");
      }
    }
  };

  // node_modules/@yume-chan/adb/esm/socket/socket.js
  var AdbSocketController2 = class {
    dispatcher;
    localId;
    remoteId;
    localCreated;
    serviceString;
    _duplex;
    _readable;
    _readableController;
    get readable() {
      return this._readable;
    }
    _writePromise;
    writable;
    _closed = false;
    get closed() {
      return this._closed;
    }
    _socket;
    get socket() {
      return this._socket;
    }
    constructor(options) {
      Object.assign(this, options);
      this._duplex = new DuplexStreamFactory2({
        close: async () => {
          this._closed = true;
          await this.dispatcher.sendPacket(AdbCommand2.Close, this.localId, this.remoteId);
          return false;
        },
        dispose: () => {
          this._writePromise?.reject(new Error("Socket closed"));
        }
      });
      this._readable = this._duplex.wrapReadable(new PushReadableStream2((controller) => {
        this._readableController = controller;
      }, {
        highWaterMark: options.highWaterMark ?? 16 * 1024,
        size(chunk) {
          return chunk.byteLength;
        }
      }));
      this.writable = pipeFrom2(this._duplex.createWritable(new WritableStream({
        write: async (chunk) => {
          this._writePromise = new PromiseResolver();
          await this.dispatcher.sendPacket(AdbCommand2.Write, this.localId, this.remoteId, chunk);
          await this._writePromise.promise;
        }
      })), new ChunkStream2(this.dispatcher.options.maxPayloadSize));
      this._socket = new AdbSocket(this);
    }
    async enqueue(packet) {
      if (this._readableController.abortSignal.aborted) {
        return;
      }
      await this._readableController.enqueue(packet);
    }
    ack() {
      this._writePromise?.resolve();
    }
    async close() {
      await this._duplex.close();
    }
    dispose() {
      this._duplex.dispose();
    }
  };
  var AdbSocket = class {
    _controller;
    get localId() {
      return this._controller.localId;
    }
    get remoteId() {
      return this._controller.remoteId;
    }
    get localCreated() {
      return this._controller.localCreated;
    }
    get serviceString() {
      return this._controller.serviceString;
    }
    get readable() {
      return this._controller.readable;
    }
    get writable() {
      return this._controller.writable;
    }
    constructor(controller) {
      this._controller = controller;
    }
    close() {
      return this._controller.close();
    }
  };

  // node_modules/@yume-chan/adb/esm/socket/dispatcher.js
  var AdbPacketDispatcher2 = class {
    initializers = new AsyncOperationManager(1);
    sockets = /* @__PURE__ */ new Map();
    _writer;
    options;
    _closed = false;
    _disconnected = new PromiseResolver();
    get disconnected() {
      return this._disconnected.promise;
    }
    _incomingSocketHandlers = /* @__PURE__ */ new Set();
    _abortController = new AbortController3();
    constructor(connection, options) {
      this.options = options;
      connection.readable.pipeTo(new WritableStream({
        write: async (packet) => {
          switch (packet.command) {
            case AdbCommand2.OK:
              this.handleOk(packet);
              break;
            case AdbCommand2.Close:
              await this.handleClose(packet);
              break;
            case AdbCommand2.Write:
              if (this.sockets.has(packet.arg1)) {
                await this.sockets.get(packet.arg1).enqueue(packet.payload);
                await this.sendPacket(AdbCommand2.OK, packet.arg1, packet.arg0);
                break;
              }
              throw new Error(`Unknown local socket id: ${packet.arg1}`);
            case AdbCommand2.Open:
              await this.handleOpen(packet);
              break;
            default:
              throw new Error(`Unknown command: ${packet.command.toString(16)}`);
          }
        }
      }), {
        preventCancel: true,
        signal: this._abortController.signal
      }).then(() => {
        this.dispose();
      }, (e2) => {
        if (!this._closed) {
          this._disconnected.reject(e2);
        }
        this.dispose();
      });
      this._writer = connection.writable.getWriter();
    }
    handleOk(packet) {
      if (this.initializers.resolve(packet.arg1, packet.arg0)) {
        return;
      }
      const socket = this.sockets.get(packet.arg1);
      if (socket) {
        socket.ack();
        return;
      }
      this.sendPacket(AdbCommand2.Close, packet.arg1, packet.arg0);
    }
    async handleClose(packet) {
      if (packet.arg0 === 0 && this.initializers.reject(packet.arg1, new Error("Socket open failed"))) {
        return;
      }
      const socket = this.sockets.get(packet.arg1);
      if (socket) {
        if (!socket.closed) {
          await this.sendPacket(AdbCommand2.Close, packet.arg1, packet.arg0);
        }
        socket.dispose();
        this.sockets.delete(packet.arg1);
        return;
      }
    }
    addIncomingSocketHandler(handler) {
      this._incomingSocketHandlers.add(handler);
      const remove2 = () => {
        this._incomingSocketHandlers.delete(handler);
      };
      remove2.dispose = remove2;
      return remove2;
    }
    async handleOpen(packet) {
      const [localId] = this.initializers.add();
      this.initializers.resolve(localId, void 0);
      const remoteId = packet.arg0;
      const serviceString = decodeUtf83(packet.payload);
      const controller = new AdbSocketController2({
        dispatcher: this,
        localId,
        remoteId,
        localCreated: false,
        serviceString
      });
      for (const handler of this._incomingSocketHandlers) {
        if (await handler(controller.socket)) {
          this.sockets.set(localId, controller);
          await this.sendPacket(AdbCommand2.OK, localId, remoteId);
          return;
        }
      }
      await this.sendPacket(AdbCommand2.Close, 0, remoteId);
    }
    async createSocket(serviceString) {
      if (this.options.appendNullToServiceString) {
        serviceString += "\0";
      }
      const [localId, initializer] = this.initializers.add();
      await this.sendPacket(AdbCommand2.Open, localId, 0, serviceString);
      const remoteId = await initializer;
      const controller = new AdbSocketController2({
        dispatcher: this,
        localId,
        remoteId,
        localCreated: true,
        serviceString
      });
      this.sockets.set(localId, controller);
      return controller.socket;
    }
    async sendPacket(packetOrCommand, arg0, arg1, payload = EMPTY_UINT8_ARRAY3) {
      let init;
      if (arg0 === void 0) {
        init = packetOrCommand;
      } else {
        if (typeof payload === "string") {
          payload = encodeUtf83(payload);
        }
        init = {
          command: packetOrCommand,
          arg0,
          arg1,
          payload
        };
      }
      if (init.payload && init.payload.byteLength > this.options.maxPayloadSize) {
        throw new Error("payload too large");
      }
      if (this.options.calculateChecksum) {
        calculateChecksum2(init);
      } else {
        init.checksum = 0;
      }
      await this._writer.ready;
      await this._writer.write(init);
    }
    async close() {
      await Promise.all(Array.from(this.sockets.values(), (socket) => socket.close()));
      this._closed = true;
      this._abortController.abort();
      this._writer.releaseLock();
    }
    dispose() {
      for (const socket of this.sockets.values()) {
        socket.dispose();
      }
      this._disconnected.resolve();
    }
  };

  // node_modules/@yume-chan/adb/esm/adb.js
  var AdbPropKey2;
  (function(AdbPropKey3) {
    AdbPropKey3["Product"] = "ro.product.name";
    AdbPropKey3["Model"] = "ro.product.model";
    AdbPropKey3["Device"] = "ro.product.device";
    AdbPropKey3["Features"] = "features";
  })(AdbPropKey2 = AdbPropKey2 || (AdbPropKey2 = {}));
  var VERSION_OMIT_CHECKSUM = 16777217;
  var Adb = class {
    static async authenticate(connection, credentialStore, authenticators = ADB_DEFAULT_AUTHENTICATORS2) {
      let version = 16777217;
      let maxPayloadSize = 1048576;
      const resolver = new PromiseResolver();
      const authProcessor = new AdbAuthenticationProcessor2(authenticators, credentialStore);
      const abortController = new AbortController3();
      const pipe = connection.readable.pipeTo(new WritableStream({
        async write(packet) {
          switch (packet.command) {
            case AdbCommand2.Connect:
              version = Math.min(version, packet.arg0);
              maxPayloadSize = Math.min(maxPayloadSize, packet.arg1);
              resolver.resolve(decodeUtf83(packet.payload));
              break;
            case AdbCommand2.Auth:
              const response = await authProcessor.process(packet);
              await sendPacket(response);
              break;
            default:
              break;
          }
        }
      }), {
        preventCancel: true,
        signal: abortController.signal
      }).catch((e2) => {
        resolver.reject(e2);
      });
      const writer = connection.writable.getWriter();
      async function sendPacket(init) {
        await writer.write(calculateChecksum2(init));
      }
      let banner;
      try {
        const features = [
          AdbFeatures2.ShellV2,
          AdbFeatures2.Cmd,
          AdbFeatures2.StatV2,
          AdbFeatures2.ListV2,
          AdbFeatures2.FixedPushMkdir,
          "apex",
          "abb",
          "fixed_push_symlink_timestamp",
          "abb_exec",
          "remount_shell",
          "track_app",
          "sendrecv_v2",
          "sendrecv_v2_brotli",
          "sendrecv_v2_lz4",
          "sendrecv_v2_zstd",
          "sendrecv_v2_dry_run_send"
        ].join(",");
        await sendPacket({
          command: AdbCommand2.Connect,
          arg0: version,
          arg1: maxPayloadSize,
          payload: encodeUtf83(`host::features=${features};`)
        });
        banner = await resolver.promise;
      } finally {
        abortController.abort();
        writer.releaseLock();
        await pipe;
      }
      return new Adb(connection, version, maxPayloadSize, banner);
    }
    dispatcher;
    get disconnected() {
      return this.dispatcher.disconnected;
    }
    _protocolVersion;
    get protocolVersion() {
      return this._protocolVersion;
    }
    _product;
    get product() {
      return this._product;
    }
    _model;
    get model() {
      return this._model;
    }
    _device;
    get device() {
      return this._device;
    }
    _features;
    get features() {
      return this._features;
    }
    subprocess;
    power;
    reverse;
    tcpip;
    constructor(connection, version, maxPayloadSize, banner) {
      this.parseBanner(banner);
      let calculateChecksum3;
      let appendNullToServiceString;
      if (version >= VERSION_OMIT_CHECKSUM) {
        calculateChecksum3 = false;
        appendNullToServiceString = false;
      } else {
        calculateChecksum3 = true;
        appendNullToServiceString = true;
      }
      this.dispatcher = new AdbPacketDispatcher2(connection, {
        calculateChecksum: calculateChecksum3,
        appendNullToServiceString,
        maxPayloadSize
      });
      this._protocolVersion = version;
      this.subprocess = new AdbSubprocess2(this);
      this.power = new AdbPower2(this);
      this.reverse = new AdbReverseCommand2(this);
      this.tcpip = new AdbTcpIpCommand2(this);
    }
    parseBanner(banner) {
      this._features = [];
      const pieces = banner.split("::");
      if (pieces.length > 1) {
        const props = pieces[1];
        for (const prop of props.split(";")) {
          if (!prop) {
            continue;
          }
          const keyValue = prop.split("=");
          if (keyValue.length !== 2) {
            continue;
          }
          const [key, value] = keyValue;
          switch (key) {
            case AdbPropKey2.Product:
              this._product = value;
              break;
            case AdbPropKey2.Model:
              this._model = value;
              break;
            case AdbPropKey2.Device:
              this._device = value;
              break;
            case AdbPropKey2.Features:
              this._features = value.split(",");
              break;
          }
        }
      }
    }
    addIncomingSocketHandler(handler) {
      return this.dispatcher.addIncomingSocketHandler(handler);
    }
    async createSocket(service) {
      return this.dispatcher.createSocket(service);
    }
    async createSocketAndWait(service) {
      const socket = await this.createSocket(service);
      const gatherStream = new GatherStringStream2();
      await socket.readable.pipeThrough(new DecodeUtf8Stream2()).pipeTo(gatherStream);
      return gatherStream.result;
    }
    async getProp(key) {
      const stdout = await this.subprocess.spawnAndWaitLegacy(["getprop", key]);
      return stdout.trim();
    }
    async rm(...filenames) {
      const stdout = await this.subprocess.spawnAndWaitLegacy(["rm", "-rf", ...filenames.map((arg) => escapeArg2(arg))]);
      return stdout;
    }
    install() {
      return install2(this);
    }
    async sync() {
      const socket = await this.createSocket("sync:");
      return new AdbSync2(this, socket);
    }
    async framebuffer() {
      return framebuffer2(this);
    }
    async close() {
      await this.dispatcher.close();
    }
  };

  // node_modules/@yume-chan/adb-backend-webusb/esm/backend.js
  var ADB_DEVICE_FILTER = {
    classCode: 255,
    subclassCode: 66,
    protocolCode: 1
  };
  var Uint8ArrayStructDeserializeStream = class {
    buffer;
    offset;
    constructor(buffer) {
      this.buffer = buffer;
      this.offset = 0;
    }
    read(length) {
      const result = this.buffer.subarray(this.offset, this.offset + length);
      this.offset += length;
      return result;
    }
  };
  var AdbWebUsbBackendStream = class {
    _readable;
    get readable() {
      return this._readable;
    }
    _writable;
    get writable() {
      return this._writable;
    }
    constructor(device, inEndpoint, outEndpoint) {
      const factory = new DuplexStreamFactory2({
        close: async () => {
          try {
            await device.close();
          } catch {
          }
        },
        dispose: async () => {
          navigator.usb.removeEventListener("disconnect", handleUsbDisconnect);
        }
      });
      function handleUsbDisconnect(e2) {
        if (e2.device === device) {
          factory.dispose();
        }
      }
      navigator.usb.addEventListener("disconnect", handleUsbDisconnect);
      this._readable = factory.wrapReadable(new ReadableStream({
        async pull(controller) {
          const result = await device.transferIn(inEndpoint.endpointNumber, 24);
          const buffer = new Uint8Array(result.data.buffer);
          const stream = new Uint8ArrayStructDeserializeStream(buffer);
          const packet = AdbPacketHeader2.deserialize(stream);
          if (packet.payloadLength !== 0) {
            const result2 = await device.transferIn(inEndpoint.endpointNumber, packet.payloadLength);
            packet.payload = new Uint8Array(result2.data.buffer);
          } else {
            packet.payload = EMPTY_UINT8_ARRAY3;
          }
          controller.enqueue(packet);
        }
      }));
      this._writable = pipeFrom2(factory.createWritable(new WritableStream({
        write: async (chunk) => {
          await device.transferOut(outEndpoint.endpointNumber, chunk);
        }
      }, {
        highWaterMark: 16 * 1024,
        size(chunk) {
          return chunk.byteLength;
        }
      })), new AdbPacketSerializeStream());
    }
  };
  var AdbWebUsbBackend = class {
    static isSupported() {
      return !!globalThis.navigator?.usb;
    }
    static async getDevices() {
      const devices = await window.navigator.usb.getDevices();
      return devices.map((device) => new AdbWebUsbBackend(device));
    }
    static async requestDevice() {
      try {
        const device = await navigator.usb.requestDevice({ filters: [ADB_DEVICE_FILTER] });
        return new AdbWebUsbBackend(device);
      } catch (e2) {
        if (e2 instanceof DOMException && e2.name === "NotFoundError") {
          return void 0;
        }
        throw e2;
      }
    }
    _device;
    get serial() {
      return this._device.serialNumber;
    }
    get name() {
      return this._device.productName;
    }
    constructor(device) {
      this._device = device;
    }
    async connect() {
      if (!this._device.opened) {
        await this._device.open();
      }
      for (const configuration of this._device.configurations) {
        for (const interface_ of configuration.interfaces) {
          for (const alternate of interface_.alternates) {
            if (alternate.interfaceSubclass === ADB_DEVICE_FILTER.subclassCode && alternate.interfaceClass === ADB_DEVICE_FILTER.classCode && alternate.interfaceSubclass === ADB_DEVICE_FILTER.subclassCode) {
              if (this._device.configuration?.configurationValue !== configuration.configurationValue) {
                await this._device.selectConfiguration(configuration.configurationValue);
              }
              if (!interface_.claimed) {
                await this._device.claimInterface(interface_.interfaceNumber);
              }
              if (interface_.alternate.alternateSetting !== alternate.alternateSetting) {
                await this._device.selectAlternateInterface(interface_.interfaceNumber, alternate.alternateSetting);
              }
              let inEndpoint;
              let outEndpoint;
              for (const endpoint of alternate.endpoints) {
                switch (endpoint.direction) {
                  case "in":
                    inEndpoint = endpoint;
                    if (outEndpoint) {
                      return new AdbWebUsbBackendStream(this._device, inEndpoint, outEndpoint);
                    }
                    break;
                  case "out":
                    outEndpoint = endpoint;
                    if (inEndpoint) {
                      return new AdbWebUsbBackendStream(this._device, inEndpoint, outEndpoint);
                    }
                    break;
                }
              }
            }
          }
        }
      }
      throw new Error("Unknown error");
    }
  };

  // src/components/Aside.tsx
  var import_react10 = __toESM(require_react(), 1);

  // src/state/state.ts
  var GlobalStateType = class {
    constructor() {
      makeAutoObservable(this, {
        disconnectDevice: action
      });
    }
    backend = void 0;
    device = void 0;
    setDevice = (backend, device) => {
      this.backend = backend;
      this.device = device;
    };
    disconnectDevice = async () => {
      if (!this.device)
        return;
      try {
        await this.device.close();
        runInAction(() => {
          this.device = void 0;
          this.backend = void 0;
        });
      } catch (e2) {
        console.error(e2.message);
      }
    };
  };
  var GlobalState = new GlobalStateType();

  // src/components/Aside.tsx
  var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
  var CredentialStore = new AdbWebCredentialStore();
  function Aside() {
    const [selectedBackend, setSelectedBackend] = (0, import_react10.useState)();
    const addUsbBackend = (0, import_react10.useCallback)(async () => {
      const backend = await AdbWebUsbBackend.requestDevice();
      setSelectedBackend(backend);
    }, []);
    const connect = (0, import_react10.useCallback)(async () => {
      if (!selectedBackend)
        return;
      let readable;
      let writable;
      try {
        const streams = await selectedBackend.connect();
        readable = streams.readable.pipeThrough(new InspectStream(() => {
        }));
        writable = pipeFrom2(streams.writable, new InspectStream(() => {
        }));
      } catch (e2) {
        if (e2 instanceof DOMException) {
          console.error(e2.message);
        }
        return;
      }
      async function dispose() {
        try {
          readable.cancel();
        } catch {
        }
        try {
          await writable.close();
        } catch {
        }
      }
      try {
        const device = await Adb.authenticate(
          { readable, writable },
          CredentialStore,
          void 0
        );
        device.disconnected.then(async () => {
          await dispose();
        }).catch(async () => {
          await dispose();
        });
        GlobalState.setDevice(selectedBackend, device);
      } catch (e2) {
        if (e2 instanceof DOMException) {
          console.error(e2.message);
        }
        await dispose();
      }
    }, [selectedBackend]);
    const renderDeviceName = (0, import_react10.useCallback)(() => {
      if (!selectedBackend)
        return "\u672A\u8FDE\u63A5\u8BBE\u5907";
      return selectedBackend.name;
    }, [selectedBackend]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Stack, {
      className: "aside-nav",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Label, {
          children: [
            "\u8BBE\u5907\u540D\u79F0:",
            renderDeviceName()
          ]
        }),
        !GlobalState.device ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Stack, {
          horizontal: true,
          tokens: { childrenGap: 5 },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DefaultButton, {
              styles: { root: { width: "100%" } },
              onClick: addUsbBackend,
              text: "\u83B7\u53D6\u8BBE\u5907"
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PrimaryButton, {
              styles: { root: { width: "100%" } },
              onClick: connect,
              disabled: !selectedBackend,
              text: "\u8FDE\u63A5"
            })
          ]
        }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DefaultButton, {
          iconProps: { iconName: "PlugDisconnected" },
          onClick: GlobalState.disconnectDevice,
          text: "\u65AD\u5F00\u8FDE\u63A5"
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Stack, {
          grow: true
        })
      ]
    });
  }

  // src/components/FileList.tsx
  var import_react12 = __toESM(require_react(), 1);

  // src/utils/asyncEffect.ts
  function asyncEffect(effect) {
    let cancelLast = () => {
    };
    return async (...args) => {
      cancelLast();
      cancelLast = () => {
        if (typeof cleanup === "function") {
          cleanup();
        }
        abortController.abort();
      };
      const abortController = new AbortController();
      let cleanup;
      try {
        cleanup = await effect(abortController.signal, ...args);
        if (abortController.signal.aborted) {
          if (typeof cleanup === "function") {
            cleanup();
          }
        }
      } catch (e2) {
        if (e2 instanceof DOMException) {
          if (e2.name === "AbortError") {
            return;
          }
        }
        console.error(e2);
      }
    };
  }

  // src/components/FileList.tsx
  var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
  function toListItem(item) {
    item.key = item.name;
    return item;
  }
  var FileManager = class {
    items = [];
    path = "/";
    loadFiles = asyncEffect(async (signal, setFileList) => {
      if (!GlobalState.device)
        return;
      const sync = await GlobalState.device.sync();
      const items = [];
      const linkItems = [];
      const intervalId = setInterval(() => {
        if (signal.aborted) {
          return;
        }
      }, 1e3);
      try {
        for await (const entry of sync.opendir(this.path)) {
          if (signal.aborted)
            return;
          if (entry.name === "." || entry.name === "..") {
            continue;
          }
          if (entry.type === LinuxFileType2.Link) {
            linkItems.push(entry);
          } else {
            items.push(toListItem(entry));
          }
        }
        for (const entry of linkItems) {
          if (signal.aborted)
            return;
          let target_path;
          if (this.path.at(-1) === "/") {
            target_path = this.path + entry.name;
          } else {
            target_path = this.path + "/" + entry.name;
          }
          if (!await sync.isDirectory(target_path)) {
            entry.mode = LinuxFileType2.File << 12 | entry.permission;
            entry.size = 0n;
          }
          items.push(toListItem(entry));
        }
        if (signal.aborted)
          return;
        setFileList(items);
      } finally {
        clearInterval(intervalId);
        sync.dispose();
      }
    });
  };
  var fileManager = new FileManager();
  function FileList() {
    const [fileList, setFileList] = (0, import_react12.useState)([]);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", {
      children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(DefaultButton, {
        disabled: !GlobalState.device,
        onClick: () => fileManager.loadFiles(setFileList),
        children: "\u52A0\u8F7D\u6587\u4EF6"
      })
    });
  }

  // node_modules/@fluentui/react-icons/lib/icons/chunk-0.js
  var React54 = __toESM(require_react());

  // node_modules/@fluentui/react-icons/lib/utils/wrapIcon.js
  var React53 = __toESM(require_react());

  // node_modules/@fluentui/react-icons/node_modules/tslib/modules/index.js
  var import_tslib62 = __toESM(require_tslib9(), 1);
  var {
    __extends: __extends9,
    __assign: __assign10,
    __rest: __rest9,
    __decorate: __decorate9,
    __param: __param9,
    __metadata: __metadata9,
    __awaiter: __awaiter9,
    __generator: __generator9,
    __exportStar: __exportStar9,
    __createBinding: __createBinding9,
    __values: __values10,
    __read: __read10,
    __spread: __spread9,
    __spreadArrays: __spreadArrays9,
    __spreadArray: __spreadArray9,
    __await: __await9,
    __asyncGenerator: __asyncGenerator9,
    __asyncDelegator: __asyncDelegator9,
    __asyncValues: __asyncValues9,
    __makeTemplateObject: __makeTemplateObject9,
    __importStar: __importStar9,
    __importDefault: __importDefault9,
    __classPrivateFieldGet: __classPrivateFieldGet9,
    __classPrivateFieldSet: __classPrivateFieldSet9,
    __classPrivateFieldIn: __classPrivateFieldIn9
  } = import_tslib62.default;

  // node_modules/@griffel/core/constants.esm.js
  var DATA_BUCKET_ATTR = "data-make-styles-bucket";
  var SEQUENCE_HASH_LENGTH = 7;
  var SEQUENCE_PREFIX = "___";
  var DEBUG_SEQUENCE_SEPARATOR = "_";
  var SEQUENCE_SIZE = false ? SEQUENCE_PREFIX.length + SEQUENCE_HASH_LENGTH : SEQUENCE_PREFIX.length + SEQUENCE_HASH_LENGTH + DEBUG_SEQUENCE_SEPARATOR.length + SEQUENCE_HASH_LENGTH;
  var DEFINITION_LOOKUP_TABLE = {};
  var LOOKUP_DEFINITIONS_INDEX = 0;
  var LOOKUP_DIR_INDEX = 1;

  // node_modules/@emotion/hash/dist/hash.browser.esm.js
  function murmur2(str) {
    var h2 = 0;
    var k2, i2 = 0, len = str.length;
    for (; len >= 4; ++i2, len -= 4) {
      k2 = str.charCodeAt(i2) & 255 | (str.charCodeAt(++i2) & 255) << 8 | (str.charCodeAt(++i2) & 255) << 16 | (str.charCodeAt(++i2) & 255) << 24;
      k2 = (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
      k2 ^= k2 >>> 24;
      h2 = (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h2 ^= (str.charCodeAt(i2 + 2) & 255) << 16;
      case 2:
        h2 ^= (str.charCodeAt(i2 + 1) & 255) << 8;
      case 1:
        h2 ^= str.charCodeAt(i2) & 255;
        h2 = (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    }
    h2 ^= h2 >>> 13;
    h2 = (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    return ((h2 ^ h2 >>> 15) >>> 0).toString(36);
  }
  var hash_browser_esm_default = murmur2;

  // node_modules/@griffel/core/runtime/utils/hashSequence.esm.js
  function padEndHash(value) {
    const hashLength = value.length;
    if (hashLength === SEQUENCE_HASH_LENGTH) {
      return value;
    }
    for (let i2 = hashLength; i2 < SEQUENCE_HASH_LENGTH; i2++) {
      value += "0";
    }
    return value;
  }
  function hashSequence(classes, dir, sequenceIds = []) {
    if (false) {
      return SEQUENCE_PREFIX + padEndHash(hash_browser_esm_default(classes + dir));
    }
    return SEQUENCE_PREFIX + padEndHash(hash_browser_esm_default(classes + dir)) + DEBUG_SEQUENCE_SEPARATOR + padEndHash(hash_browser_esm_default(sequenceIds.join("")));
  }

  // node_modules/@griffel/core/runtime/reduceToClassNameForSlots.esm.js
  function reduceToClassName(classMap, dir) {
    let className = "";
    for (const propertyHash in classMap) {
      const classNameMapping = classMap[propertyHash];
      if (classNameMapping) {
        const hasRTLClassName = Array.isArray(classNameMapping);
        if (dir === "rtl") {
          className += (hasRTLClassName ? classNameMapping[1] : classNameMapping) + " ";
        } else {
          className += (hasRTLClassName ? classNameMapping[0] : classNameMapping) + " ";
        }
      }
    }
    return className.slice(0, -1);
  }
  function reduceToClassNameForSlots(classesMapBySlot, dir) {
    const classNamesForSlots = {};
    for (const slotName in classesMapBySlot) {
      const slotClasses = reduceToClassName(classesMapBySlot[slotName], dir);
      if (slotClasses === "") {
        classNamesForSlots[slotName] = "";
        continue;
      }
      const sequenceHash = hashSequence(slotClasses, dir);
      const resultSlotClasses = sequenceHash + " " + slotClasses;
      DEFINITION_LOOKUP_TABLE[sequenceHash] = [classesMapBySlot[slotName], dir];
      classNamesForSlots[slotName] = resultSlotClasses;
    }
    return classNamesForSlots;
  }

  // node_modules/@griffel/core/mergeClasses.esm.js
  var mergeClassesCachedResults = {};
  function mergeClasses() {
    let dir = null;
    let resultClassName = "";
    let sequenceMatch = "";
    const sequencesIds = new Array(arguments.length);
    for (let i2 = 0; i2 < arguments.length; i2++) {
      const className = arguments[i2];
      if (typeof className === "string" && className !== "") {
        const sequenceIndex = className.indexOf(SEQUENCE_PREFIX);
        if (sequenceIndex === -1) {
          resultClassName += className + " ";
        } else {
          const sequenceId = className.substr(sequenceIndex, SEQUENCE_SIZE);
          if (sequenceIndex > 0) {
            resultClassName += className.slice(0, sequenceIndex);
          }
          sequenceMatch += sequenceId;
          sequencesIds[i2] = sequenceId;
        }
        if (true) {
          if (className.indexOf(SEQUENCE_PREFIX, sequenceIndex + 1) !== -1) {
            console.error(`mergeClasses(): a passed string contains multiple identifiers of atomic classes (classes that start with "${SEQUENCE_PREFIX}"), it's possible that passed classes were concatenated in a wrong way. Source string: ${className}`);
          }
        }
      }
    }
    if (sequenceMatch === "") {
      return resultClassName.slice(0, -1);
    }
    const mergeClassesResult = mergeClassesCachedResults[sequenceMatch];
    if (mergeClassesResult !== void 0) {
      return resultClassName + mergeClassesResult;
    }
    const sequenceMappings = [];
    for (let i2 = 0; i2 < arguments.length; i2++) {
      const sequenceId = sequencesIds[i2];
      if (sequenceId) {
        const sequenceMapping = DEFINITION_LOOKUP_TABLE[sequenceId];
        if (sequenceMapping) {
          sequenceMappings.push(sequenceMapping[LOOKUP_DEFINITIONS_INDEX]);
          if (true) {
            if (dir !== null && dir !== sequenceMapping[LOOKUP_DIR_INDEX]) {
              console.error(`mergeClasses(): a passed string contains an identifier (${sequenceId}) that has different direction (dir="${sequenceMapping[1] ? "rtl" : "ltr"}") setting than other classes. This is not supported. Source string: ${arguments[i2]}`);
            }
          }
          dir = sequenceMapping[LOOKUP_DIR_INDEX];
        } else {
          if (true) {
            console.error(`mergeClasses(): a passed string contains an identifier (${sequenceId}) that does not match any entry in cache. Source string: ${arguments[i2]}`);
          }
        }
      }
    }
    const resultDefinitions = Object.assign.apply(
      Object,
      [{}].concat(sequenceMappings)
    );
    let atomicClassNames = reduceToClassName(resultDefinitions, dir);
    const newSequenceHash = hashSequence(atomicClassNames, dir, sequencesIds);
    atomicClassNames = newSequenceHash + " " + atomicClassNames;
    mergeClassesCachedResults[sequenceMatch] = atomicClassNames;
    DEFINITION_LOOKUP_TABLE[newSequenceHash] = [resultDefinitions, dir];
    return resultClassName + atomicClassNames;
  }

  // node_modules/@griffel/core/devtools/store.esm.js
  var sequenceDetails = {};
  var cssRules = /* @__PURE__ */ new Set();
  var debugData = {
    getChildrenSequences: (debugSequenceHash) => {
      const key = Object.keys(mergeClassesCachedResults).find((key2) => mergeClassesCachedResults[key2].startsWith(debugSequenceHash));
      if (key) {
        return key.split(SEQUENCE_PREFIX).filter((sequence) => sequence.length).map((sequence) => SEQUENCE_PREFIX + sequence);
      }
      return [];
    },
    addCSSRule: (rule) => {
      cssRules.add(rule);
    },
    addSequenceDetails: (classNamesForSlots, sourceURL) => {
      Object.entries(classNamesForSlots).forEach(([slotName, sequenceHash]) => {
        sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = {
          slotName,
          sourceURL
        };
      });
    },
    getCSSRules: () => {
      return Array.from(cssRules);
    },
    getSequenceDetails: (sequenceHash) => {
      return sequenceDetails[sequenceHash];
    }
  };

  // node_modules/@griffel/core/devtools/utils.esm.js
  function getDirectionalClassName(classes, direction) {
    return Array.isArray(classes) ? direction === "rtl" ? classes[1] : classes[0] : classes;
  }
  function getDebugClassNames(lookupItem, parentLookupItem, parentDebugClassNames, overridingSiblings) {
    const classesMapping = lookupItem[0];
    const direction = lookupItem[1];
    return Object.entries(classesMapping).map(([propertyHash, classes]) => {
      const className = getDirectionalClassName(classes, direction);
      let overriddenBy;
      if (parentDebugClassNames && parentLookupItem) {
        const matching = parentDebugClassNames.find(({
          className: parentClassName
        }) => parentClassName === className);
        if (!matching && parentLookupItem[0][propertyHash]) {
          overriddenBy = getDirectionalClassName(parentLookupItem[0][propertyHash], parentLookupItem[1]);
        } else if (matching && parentLookupItem[0][propertyHash]) {
          const siblingHasSameRule = overridingSiblings ? overridingSiblings.filter(({
            debugClassNames
          }) => debugClassNames.filter(({
            className: siblingClassName
          }) => siblingClassName === className).length > 0).length > 0 : false;
          overriddenBy = siblingHasSameRule ? matching.className : matching.overriddenBy;
        } else if (!matching && !parentLookupItem[0][propertyHash]) {
          overriddenBy = void 0;
        } else if (matching && !parentLookupItem[0][propertyHash]) {
          overriddenBy = void 0;
        }
      }
      return {
        className,
        overriddenBy
      };
    });
  }

  // node_modules/@griffel/core/devtools/getDebugTree.esm.js
  function getDebugTree(debugSequenceHash, parentNode) {
    const lookupItem = DEFINITION_LOOKUP_TABLE[debugSequenceHash];
    if (lookupItem === void 0) {
      return void 0;
    }
    const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : void 0;
    const debugClassNames = getDebugClassNames(lookupItem, parentLookupItem, parentNode === null || parentNode === void 0 ? void 0 : parentNode.debugClassNames, parentNode === null || parentNode === void 0 ? void 0 : parentNode.children);
    const node = {
      sequenceHash: debugSequenceHash,
      direction: lookupItem[1],
      children: [],
      debugClassNames
    };
    const childrenSequences = debugData.getChildrenSequences(node.sequenceHash);
    childrenSequences.reverse().forEach((sequence) => {
      const child = getDebugTree(sequence, node);
      if (child) {
        node.children.push(child);
      }
    });
    if (!node.children.length) {
      node.rules = {};
      node.debugClassNames.forEach(({
        className
      }) => {
        const mapData = debugData.getSequenceDetails(debugSequenceHash);
        if (mapData) {
          node.slot = mapData.slotName;
          node.sourceURL = mapData.sourceURL;
        }
        const cssRule = debugData.getCSSRules().find((cssRule2) => {
          return cssRule2.includes(className);
        });
        node.rules[className] = cssRule;
      });
    }
    return node;
  }

  // node_modules/@griffel/core/devtools/injectDevTools.esm.js
  function injectDevTools(document2) {
    const window2 = document2.defaultView;
    if (!window2 || window2.__GRIFFEL_DEVTOOLS__) {
      return;
    }
    const devtools = {
      getInfo: (element) => {
        const rootDebugSequenceHash = Array.from(element.classList).find((className) => className.startsWith(SEQUENCE_PREFIX));
        if (rootDebugSequenceHash === void 0) {
          return void 0;
        }
        return getDebugTree(rootDebugSequenceHash);
      }
    };
    Object.defineProperty(window2, "__GRIFFEL_DEVTOOLS__", {
      configurable: false,
      enumerable: false,
      get() {
        return devtools;
      }
    });
  }

  // node_modules/@griffel/core/devtools/isDevToolsEnabled.esm.js
  var isDevToolsEnabled = /* @__PURE__ */ (() => {
    var _a6;
    try {
      return Boolean(typeof window !== "undefined" && ((_a6 = window.sessionStorage) === null || _a6 === void 0 ? void 0 : _a6.getItem("__GRIFFEL_DEVTOOLS__")));
    } catch (e2) {
      return false;
    }
  })();

  // node_modules/@griffel/core/runtime/utils/normalizeCSSBucketEntry.esm.js
  function normalizeCSSBucketEntry(entry) {
    if (!Array.isArray(entry)) {
      return [entry];
    }
    if (entry.length > 2) {
      throw new Error("CSS Bucket contains an entry with greater than 2 items, please report this to https://github.com/microsoft/griffel/issues");
    }
    return entry;
  }

  // node_modules/@griffel/core/renderer/createIsomorphicStyleSheet.esm.js
  function createIsomorphicStyleSheet(styleElement, bucketName, elementAttributes) {
    const __cssRulesForSSR = [];
    elementAttributes[DATA_BUCKET_ATTR] = bucketName;
    if (styleElement) {
      for (const attrName in elementAttributes) {
        styleElement.setAttribute(attrName, elementAttributes[attrName]);
      }
    }
    function insertRule(rule) {
      if (styleElement === null || styleElement === void 0 ? void 0 : styleElement.sheet) {
        return styleElement.sheet.insertRule(rule, styleElement.sheet.cssRules.length);
      }
      return __cssRulesForSSR.push(rule);
    }
    return {
      elementAttributes,
      insertRule,
      element: styleElement,
      bucketName,
      cssRules() {
        if (styleElement === null || styleElement === void 0 ? void 0 : styleElement.sheet) {
          return Array.from(styleElement.sheet.cssRules).map((cssRule) => cssRule.cssText);
        }
        return __cssRulesForSSR;
      }
    };
  }

  // node_modules/@griffel/core/renderer/getStyleSheetForBucket.esm.js
  var styleBucketOrdering = [
    "r",
    "d",
    "l",
    "v",
    "w",
    "f",
    "i",
    "h",
    "a",
    "k",
    "t",
    "m"
  ];
  var styleBucketOrderingMap = /* @__PURE__ */ styleBucketOrdering.reduce((acc, cur, j2) => {
    acc[cur] = j2;
    return acc;
  }, {});
  function getStyleSheetForBucket(bucketName, target, renderer, elementAttributes = {}, metadata) {
    let stylesheetKey = bucketName;
    if (bucketName === "m" && metadata) {
      stylesheetKey = bucketName + metadata["m"];
    }
    if (!renderer.stylesheets[stylesheetKey]) {
      const tag = target && target.createElement("style");
      if (bucketName === "m" && metadata) {
        elementAttributes["media"] = metadata["m"];
      }
      const stylesheet3 = createIsomorphicStyleSheet(tag, bucketName, elementAttributes);
      renderer.stylesheets[stylesheetKey] = stylesheet3;
      if (target && tag) {
        const elementSibling = findElementSibling(target, bucketName, renderer, metadata);
        target.head.insertBefore(tag, elementSibling);
      }
    }
    return renderer.stylesheets[stylesheetKey];
  }
  function findElementSibling(target, targetBucket, renderer, metadata) {
    const targetOrder = styleBucketOrderingMap[targetBucket];
    let comparer2 = (el) => targetOrder - styleBucketOrderingMap[el.getAttribute(DATA_BUCKET_ATTR)];
    let styleElements = target.head.querySelectorAll(`[${DATA_BUCKET_ATTR}]`);
    if (targetBucket === "m" && metadata) {
      const mediaElements = target.head.querySelectorAll(`[${DATA_BUCKET_ATTR}="${targetBucket}"]`);
      if (mediaElements.length) {
        styleElements = mediaElements;
        comparer2 = (el) => renderer.compareMediaQueries(metadata["m"], el.media);
      }
    }
    for (const styleElement of styleElements) {
      if (comparer2(styleElement) < 0) {
        return styleElement;
      }
    }
    return null;
  }

  // node_modules/@griffel/core/renderer/createDOMRenderer.esm.js
  var lastIndex = 0;
  var defaultCompareMediaQueries = (a2, b2) => a2 < b2 ? -1 : a2 > b2 ? 1 : 0;
  function createDOMRenderer(target = typeof document === "undefined" ? void 0 : document, options = {}) {
    const {
      unstable_filterCSSRule,
      compareMediaQueries = defaultCompareMediaQueries
    } = options;
    const renderer = {
      insertionCache: {},
      stylesheets: {},
      compareMediaQueries,
      id: `d${lastIndex++}`,
      insertCSSRules(cssRules2) {
        for (const styleBucketName in cssRules2) {
          const cssRulesForBucket = cssRules2[styleBucketName];
          for (let i2 = 0, l2 = cssRulesForBucket.length; i2 < l2; i2++) {
            const [ruleCSS, metadata] = normalizeCSSBucketEntry(cssRulesForBucket[i2]);
            const sheet = getStyleSheetForBucket(styleBucketName, target, renderer, options.styleElementAttributes, metadata);
            if (renderer.insertionCache[ruleCSS]) {
              continue;
            }
            renderer.insertionCache[ruleCSS] = styleBucketName;
            if (isDevToolsEnabled) {
              debugData.addCSSRule(ruleCSS);
            }
            try {
              if (unstable_filterCSSRule) {
                if (unstable_filterCSSRule(ruleCSS)) {
                  sheet.insertRule(ruleCSS);
                }
              } else {
                sheet.insertRule(ruleCSS);
              }
            } catch (e2) {
              if (!ignoreSuffixesRegex.test(ruleCSS)) {
                console.error(`There was a problem inserting the following rule: "${ruleCSS}"`, e2);
              }
            }
          }
        }
      }
    };
    if (target && true && isDevToolsEnabled) {
      injectDevTools(target);
    }
    return renderer;
  }
  var ignoreSuffixes = /* @__PURE__ */ ["-moz-placeholder", "-moz-focus-inner", "-moz-focusring", "-ms-input-placeholder", "-moz-read-write", "-moz-read-only"].join("|");
  var ignoreSuffixesRegex = /* @__PURE__ */ new RegExp(`:(${ignoreSuffixes})`);

  // node_modules/@griffel/core/devtools/react-render-tracker/stackTrace.esm.js
  var UNKNOWN_FUNCTION = "<unknown>";
  function parseStackTraceLine(line) {
    return parseChrome(line) || parseGecko(line) || parseJSC(line);
  }
  var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)?\)?\s*$/i;
  var chromeRe2 = /^\s*at ()((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)\s*$/i;
  var chromeEvalRe = /\((\S*)\)/;
  function parseChrome(line) {
    const parts = chromeRe.exec(line) || chromeRe2.exec(line);
    if (!parts) {
      return null;
    }
    let loc = parts[2];
    const isNative = loc && loc.indexOf("native") === 0;
    const isEval = loc && loc.indexOf("eval") === 0;
    const submatch = chromeEvalRe.exec(loc);
    if (isEval && submatch != null) {
      loc = submatch[1];
    }
    return {
      loc: !isNative ? parts[2] : null,
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)\s*$/i;
  var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  function parseGecko(line) {
    const parts = geckoRe.exec(line);
    if (!parts) {
      return null;
    }
    let loc = parts[3];
    const isEval = loc && loc.indexOf(" > eval") > -1;
    const submatch = geckoEvalRe.exec(loc);
    if (isEval && submatch != null) {
      loc = submatch[1];
    }
    return {
      loc: parts[3],
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?)\s*$/i;
  function parseJSC(line) {
    const parts = javaScriptCoreRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      loc: parts[3],
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }

  // node_modules/@griffel/core/devtools/getSourceURLfromError.esm.js
  function getSourceURLfromError() {
    const stacks = String(new Error().stack).split("\n");
    const userMakeStyleCallLine = findUserMakeStyleCallInStacks(stacks);
    if (userMakeStyleCallLine === void 0) {
      return void 0;
    }
    const result = parseStackTraceLine(userMakeStyleCallLine);
    return result === null || result === void 0 ? void 0 : result.loc;
  }
  function findUserMakeStyleCallInStacks(stacks) {
    for (let i2 = stacks.length - 1; i2 >= 0; --i2) {
      if (stacks[i2].includes("at getSourceURLfromError")) {
        return stacks[i2 + 3];
      }
    }
    return void 0;
  }

  // node_modules/@griffel/core/__styles.esm.js
  function __styles(classesMapBySlot, cssRules2) {
    const insertionCache = {};
    let ltrClassNamesForSlots = null;
    let rtlClassNamesForSlots = null;
    let sourceURL;
    if (isDevToolsEnabled) {
      sourceURL = getSourceURLfromError();
    }
    function computeClasses(options) {
      const {
        dir,
        renderer
      } = options;
      const isLTR = dir === "ltr";
      const rendererId = isLTR ? renderer.id : renderer.id + "r";
      if (isLTR) {
        if (ltrClassNamesForSlots === null) {
          ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      } else {
        if (rtlClassNamesForSlots === null) {
          rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      }
      if (insertionCache[rendererId] === void 0) {
        renderer.insertCSSRules(cssRules2);
        insertionCache[rendererId] = true;
      }
      const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
      if (isDevToolsEnabled) {
        debugData.addSequenceDetails(classNamesForSlots, sourceURL);
      }
      return classNamesForSlots;
    }
    return computeClasses;
  }

  // node_modules/@fluentui/react-icons/node_modules/@griffel/react/RendererContext.esm.js
  var React51 = __toESM(require_react());
  var RendererContext = /* @__PURE__ */ React51.createContext(/* @__PURE__ */ createDOMRenderer());
  function useRenderer() {
    return React51.useContext(RendererContext);
  }

  // node_modules/@fluentui/react-icons/node_modules/@griffel/react/TextDirectionContext.esm.js
  var React52 = __toESM(require_react());
  var TextDirectionContext = /* @__PURE__ */ React52.createContext("ltr");
  function useTextDirection() {
    return React52.useContext(TextDirectionContext);
  }

  // node_modules/@fluentui/react-icons/node_modules/@griffel/react/__styles.esm.js
  function __styles2(classesMapBySlot, cssRules2) {
    const getStyles12 = __styles(classesMapBySlot, cssRules2);
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles12({
        dir,
        renderer
      });
    };
  }

  // node_modules/@fluentui/react-icons/lib/utils/useIconState.js
  var useRootStyles = __styles2({
    "root": {
      "mc9l5x": "f1w7gpdv",
      "Bg96gwp": "fez10in",
      "ycbfsm": "fg4l7m0"
    }
  }, {
    "d": [".f1w7gpdv{display:inline;}", ".fez10in{line-height:0;}"],
    "t": ["@media (forced-colors: active){.fg4l7m0{forced-color-adjust:auto;}}"]
  });
  var useIconState = (props) => {
    const {
      title,
      primaryFill = "currentColor"
    } = props, rest = __rest9(props, ["title", "primaryFill"]);
    const state = Object.assign(Object.assign({}, rest), {
      title: void 0,
      fill: primaryFill
    });
    const styles2 = useRootStyles();
    state.className = mergeClasses(styles2.root, state.className);
    if (title) {
      state["aria-label"] = title;
    }
    if (!state["aria-label"] && !state["aria-labelledby"]) {
      state["aria-hidden"] = true;
    } else {
      state["role"] = "img";
    }
    return state;
  };

  // node_modules/@fluentui/react-icons/lib/utils/wrapIcon.js
  var wrapIcon = (Icon2, displayName) => {
    const WrappedIcon = (props) => {
      const state = useIconState(props);
      return React53.createElement(Icon2, Object.assign({}, state));
    };
    WrappedIcon.displayName = displayName;
    return WrappedIcon;
  };
  var wrapIcon_default = wrapIcon;

  // node_modules/@fluentui/react-icons/lib/icons/chunk-0.js
  var AddCircleRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React54.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React54.createElement("path", {
      d: "M6 10c0-.28.22-.5.5-.5h3v-3a.5.5 0 011 0v3h3a.5.5 0 010 1h-3v3a.5.5 0 01-1 0v-3h-3A.5.5 0 016 10zm4 8a8 8 0 100-16 8 8 0 000 16zm0-1a7 7 0 110-14 7 7 0 010 14z",
      fill: primaryFill
    }));
  };
  var AddCircleRegular = /* @__PURE__ */ wrapIcon_default(AddCircleRegularIcon, "AddCircleRegular");
  var ArrowClockwiseRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React54.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React54.createElement("path", {
      d: "M3.07 9.05a7 7 0 0112.55-3.22l.13.17H12.5a.5.5 0 100 1h4a.5.5 0 00.5-.5v-4a.5.5 0 00-1 0v2.2a8 8 0 101.99 4.77.5.5 0 00-1 .08 7 7 0 11-13.92-.5z",
      fill: primaryFill
    }));
  };
  var ArrowClockwiseRegular = /* @__PURE__ */ wrapIcon_default(ArrowClockwiseRegularIcon, "ArrowClockwiseRegular");
  var ArrowRotateClockwiseRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React54.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React54.createElement("path", {
      d: "M3 10a7 7 0 1110 6.33V14.5a.5.5 0 00-1 0v3c0 .28.22.5.5.5h3a.5.5 0 000-1h-1.62A8 8 0 102 10a.5.5 0 001 0zm7 2a2 2 0 100-4 2 2 0 000 4zm0-1a1 1 0 110-2 1 1 0 010 2z",
      fill: primaryFill
    }));
  };
  var ArrowRotateClockwiseRegular = /* @__PURE__ */ wrapIcon_default(ArrowRotateClockwiseRegularIcon, "ArrowRotateClockwiseRegular");
  var ArrowRotateCounterclockwiseRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React54.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React54.createElement("path", {
      d: "M17 10a7 7 0 10-10 6.33V14.5a.5.5 0 011 0v3a.5.5 0 01-.5.5h-3a.5.5 0 010-1h1.62A8 8 0 1118 10a.5.5 0 01-1 0zm-7 2a2 2 0 110-4 2 2 0 010 4zm0-1a1 1 0 100-2 1 1 0 000 2z",
      fill: primaryFill
    }));
  };
  var ArrowRotateCounterclockwiseRegular = /* @__PURE__ */ wrapIcon_default(ArrowRotateCounterclockwiseRegularIcon, "ArrowRotateCounterclockwiseRegular");
  var ArrowSortDownRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React54.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React54.createElement("path", {
      d: "M10 15.29l2.65-2.64a.5.5 0 01.7.7L9.9 16.82a.5.5 0 01-.74.03h-.01l-3.5-3.5a.5.5 0 11.71-.7L9 15.29V3.5a.5.5 0 011 0v11.79z",
      fill: primaryFill
    }));
  };
  var ArrowSortDownRegular = /* @__PURE__ */ wrapIcon_default(ArrowSortDownRegularIcon, "ArrowSortDownRegular");
  var ArrowSortUpRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React54.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React54.createElement("path", {
      d: "M9 4.71L6.35 7.35a.5.5 0 11-.7-.7L9.1 3.18a.5.5 0 01.74-.03h.01l3.5 3.5a.5.5 0 11-.71.7L10 4.71V16.5a.5.5 0 01-1 0V4.71z",
      fill: primaryFill
    }));
  };
  var ArrowSortUpRegular = /* @__PURE__ */ wrapIcon_default(ArrowSortUpRegularIcon, "ArrowSortUpRegular");
  var BookSearchRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React54.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React54.createElement("path", {
      d: "M4 4v12c0 1.1.9 2 2 2h9.5a.5.5 0 000-1H6a1 1 0 01-1-1h10a1 1 0 001-1V4a2 2 0 00-2-2H6a2 2 0 00-2 2zm10-1a1 1 0 011 1v11H5V4a1 1 0 011-1h8zm-2.41 6.88a2.5 2.5 0 10-.7.7l1.26 1.27a.5.5 0 00.7-.7L11.6 9.88zM8 8.5a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0z",
      fill: primaryFill
    }));
  };
  var BookSearchRegular = /* @__PURE__ */ wrapIcon_default(BookSearchRegularIcon, "BookSearchRegular");
  var BookmarkRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React54.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React54.createElement("path", {
      d: "M4 4.5A2.5 2.5 0 016.5 2h7A2.5 2.5 0 0116 4.5v13a.5.5 0 01-.8.4L10 14.12 4.8 17.9a.5.5 0 01-.8-.4v-13zM6.5 3C5.67 3 5 3.67 5 4.5v12.02l4.7-3.42a.5.5 0 01.6 0l4.7 3.42V4.5c0-.83-.67-1.5-1.5-1.5h-7z",
      fill: primaryFill
    }));
  };
  var BookmarkRegular = /* @__PURE__ */ wrapIcon_default(BookmarkRegularIcon, "BookmarkRegular");

  // node_modules/@fluentui/react-icons/lib/icons/chunk-1.js
  var React55 = __toESM(require_react());
  var BoxRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React55.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React55.createElement("path", {
      d: "M11.3 2.48a3.5 3.5 0 00-2.6 0l-5.76 2.3A1.5 1.5 0 002 6.18v7.64c0 .62.37 1.17.94 1.4l5.76 2.3a3.5 3.5 0 002.6 0l5.76-2.3c.57-.23.94-.78.94-1.4V6.18a1.5 1.5 0 00-.94-1.4l-5.76-2.3zm-2.23.93a2.5 2.5 0 011.86 0l5.22 2.09-2.27.91-6.16-2.46 1.35-.54zm-2.7 1.08l6.16 2.46L10 7.96 3.85 5.5l2.53-1.01zm4.13 4.35l6.5-2.6v7.58a.5.5 0 01-.31.47l-5.76 2.3c-.14.06-.28.1-.43.13V8.84zm-1 0v7.88a2.5 2.5 0 01-.43-.13l-5.76-2.3a.5.5 0 01-.31-.47V6.24l6.5 2.6z",
      fill: primaryFill
    }));
  };
  var BoxRegular = /* @__PURE__ */ wrapIcon_default(BoxRegularIcon, "BoxRegular");
  var BugRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React55.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React55.createElement("path", {
      d: "M9 2.5a.5.5 0 00-1 0V3c0 .4.12.77.32 1.08A3 3 0 006 7h-.5A1.5 1.5 0 014 5.5v-2a.5.5 0 00-1 0v2A2.5 2.5 0 005.5 8H6v1.5H2.5a.5.5 0 000 1H6V12h-.5A2.5 2.5 0 003 14.5v2a.5.5 0 001 0v-2c0-.83.67-1.5 1.5-1.5H6a4 4 0 008 0h.5c.83 0 1.5.67 1.5 1.5v2a.5.5 0 001 0v-2a2.5 2.5 0 00-2.5-2.5H14v-1.5h3.5a.5.5 0 000-1H14V8h.5A2.5 2.5 0 0017 5.5v-2a.5.5 0 00-1 0v2c0 .83-.67 1.5-1.5 1.5H14a3 3 0 00-2.32-2.92A2 2 0 0012 3v-.5a.5.5 0 00-1 0V3a1 1 0 11-2 0v-.5zM13 7v6a3 3 0 11-6 0V7c0-1.1.9-2 2-2h2a2 2 0 012 2z",
      fill: primaryFill
    }));
  };
  var BugRegular = /* @__PURE__ */ wrapIcon_default(BugRegularIcon, "BugRegular");
  var CameraRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React55.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React55.createElement("path", {
      d: "M10 6a4 4 0 100 8 4 4 0 000-8zm-3 4a3 3 0 116 0 3 3 0 01-6 0zm1.12-8a1.5 1.5 0 00-1.34.83L6.2 4H4.5A2.5 2.5 0 002 6.5v8A2.5 2.5 0 004.5 17h11a2.5 2.5 0 002.5-2.5v-8A2.5 2.5 0 0015.5 4h-1.69l-.58-1.17A1.5 1.5 0 0011.89 2H8.12zm-.44 1.28A.5.5 0 018.12 3h3.77c.19 0 .36.1.45.28l.72 1.44a.5.5 0 00.45.28h2c.82 0 1.5.67 1.5 1.5v8c0 .83-.68 1.5-1.5 1.5h-11A1.5 1.5 0 013 14.5v-8C3 5.67 3.67 5 4.5 5h2a.5.5 0 00.44-.28l.73-1.44z",
      fill: primaryFill
    }));
  };
  var CameraRegular = /* @__PURE__ */ wrapIcon_default(CameraRegularIcon, "CameraRegular");
  var CheckmarkRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React55.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React55.createElement("path", {
      d: "M3.37 10.17a.5.5 0 00-.74.66l4 4.5c.19.22.52.23.72.02l10.5-10.5a.5.5 0 00-.7-.7L7.02 14.27l-3.65-4.1z",
      fill: primaryFill
    }));
  };
  var CheckmarkRegular = /* @__PURE__ */ wrapIcon_default(CheckmarkRegularIcon, "CheckmarkRegular");
  var ChevronDownRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React55.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React55.createElement("path", {
      d: "M15.85 7.65c.2.2.2.5 0 .7l-5.46 5.49a.55.55 0 01-.78 0L4.15 8.35a.5.5 0 11.7-.7L10 12.8l5.15-5.16c.2-.2.5-.2.7 0z",
      fill: primaryFill
    }));
  };
  var ChevronDownRegular = /* @__PURE__ */ wrapIcon_default(ChevronDownRegularIcon, "ChevronDownRegular");
  var ChevronRightRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React55.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React55.createElement("path", {
      d: "M7.65 4.15c.2-.2.5-.2.7 0l5.49 5.46c.21.22.21.57 0 .78l-5.49 5.46a.5.5 0 01-.7-.7L12.8 10 7.65 4.85a.5.5 0 010-.7z",
      fill: primaryFill
    }));
  };
  var ChevronRightRegular = /* @__PURE__ */ wrapIcon_default(ChevronRightRegularIcon, "ChevronRightRegular");
  var ChevronUpRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React55.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React55.createElement("path", {
      d: "M4.15 12.35a.5.5 0 010-.7L9.6 6.16a.55.55 0 01.78 0l5.46 5.49a.5.5 0 01-.7.7L10 7.2l-5.15 5.16a.5.5 0 01-.7 0z",
      fill: primaryFill
    }));
  };
  var ChevronUpRegular = /* @__PURE__ */ wrapIcon_default(ChevronUpRegularIcon, "ChevronUpRegular");
  var CircleRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React55.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React55.createElement("path", {
      d: "M10 3a7 7 0 100 14 7 7 0 000-14zm-8 7a8 8 0 1116 0 8 8 0 01-16 0z",
      fill: primaryFill
    }));
  };
  var CircleRegular = /* @__PURE__ */ wrapIcon_default(CircleRegularIcon, "CircleRegular");

  // node_modules/@fluentui/react-icons/lib/icons/chunk-2.js
  var React56 = __toESM(require_react());
  var CloudArrowDownRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React56.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React56.createElement("path", {
      d: "M10 2c2.82 0 4.41 1.92 4.65 4.25h.07a3.33 3.33 0 013.27 3.66c-.32-.4-.7-.76-1.12-1.07a2.3 2.3 0 00-2.15-1.6h-.07a1 1 0 01-1-.9C13.45 4.33 12.11 3 10 3S6.55 4.32 6.35 6.35a1 1 0 01-1 .9h-.07A2.33 2.33 0 003 9.62 2.33 2.33 0 005.28 12h2.67c-.09.32-.15.66-.18 1H5.28A3.33 3.33 0 012 9.62c0-1.8 1.37-3.27 3.1-3.37h.25C5.6 3.9 7.18 2 10 2zm3.5 16a4.5 4.5 0 110-9 4.5 4.5 0 010 9zm1.6-4.9L14 14.2v-2.7a.5.5 0 00-1 0v2.7l-1.1-1.1a.56.56 0 10-.8.8l2 2c.22.22.58.22.8 0l2-2a.56.56 0 10-.8-.8z",
      fill: primaryFill
    }));
  };
  var CloudArrowDownRegular = /* @__PURE__ */ wrapIcon_default(CloudArrowDownRegularIcon, "CloudArrowDownRegular");
  var CloudArrowUpRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React56.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React56.createElement("path", {
      d: "M10 2c2.82 0 4.41 1.92 4.65 4.25h.07a3.33 3.33 0 013.27 3.66c-.32-.4-.7-.76-1.12-1.07a2.3 2.3 0 00-2.15-1.6h-.07a1 1 0 01-1-.9C13.45 4.33 12.11 3 10 3S6.55 4.32 6.35 6.35a1 1 0 01-1 .9h-.07A2.33 2.33 0 003 9.62 2.33 2.33 0 005.28 12h2.67c-.09.32-.15.66-.18 1H5.28A3.33 3.33 0 012 9.62c0-1.8 1.37-3.27 3.1-3.37h.25C5.6 3.9 7.18 2 10 2zm3.5 7a4.5 4.5 0 110 9 4.5 4.5 0 010-9zm1.6 4.9a.56.56 0 10.8-.8l-2-2a.56.56 0 00-.8 0l-2 2a.56.56 0 10.8.8l1.1-1.1v2.7a.5.5 0 001 0v-2.7l1.1 1.1z",
      fill: primaryFill
    }));
  };
  var CloudArrowUpRegular = /* @__PURE__ */ wrapIcon_default(CloudArrowUpRegularIcon, "CloudArrowUpRegular");
  var CopyRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React56.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React56.createElement("path", {
      d: "M8 2a2 2 0 00-2 2v10c0 1.1.9 2 2 2h6a2 2 0 002-2V4a2 2 0 00-2-2H8zM7 4a1 1 0 011-1h6a1 1 0 011 1v10a1 1 0 01-1 1H8a1 1 0 01-1-1V4zM4 6a2 2 0 011-1.73V14.5A2.5 2.5 0 007.5 17h6.23A2 2 0 0112 18H7.5A3.5 3.5 0 014 14.5V6z",
      fill: primaryFill
    }));
  };
  var CopyRegular = /* @__PURE__ */ wrapIcon_default(CopyRegularIcon, "CopyRegular");
  var DeleteRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React56.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React56.createElement("path", {
      d: "M8.5 4h3a1.5 1.5 0 00-3 0zm-1 0a2.5 2.5 0 015 0h5a.5.5 0 010 1h-1.05l-1.2 10.34A3 3 0 0112.27 18H7.73a3 3 0 01-2.98-2.66L3.55 5H2.5a.5.5 0 010-1h5zM5.74 15.23A2 2 0 007.73 17h4.54a2 2 0 001.99-1.77L15.44 5H4.56l1.18 10.23zM8.5 7.5c.28 0 .5.22.5.5v6a.5.5 0 01-1 0V8c0-.28.22-.5.5-.5zM12 8a.5.5 0 00-1 0v6a.5.5 0 001 0V8z",
      fill: primaryFill
    }));
  };
  var DeleteRegular = /* @__PURE__ */ wrapIcon_default(DeleteRegularIcon, "DeleteRegular");
  var DocumentRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React56.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React56.createElement("path", {
      d: "M6 2a2 2 0 00-2 2v12c0 1.1.9 2 2 2h8a2 2 0 002-2V7.41c0-.4-.16-.78-.44-1.06l-3.91-3.91A1.5 1.5 0 0010.59 2H6zM5 4a1 1 0 011-1h4v3.5c0 .83.67 1.5 1.5 1.5H15v8a1 1 0 01-1 1H6a1 1 0 01-1-1V4zm9.8 3h-3.3a.5.5 0 01-.5-.5V3.2L14.8 7z",
      fill: primaryFill
    }));
  };
  var DocumentRegular = /* @__PURE__ */ wrapIcon_default(DocumentRegularIcon, "DocumentRegular");

  // node_modules/@fluentui/react-icons/lib/icons/chunk-3.js
  var React57 = __toESM(require_react());
  var FilterRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React57.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React57.createElement("path", {
      d: "M7.5 13h5a.5.5 0 01.09 1H7.5a.5.5 0 01-.09-1h5.09-5zm-2-4h9a.5.5 0 01.09 1H5.5a.5.5 0 01-.09-1h9.09-9zm-2-4h13a.5.5 0 01.09 1H3.5a.5.5 0 01-.09-1H16.5h-13z",
      fill: primaryFill
    }));
  };
  var FilterRegular = /* @__PURE__ */ wrapIcon_default(FilterRegularIcon, "FilterRegular");
  var FolderRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React57.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React57.createElement("path", {
      d: "M7.17 3c.27 0 .53.07.76.21l.14.09 1.6 1.2h5.83a2.5 2.5 0 012.48 2.17l.01.17L18 7v7.5a2.5 2.5 0 01-2.34 2.5H4.5A2.5 2.5 0 012 14.66V5.5A2.5 2.5 0 014.34 3h2.83zm.99 4.03a1.5 1.5 0 01-.94.46l-.15.01H3v7c0 .78.6 1.42 1.36 1.5H15.5c.78 0 1.42-.6 1.5-1.36V7c0-.78-.6-1.42-1.36-1.5H9.62L8.16 7.03zM7.16 4H4.5c-.78 0-1.42.6-1.5 1.36V6.5h4.07a.5.5 0 00.3-.1l.06-.06L8.7 5.02 7.47 4.1a.5.5 0 00-.22-.1h-.08z",
      fill: primaryFill
    }));
  };
  var FolderRegular = /* @__PURE__ */ wrapIcon_default(FolderRegularIcon, "FolderRegular");
  var FullScreenMaximizeRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React57.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React57.createElement("path", {
      d: "M3 5c0-1.1.9-2 2-2h2a.5.5 0 010 1H5a1 1 0 00-1 1v2a.5.5 0 01-1 0V5zm9.5-1.5c0-.28.22-.5.5-.5h2a2 2 0 012 2v2a.5.5 0 01-1 0V5a1 1 0 00-1-1h-2a.5.5 0 01-.5-.5zm-9 9c.28 0 .5.22.5.5v2a1 1 0 001 1h2a.5.5 0 010 1H5a2 2 0 01-2-2v-2c0-.28.22-.5.5-.5zm13 0c.28 0 .5.22.5.5v2a2 2 0 01-2 2h-2a.5.5 0 010-1h2a1 1 0 001-1v-2c0-.28.22-.5.5-.5z",
      fill: primaryFill
    }));
  };
  var FullScreenMaximizeRegular = /* @__PURE__ */ wrapIcon_default(FullScreenMaximizeRegularIcon, "FullScreenMaximizeRegular");

  // node_modules/@fluentui/react-icons/lib/icons/chunk-4.js
  var React58 = __toESM(require_react());
  var InfoRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React58.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React58.createElement("path", {
      d: "M10.5 8.91a.5.5 0 00-1 .09v4.6a.5.5 0 001-.1V8.91zm.3-2.16a.75.75 0 10-1.5 0 .75.75 0 001.5 0zM18 10a8 8 0 10-16 0 8 8 0 0016 0zM3 10a7 7 0 1114 0 7 7 0 01-14 0z",
      fill: primaryFill
    }));
  };
  var InfoRegular = /* @__PURE__ */ wrapIcon_default(InfoRegularIcon, "InfoRegular");
  var LightbulbRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React58.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React58.createElement("path", {
      d: "M10 2c3.31 0 6 2.6 6 5.8 0 1.68-.75 3.22-2.2 4.6a.6.6 0 00-.15.2l-.02.09-.94 3.92a1.84 1.84 0 01-1.67 1.38l-.15.01H9.13c-.82 0-1.54-.52-1.78-1.26l-.04-.14-.93-3.91a.6.6 0 00-.17-.3A6.32 6.32 0 014 8.04L4 7.8v-.2A5.91 5.91 0 0110 2zm2.04 13H7.96l.31 1.33.03.1c.1.3.38.52.71.56l.12.01h1.81a.86.86 0 00.75-.53l.03-.1.32-1.37zM10 3a4.92 4.92 0 00-4.98 4.41L5 7.63V8c.06 1.3.68 2.52 1.9 3.67.18.17.32.4.4.64l.05.15.37 1.54h4.57l.38-1.61.05-.16c.09-.21.22-.4.39-.56C14.38 10.47 15 9.18 15 7.8A4.9 4.9 0 0010 3z",
      fill: primaryFill
    }));
  };
  var LightbulbRegular = /* @__PURE__ */ wrapIcon_default(LightbulbRegularIcon, "LightbulbRegular");
  var LightbulbFilamentRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React58.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React58.createElement("path", {
      d: "M9.5 6.5a.5.5 0 011 0v1a.5.5 0 01-1 0v-1zm3.35.94a.5.5 0 00-.7 0l-.71.71a.5.5 0 00.7.7l.71-.7a.5.5 0 000-.7zm-5 0a.5.5 0 10-.7.71l.7.7a.5.5 0 10.71-.7l-.7-.7zM10 2c3.31 0 6 2.6 6 5.8 0 1.68-.75 3.22-2.2 4.6a.6.6 0 00-.15.2l-.02.09-.94 3.92a1.84 1.84 0 01-1.67 1.38l-.15.01H9.13c-.82 0-1.54-.52-1.78-1.26l-.04-.14-.93-3.91a.6.6 0 00-.17-.3A6.32 6.32 0 014 8.04L4 7.8v-.2A5.91 5.91 0 0110 2zM7.96 15l.31 1.33.03.1c.1.3.38.52.71.56l.12.01h1.81a.86.86 0 00.75-.53l.03-.1.32-1.37H7.96zM10 3a4.92 4.92 0 00-4.98 4.41L5 7.63V8c.06 1.3.68 2.52 1.9 3.67.18.17.32.4.4.64l.05.15.37 1.54H9.5V9.5a.5.5 0 111 0V14h1.79l.38-1.61.05-.16c.09-.21.22-.4.39-.56C14.38 10.47 15 9.18 15 7.8A4.9 4.9 0 0010 3z",
      fill: primaryFill
    }));
  };
  var LightbulbFilamentRegular = /* @__PURE__ */ wrapIcon_default(LightbulbFilamentRegularIcon, "LightbulbFilamentRegular");
  var MoreHorizontalRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React58.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React58.createElement("path", {
      d: "M6.25 10a1.25 1.25 0 11-2.5 0 1.25 1.25 0 012.5 0zm5 0a1.25 1.25 0 11-2.5 0 1.25 1.25 0 012.5 0zM15 11.25a1.25 1.25 0 100-2.5 1.25 1.25 0 000 2.5z",
      fill: primaryFill
    }));
  };
  var MoreHorizontalRegular = /* @__PURE__ */ wrapIcon_default(MoreHorizontalRegularIcon, "MoreHorizontalRegular");
  var NavigationRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React58.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React58.createElement("path", {
      d: "M2 4.5c0-.28.22-.5.5-.5h15a.5.5 0 010 1h-15a.5.5 0 01-.5-.5zm0 5c0-.28.22-.5.5-.5h15a.5.5 0 010 1h-15a.5.5 0 01-.5-.5zm.5 4.5a.5.5 0 000 1h15a.5.5 0 000-1h-15z",
      fill: primaryFill
    }));
  };
  var NavigationRegular = /* @__PURE__ */ wrapIcon_default(NavigationRegularIcon, "NavigationRegular");
  var OrientationRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React58.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React58.createElement("path", {
      d: "M3.25 5a.25.25 0 00-.25.25v.25a.5.5 0 01-1 0v-.25C2 4.56 2.56 4 3.25 4h.25a.5.5 0 010 1h-.25z",
      fill: primaryFill
    }), React58.createElement("path", {
      d: "M5 4.5c0-.28.22-.5.5-.5h1a.5.5 0 010 1h-1a.5.5 0 01-.5-.5z",
      fill: primaryFill
    }), React58.createElement("path", {
      d: "M8 4.5c0-.28.22-.5.5-.5h.25C9.44 4 10 4.56 10 5.25v.25a.5.5 0 01-1 0v-.25A.25.25 0 008.75 5H8.5a.5.5 0 01-.5-.5z",
      fill: primaryFill
    }), React58.createElement("path", {
      d: "M14.85 5.85l-.15.16a3.5 3.5 0 01-.2 6.99.5.5 0 010-1 2.5 2.5 0 00.22-5l.13.15a.5.5 0 01-.7.7l-1-1a.5.5 0 010-.7l1-1a.5.5 0 01.7.7z",
      fill: primaryFill
    }), React58.createElement("path", {
      d: "M2 10.5C2 9.67 2.67 9 3.5 9h8c.83 0 1.5.67 1.5 1.5v4c0 .83-.67 1.5-1.5 1.5h-8A1.5 1.5 0 012 14.5v-4zm1.5-.5a.5.5 0 00-.5.5v4c0 .28.22.5.5.5h8a.5.5 0 00.5-.5v-4a.5.5 0 00-.5-.5h-8z",
      fill: primaryFill
    }), React58.createElement("path", {
      d: "M9.5 9a.5.5 0 01-.5-.5v-1a.5.5 0 011 0v1a.5.5 0 01-.5.5z",
      fill: primaryFill
    }), React58.createElement("path", {
      d: "M3 7.5a.5.5 0 00-1 0v1a.5.5 0 001 0v-1z",
      fill: primaryFill
    }));
  };
  var OrientationRegular = /* @__PURE__ */ wrapIcon_default(OrientationRegularIcon, "OrientationRegular");
  var PanelBottomRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React58.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React58.createElement("path", {
      d: "M4 4a2 2 0 00-2 2v8c0 1.1.9 2 2 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zM3 6a1 1 0 011-1h12a1 1 0 011 1v5H3V6zm0 6h14v2a1 1 0 01-1 1H4a1 1 0 01-1-1v-2z",
      fill: primaryFill
    }));
  };
  var PanelBottomRegular = /* @__PURE__ */ wrapIcon_default(PanelBottomRegularIcon, "PanelBottomRegular");

  // node_modules/@fluentui/react-icons/lib/icons/chunk-5.js
  var React59 = __toESM(require_react());
  var PersonFeedbackRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React59.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React59.createElement("path", {
      d: "M10.5 12c.83 0 1.5.67 1.5 1.5v.5c0 1.97-1.86 4-5 4-3.14 0-5-2.03-5-4v-.5c0-.83.67-1.5 1.5-1.5h7zm0 1h-7a.5.5 0 00-.5.5v.5c0 1.44 1.43 3 4 3 2.57 0 4-1.56 4-3v-.5a.5.5 0 00-.5-.5zM7 5.5A2.75 2.75 0 117 11a2.75 2.75 0 010-5.5zM16 2a2 2 0 012 1.85V6a2 2 0 01-1.85 2H14.5l-1.2 1.6a1 1 0 01-1.78-.38l-.01-.1V9l-.01-1.07-.08-.01a2 2 0 01-1.4-1.6l-.01-.17L10 6V4a2 2 0 011.85-2H16zM7 6.5A1.75 1.75 0 107 10a1.75 1.75 0 000-3.5zM16 3h-4a1 1 0 00-1 .88V6a1 1 0 00.88 1h.62v2L14 7h2a1 1 0 001-.88V4a1 1 0 00-.88-1H16z",
      fill: primaryFill
    }));
  };
  var PersonFeedbackRegular = /* @__PURE__ */ wrapIcon_default(PersonFeedbackRegularIcon, "PersonFeedbackRegular");
  var PhoneRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React59.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React59.createElement("path", {
      d: "M9 14a.5.5 0 000 1h2a.5.5 0 000-1H9zM7 2a2 2 0 00-2 2v12c0 1.1.9 2 2 2h6a2 2 0 002-2V4a2 2 0 00-2-2H7zM6 4a1 1 0 011-1h6a1 1 0 011 1v12a1 1 0 01-1 1H7a1 1 0 01-1-1V4z",
      fill: primaryFill
    }));
  };
  var PhoneRegular = /* @__PURE__ */ wrapIcon_default(PhoneRegularIcon, "PhoneRegular");
  var PhoneLaptopRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React59.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React59.createElement("path", {
      d: "M3 4.5C3 3.67 3.67 3 4.5 3h11c.83 0 1.5.67 1.5 1.5v7c0 .83-.67 1.5-1.5 1.5H10v-1h5.5a.5.5 0 00.5-.5v-7a.5.5 0 00-.5-.5h-11a.5.5 0 00-.5.5V6H3V4.5zM10 15h7.5a.5.5 0 000-1H10v1zm-5 0a.5.5 0 000 1h1a.5.5 0 000-1H5zM2 8.5C2 7.67 2.67 7 3.5 7h4C8.33 7 9 7.67 9 8.5v8c0 .83-.67 1.5-1.5 1.5h-4A1.5 1.5 0 012 16.5v-8zM3.5 8a.5.5 0 00-.5.5v8c0 .28.22.5.5.5h4a.5.5 0 00.5-.5v-8a.5.5 0 00-.5-.5h-4z",
      fill: primaryFill
    }));
  };
  var PhoneLaptopRegular = /* @__PURE__ */ wrapIcon_default(PhoneLaptopRegularIcon, "PhoneLaptopRegular");
  var PlayRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React59.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React59.createElement("path", {
      d: "M17.22 8.69a1.5 1.5 0 010 2.62l-10 5.5A1.5 1.5 0 015 15.5v-11A1.5 1.5 0 017.22 3.2l10 5.5zm-.48 1.75a.5.5 0 000-.88l-10-5.5A.5.5 0 006 4.5v11c0 .38.4.62.74.44l10-5.5z",
      fill: primaryFill
    }));
  };
  var PlayRegular = /* @__PURE__ */ wrapIcon_default(PlayRegularIcon, "PlayRegular");
  var PlugConnectedRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React59.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React59.createElement("path", {
      d: "M17.85 2.85a.5.5 0 00-.7-.7L14.48 4.8a4.04 4.04 0 00-5.33.34l-.3.3a1.49 1.49 0 000 2.1l3.6 3.6c.58.59 1.52.59 2.1 0l.3-.3a4.04 4.04 0 00.34-5.33l2.66-2.67zm-4 7.6c-.2.19-.5.19-.7 0l-3.6-3.6c-.19-.2-.19-.5 0-.7l.3-.3a3.04 3.04 0 014.3 4.3l-.3.3zm-6.3-1.6a1.49 1.49 0 00-2.1 0l-.3.3a4.04 4.04 0 00-.34 5.33l-2.66 2.67a.5.5 0 00.7.7l2.67-2.66a4.04 4.04 0 005.33-.34l.3-.3c.59-.58.59-1.52 0-2.1l-3.6-3.6zm-1.4.7c.2-.19.5-.19.7 0l3.6 3.6c.19.2.19.5 0 .7l-.3.3a3.04 3.04 0 11-4.3-4.3l.3-.3z",
      fill: primaryFill
    }));
  };
  var PlugConnectedRegular = /* @__PURE__ */ wrapIcon_default(PlugConnectedRegularIcon, "PlugConnectedRegular");
  var PlugDisconnectedRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React59.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React59.createElement("path", {
      d: "M17.85 2.15c.2.2.2.5 0 .7L16.2 4.52a4.04 4.04 0 01-.34 5.33l-.3.3-.3.31c-.42.41-1.08.41-1.5 0L9.55 6.24a1.05 1.05 0 010-1.48l.6-.61a4.04 4.04 0 015.34-.34l1.67-1.66c.2-.2.5-.2.7 0zm-2.71 2.7a3.04 3.04 0 00-4.29 0l-.3.3c-.19.2-.19.5 0 .7l3.6 3.6c.2.19.5.19.7 0l.3-.3a3.04 3.04 0 000-4.29l-.01-.01zm-5.79 3.8c.2.2.2.5 0 .7L7.71 11 9 12.3l1.65-1.65a.5.5 0 01.7.7L9.71 13l.44.45c.59.58.59 1.52 0 2.1l-.3.3a4.04 4.04 0 01-5.33.34l-1.67 1.66a.5.5 0 01-.7-.7l1.66-1.67a4.04 4.04 0 01.34-5.33l.3-.3a1.49 1.49 0 012.1 0l.45.44 1.65-1.64c.2-.2.5-.2.7 0zm-4.5 6.5a3.04 3.04 0 004.3 0l.3-.3c.19-.2.19-.5 0-.7l-3.6-3.6c-.2-.19-.5-.19-.7 0l-.3.3a3.04 3.04 0 000 4.3z",
      fill: primaryFill
    }));
  };
  var PlugDisconnectedRegular = /* @__PURE__ */ wrapIcon_default(PlugDisconnectedRegularIcon, "PlugDisconnectedRegular");
  var PowerRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React59.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React59.createElement("path", {
      d: "M10.5 2.5a.5.5 0 00-1 0v6a.5.5 0 001 0v-6zM13.74 4a.5.5 0 10-.5.87 6.5 6.5 0 11-6.49 0 .5.5 0 10-.5-.87 7.5 7.5 0 107.5 0z",
      fill: primaryFill
    }));
  };
  var PowerRegular = /* @__PURE__ */ wrapIcon_default(PowerRegularIcon, "PowerRegular");
  var SaveRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React59.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React59.createElement("path", {
      d: "M3 5c0-1.1.9-2 2-2h8.38a2 2 0 011.41.59l1.62 1.62A2 2 0 0117 6.62V15a2 2 0 01-2 2H5a2 2 0 01-2-2V5zm2-1a1 1 0 00-1 1v10a1 1 0 001 1v-4.5c0-.83.67-1.5 1.5-1.5h7c.83 0 1.5.67 1.5 1.5V16a1 1 0 001-1V6.62a1 1 0 00-.3-.7L14.1 4.28a1 1 0 00-.71-.29H13v2.5c0 .83-.67 1.5-1.5 1.5h-4A1.5 1.5 0 016 6.5V4H5zm2 0v2.5c0 .28.22.5.5.5h4a.5.5 0 00.5-.5V4H7zm7 12v-4.5a.5.5 0 00-.5-.5h-7a.5.5 0 00-.5.5V16h8z",
      fill: primaryFill
    }));
  };
  var SaveRegular = /* @__PURE__ */ wrapIcon_default(SaveRegularIcon, "SaveRegular");

  // node_modules/@fluentui/react-icons/lib/icons/chunk-6.js
  var React60 = __toESM(require_react());
  var SearchRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React60.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React60.createElement("path", {
      d: "M8.5 3a5.5 5.5 0 014.23 9.02l4.12 4.13a.5.5 0 01-.63.76l-.07-.06-4.13-4.12A5.5 5.5 0 118.5 3zm0 1a4.5 4.5 0 100 9 4.5 4.5 0 000-9z",
      fill: primaryFill
    }));
  };
  var SearchRegular = /* @__PURE__ */ wrapIcon_default(SearchRegularIcon, "SearchRegular");
  var SettingsRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React60.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React60.createElement("path", {
      d: "M1.91 7.38A8.5 8.5 0 013.69 4.3a.5.5 0 01.54-.13l1.92.68a1 1 0 001.32-.76l.36-2a.5.5 0 01.4-.4 8.53 8.53 0 013.55 0c.2.04.35.2.38.4l.37 2a1 1 0 001.32.76l1.92-.68a.5.5 0 01.54.13 8.5 8.5 0 011.78 3.08c.06.2 0 .4-.15.54l-1.56 1.32a1 1 0 000 1.52l1.56 1.32a.5.5 0 01.15.54 8.5 8.5 0 01-1.78 3.08.5.5 0 01-.54.13l-1.92-.68a1 1 0 00-1.32.76l-.37 2a.5.5 0 01-.38.4 8.53 8.53 0 01-3.56 0 .5.5 0 01-.39-.4l-.36-2a1 1 0 00-1.32-.76l-1.92.68a.5.5 0 01-.54-.13 8.5 8.5 0 01-1.78-3.08.5.5 0 01.15-.54l1.56-1.32a1 1 0 000-1.52L2.06 7.92a.5.5 0 01-.15-.54zm1.06 0l1.3 1.1a2 2 0 010 3.04l-1.3 1.1c.3.79.71 1.51 1.25 2.16l1.6-.58a2 2 0 012.63 1.53l.3 1.67a7.56 7.56 0 002.5 0l.3-1.67a2 2 0 012.64-1.53l1.6.58a7.5 7.5 0 001.24-2.16l-1.3-1.1a2 2 0 010-3.04l1.3-1.1a7.5 7.5 0 00-1.25-2.16l-1.6.58a2 2 0 01-2.63-1.53l-.3-1.67a7.55 7.55 0 00-2.5 0l-.3 1.67A2 2 0 015.81 5.8l-1.6-.58a7.5 7.5 0 00-1.24 2.16zM7.5 10a2.5 2.5 0 115 0 2.5 2.5 0 01-5 0zm1 0a1.5 1.5 0 103 0 1.5 1.5 0 00-3 0z",
      fill: primaryFill
    }));
  };
  var SettingsRegular = /* @__PURE__ */ wrapIcon_default(SettingsRegularIcon, "SettingsRegular");
  var StopRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React60.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React60.createElement("path", {
      d: "M15.5 4c.28 0 .5.22.5.5v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-11c0-.28.22-.5.5-.5h11zm-11-1C3.67 3 3 3.67 3 4.5v11c0 .83.67 1.5 1.5 1.5h11c.83 0 1.5-.67 1.5-1.5v-11c0-.83-.67-1.5-1.5-1.5h-11z",
      fill: primaryFill
    }));
  };
  var StopRegular = /* @__PURE__ */ wrapIcon_default(StopRegularIcon, "StopRegular");

  // node_modules/@fluentui/react-icons/lib/icons/chunk-7.js
  var React61 = __toESM(require_react());
  var TextGrammarErrorRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React61.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React61.createElement("path", {
      d: "M2.5 5a.5.5 0 000 1h15a.5.5 0 000-1h-15zm0 3a.5.5 0 000 1h15a.5.5 0 000-1h-15zM9 14.5c0-.17 0-.34.02-.5H2.5a.5.5 0 000 1h6.52a5.57 5.57 0 01-.02-.5zm.6-2.5c.18-.36.4-.7.66-1H2.5a.5.5 0 000 1h7.1zm9.4 2.5a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zM14.5 12a.5.5 0 00-.5.5v2a.5.5 0 001 0v-2a.5.5 0 00-.5-.5zm0 5.13a.62.62 0 100-1.25.62.62 0 000 1.24z",
      fill: primaryFill
    }));
  };
  var TextGrammarErrorRegular = /* @__PURE__ */ wrapIcon_default(TextGrammarErrorRegularIcon, "TextGrammarErrorRegular");

  // node_modules/@fluentui/react-icons/lib/icons/chunk-8.js
  var React62 = __toESM(require_react());
  var WandRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React62.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React62.createElement("path", {
      d: "M16.5 2c.28 0 .5.22.5.5V3h.5a.5.5 0 010 1H17v.5a.5.5 0 01-1 0V4h-.5a.5.5 0 110-1h.5v-.5c0-.28.22-.5.5-.5zm-10 4a.5.5 0 000-1H6v-.5a.5.5 0 00-1 0V5h-.5a.5.5 0 000 1H5v.5a.5.5 0 001 0V6h.5zm9 9a.5.5 0 000-1H15v-.5a.5.5 0 00-1 0v.5h-.5a.5.5 0 100 1h.5v.5a.5.5 0 101 0V15h.5zm-2.07-8.43a1.91 1.91 0 00-2.7 0l-8.17 8.16a1.91 1.91 0 102.7 2.7l8.17-8.16c.75-.74.75-1.96 0-2.7zm-2 .7a.91.91 0 011.3 1.3l-.48.47-1.3-1.29.48-.48zm-1.18 1.19l1.3 1.29-6.99 6.98a.91.91 0 01-1.3-1.29l6.99-6.98z",
      fill: primaryFill
    }));
  };
  var WandRegular = /* @__PURE__ */ wrapIcon_default(WandRegularIcon, "WandRegular");
  var WarningRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React62.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React62.createElement("path", {
      d: "M9.56 3.26a.5.5 0 01.88 0l6.5 12a.5.5 0 01-.44.74h-13a.5.5 0 01-.44-.74l6.5-12zm1.76-.47a1.5 1.5 0 00-2.64 0l-6.5 12A1.5 1.5 0 003.5 17h13a1.5 1.5 0 001.32-2.21l-6.5-12zM10.5 7.5a.5.5 0 10-1 0v4a.5.5 0 001 0v-4zm.25 6.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0z",
      fill: primaryFill
    }));
  };
  var WarningRegular = /* @__PURE__ */ wrapIcon_default(WarningRegularIcon, "WarningRegular");
  var WifiSettingsRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React62.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React62.createElement("path", {
      d: "M17.96 8.18a9.61 9.61 0 00-15.85 0 .5.5 0 00.83.56 8.61 8.61 0 0114.2 0 .5.5 0 10.82-.56zm-10.78 3.1a4.03 4.03 0 013.85-1.05c-.32.26-.6.55-.86.88a3.02 3.02 0 00-2.91 1.82.5.5 0 11-.92-.4c.2-.47.49-.9.84-1.24zm7.42-2.5l.2.23a5.59 5.59 0 00-1.35.09 5.45 5.45 0 00-8.28 1.79.5.5 0 01-.89-.46A6.45 6.45 0 0114.6 8.78zm-2.53 2.66a2 2 0 01-1.43 2.48l-.46.12a4.7 4.7 0 000 1.01l.35.09A2 2 0 0112 17.66l-.13.42c.26.2.54.38.84.52l.32-.35a2 2 0 012.91 0l.34.36c.3-.13.57-.3.82-.5l-.15-.55a2 2 0 011.43-2.48l.46-.12a4.7 4.7 0 00-.01-1.01l-.35-.09A2 2 0 0117 11.34l.13-.42c-.26-.2-.54-.38-.84-.52l-.32.35a2 2 0 01-2.91 0l-.34-.36c-.29.13-.57.3-.82.5l.16.55zm2.43 4.06a1 1 0 110-2 1 1 0 010 2z",
      fill: primaryFill
    }));
  };
  var WifiSettingsRegular = /* @__PURE__ */ wrapIcon_default(WifiSettingsRegularIcon, "WifiSettingsRegular");
  var WindowConsoleRegularIcon = (props) => {
    const {
      fill: primaryFill = "currentColor",
      className
    } = props;
    return React62.createElement("svg", Object.assign({}, props, {
      width: "1em",
      height: "1em",
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg",
      className
    }), React62.createElement("path", {
      d: "M5.65 9.15c.2-.2.5-.2.7 0l2 2a.5.5 0 010 .7l-2 2a.5.5 0 01-.7-.7l1.64-1.65-1.64-1.65a.5.5 0 010-.7zM14.5 13h-5a.5.5 0 000 1h5a.5.5 0 000-1zM3 5.5A2.5 2.5 0 015.5 3h9A2.5 2.5 0 0117 5.5v9a2.5 2.5 0 01-2.5 2.5h-9A2.5 2.5 0 013 14.5v-9zM16 6v-.5c0-.83-.68-1.5-1.5-1.5h-9C4.67 4 4 4.67 4 5.5V6h12zM4 7v7.5c0 .83.67 1.5 1.5 1.5h9c.82 0 1.5-.67 1.5-1.5V7H4z",
      fill: primaryFill
    }));
  };
  var WindowConsoleRegular = /* @__PURE__ */ wrapIcon_default(WindowConsoleRegularIcon, "WindowConsoleRegular");

  // src/utils/icons.tsx
  var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
  var STYLE = {};
  function register() {
    registerIcons({
      icons: {
        AddCircle: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(AddCircleRegular, {
          style: STYLE
        }),
        ArrowClockwise: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ArrowClockwiseRegular, {
          style: STYLE
        }),
        Bookmark: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(BookmarkRegular, {
          style: STYLE
        }),
        BookSearch: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(BookSearchRegular, {
          style: STYLE
        }),
        Box: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(BoxRegular, {
          style: STYLE
        }),
        Bug: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(BugRegular, {
          style: STYLE
        }),
        Camera: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CameraRegular, {
          style: STYLE
        }),
        ChevronDown: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ChevronDownRegular, {
          style: STYLE
        }),
        ChevronRight: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ChevronRightRegular, {
          style: STYLE
        }),
        ChevronUp: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ChevronUpRegular, {
          style: STYLE
        }),
        Circle: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CircleRegular, {
          style: STYLE
        }),
        Copy: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CopyRegular, {
          style: STYLE
        }),
        CloudArrowUp: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CloudArrowUpRegular, {
          style: STYLE
        }),
        CloudArrowDown: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CloudArrowDownRegular, {
          style: STYLE
        }),
        Delete: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(DeleteRegular, {
          style: STYLE
        }),
        Document: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(DocumentRegular, {
          style: STYLE
        }),
        Folder: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(FolderRegular, {
          style: STYLE
        }),
        FullScreenMaximize: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(FullScreenMaximizeRegular, {
          style: STYLE
        }),
        Info: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(InfoRegular, {
          style: STYLE
        }),
        Lightbulb: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(LightbulbRegular, {
          style: STYLE
        }),
        LightbulbFilament: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(LightbulbFilamentRegular, {
          style: STYLE
        }),
        Navigation: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(NavigationRegular, {
          style: STYLE
        }),
        Orientation: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(OrientationRegular, {
          style: STYLE
        }),
        PanelBottom: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PanelBottomRegular, {
          style: STYLE
        }),
        PersonFeedback: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PersonFeedbackRegular, {
          style: STYLE
        }),
        Phone: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PhoneRegular, {
          style: STYLE
        }),
        PhoneLaptop: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PhoneLaptopRegular, {
          style: STYLE
        }),
        Play: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PlayRegular, {
          style: STYLE
        }),
        PlugConnected: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PlugConnectedRegular, {
          style: STYLE
        }),
        PlugDisconnected: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PlugDisconnectedRegular, {
          style: STYLE
        }),
        Power: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PowerRegular, {
          style: STYLE
        }),
        RotateLeft: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ArrowRotateCounterclockwiseRegular, {
          style: STYLE
        }),
        RotateRight: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ArrowRotateClockwiseRegular, {
          style: STYLE
        }),
        Save: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(SaveRegular, {
          style: STYLE
        }),
        Settings: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(SettingsRegular, {
          style: STYLE
        }),
        Stop: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(StopRegular, {
          style: STYLE
        }),
        TextGrammarError: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(TextGrammarErrorRegular, {
          style: STYLE
        }),
        Wand: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(WandRegular, {
          style: STYLE
        }),
        Warning: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(WarningRegular, {
          style: STYLE
        }),
        WifiSettings: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(WifiSettingsRegular, {
          style: STYLE
        }),
        WindowConsole: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(WindowConsoleRegular, {
          style: STYLE
        }),
        Checkmark: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CheckmarkRegular, {
          style: STYLE
        }),
        StatusCircleCheckmark: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CheckmarkRegular, {
          style: STYLE
        }),
        ChevronUpSmall: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ChevronUpRegular, {
          style: STYLE
        }),
        ChevronDownSmall: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ChevronDownRegular, {
          style: STYLE
        }),
        CircleRing: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CircleRegular, {
          style: STYLE
        }),
        More: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(MoreHorizontalRegular, {}),
        SortUp: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ArrowSortUpRegular, {
          style: STYLE
        }),
        SortDown: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ArrowSortDownRegular, {
          style: STYLE
        }),
        Search: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(SearchRegular, {
          style: STYLE
        }),
        Filter: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(FilterRegular, {
          style: STYLE
        }),
        Document20: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(DocumentRegular, {
          style: { fontSize: 20, verticalAlign: "middle" }
        })
      }
    });
  }

  // src/app/App.tsx
  var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
  var CredentialStore2 = new AdbWebCredentialStore();
  register();
  function App() {
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", {
      className: "adb-demo",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Aside, {}),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(FileList, {})
      ]
    });
  }
  var App_default = observer2(App);

  // src/index.tsx
  var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
  var root = import_client.default.createRoot(document.querySelector("#root"));
  root.render(
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_react15.default.StrictMode, {
      children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(App_default, {})
    })
  );
})();
/**
 * @license
 * web-streams-polyfill v4.0.0-beta.3
 * Copyright 2021 Mattias Buelens, Diwank Singh Tomer and other contributors.
 * This code is released under the MIT license.
 * SPDX-License-Identifier: MIT
 */
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
